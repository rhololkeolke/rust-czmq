/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl <T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl <T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl <T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __IncompleteArrayField<T> { }
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const __llvm__: ::std::os::raw::c_uint = 1;
pub const __clang__: ::std::os::raw::c_uint = 1;
pub const __clang_major__: ::std::os::raw::c_uint = 3;
pub const __clang_minor__: ::std::os::raw::c_uint = 8;
pub const __clang_patchlevel__: ::std::os::raw::c_uint = 0;
pub const __clang_version__: &'static [u8; 31usize] =
    b"3.8.0 (tags/RELEASE_380/final)\x00";
pub const __GNUC_MINOR__: ::std::os::raw::c_uint = 2;
pub const __GNUC_PATCHLEVEL__: ::std::os::raw::c_uint = 1;
pub const __GNUC__: ::std::os::raw::c_uint = 4;
pub const __GXX_ABI_VERSION: ::std::os::raw::c_uint = 1002;
pub const __ATOMIC_RELAXED: ::std::os::raw::c_uint = 0;
pub const __ATOMIC_CONSUME: ::std::os::raw::c_uint = 1;
pub const __ATOMIC_ACQUIRE: ::std::os::raw::c_uint = 2;
pub const __ATOMIC_RELEASE: ::std::os::raw::c_uint = 3;
pub const __ATOMIC_ACQ_REL: ::std::os::raw::c_uint = 4;
pub const __ATOMIC_SEQ_CST: ::std::os::raw::c_uint = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: ::std::os::raw::c_uint = 1;
pub const __VERSION__: &'static [u8; 54usize] =
    b"4.2.1 Compatible Clang 3.8.0 (tags/RELEASE_380/final)\x00";
pub const __CONSTANT_CFSTRINGS__: ::std::os::raw::c_uint = 1;
pub const __GXX_RTTI: ::std::os::raw::c_uint = 1;
pub const __ORDER_LITTLE_ENDIAN__: ::std::os::raw::c_uint = 1234;
pub const __ORDER_BIG_ENDIAN__: ::std::os::raw::c_uint = 4321;
pub const __ORDER_PDP_ENDIAN__: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER__: ::std::os::raw::c_uint = 1234;
pub const __LITTLE_ENDIAN__: ::std::os::raw::c_uint = 1;
pub const _LP64: ::std::os::raw::c_uint = 1;
pub const __LP64__: ::std::os::raw::c_uint = 1;
pub const __CHAR_BIT__: ::std::os::raw::c_uint = 8;
pub const __SCHAR_MAX__: ::std::os::raw::c_uint = 127;
pub const __SHRT_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __WCHAR_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INTMAX_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: ::std::os::raw::c_int = -1;
pub const __UINTMAX_MAX__: ::std::os::raw::c_int = -1;
pub const __PTRDIFF_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: ::std::os::raw::c_int = -1;
pub const __SIZEOF_DOUBLE__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_FLOAT__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_INT__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_LONG__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_LONG_DOUBLE__: ::std::os::raw::c_uint = 16;
pub const __SIZEOF_LONG_LONG__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_POINTER__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_SHORT__: ::std::os::raw::c_uint = 2;
pub const __SIZEOF_PTRDIFF_T__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_SIZE_T__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_WCHAR_T__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_WINT_T__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_INT128__: ::std::os::raw::c_uint = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INTMAX_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __PTRDIFF_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __INTPTR_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __SIZE_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __WCHAR_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __WINT_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __SIG_ATOMIC_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __SIG_ATOMIC_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __UINTPTR_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __FLT_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __FLT_DIG__: ::std::os::raw::c_uint = 6;
pub const __FLT_DECIMAL_DIG__: ::std::os::raw::c_uint = 9;
pub const __FLT_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __FLT_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __FLT_MANT_DIG__: ::std::os::raw::c_uint = 24;
pub const __FLT_MAX_10_EXP__: ::std::os::raw::c_uint = 38;
pub const __FLT_MAX_EXP__: ::std::os::raw::c_uint = 128;
pub const __FLT_MIN_10_EXP__: ::std::os::raw::c_int = -37;
pub const __FLT_MIN_EXP__: ::std::os::raw::c_int = -125;
pub const __DBL_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __DBL_DIG__: ::std::os::raw::c_uint = 15;
pub const __DBL_DECIMAL_DIG__: ::std::os::raw::c_uint = 17;
pub const __DBL_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __DBL_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __DBL_MANT_DIG__: ::std::os::raw::c_uint = 53;
pub const __DBL_MAX_10_EXP__: ::std::os::raw::c_uint = 308;
pub const __DBL_MAX_EXP__: ::std::os::raw::c_uint = 1024;
pub const __DBL_MIN_10_EXP__: ::std::os::raw::c_int = -307;
pub const __DBL_MIN_EXP__: ::std::os::raw::c_int = -1021;
pub const __LDBL_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __LDBL_DIG__: ::std::os::raw::c_uint = 18;
pub const __LDBL_DECIMAL_DIG__: ::std::os::raw::c_uint = 21;
pub const __LDBL_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __LDBL_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __LDBL_MANT_DIG__: ::std::os::raw::c_uint = 64;
pub const __LDBL_MAX_10_EXP__: ::std::os::raw::c_uint = 4932;
pub const __LDBL_MAX_EXP__: ::std::os::raw::c_uint = 16384;
pub const __LDBL_MIN_10_EXP__: ::std::os::raw::c_int = -4931;
pub const __LDBL_MIN_EXP__: ::std::os::raw::c_int = -16381;
pub const __POINTER_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __BIGGEST_ALIGNMENT__: ::std::os::raw::c_uint = 16;
pub const __WINT_UNSIGNED__: ::std::os::raw::c_uint = 1;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __UINT8_MAX__: ::std::os::raw::c_uint = 255;
pub const __INT8_MAX__: ::std::os::raw::c_uint = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __UINT16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __INT16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __UINT32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __UINT64_MAX__: ::std::os::raw::c_int = -1;
pub const __INT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: ::std::os::raw::c_uint = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_LEAST8_MAX__: ::std::os::raw::c_uint = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_LEAST16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_LEAST16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_LEAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_LEAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_LEAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_LEAST64_MAX__: ::std::os::raw::c_int = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INT_FAST8_MAX__: ::std::os::raw::c_uint = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_FAST8_MAX__: ::std::os::raw::c_uint = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_FAST16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_FAST16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_FAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_FAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_FAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_FAST64_MAX__: ::std::os::raw::c_int = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __FINITE_MATH_ONLY__: ::std::os::raw::c_uint = 0;
pub const __GNUC_STDC_INLINE__: ::std::os::raw::c_uint = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: ::std::os::raw::c_uint = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __NO_INLINE__: ::std::os::raw::c_uint = 1;
pub const __FLT_EVAL_METHOD__: ::std::os::raw::c_uint = 0;
pub const __FLT_RADIX__: ::std::os::raw::c_uint = 2;
pub const __DECIMAL_DIG__: ::std::os::raw::c_uint = 21;
pub const __amd64__: ::std::os::raw::c_uint = 1;
pub const __amd64: ::std::os::raw::c_uint = 1;
pub const __x86_64: ::std::os::raw::c_uint = 1;
pub const __x86_64__: ::std::os::raw::c_uint = 1;
pub const __k8: ::std::os::raw::c_uint = 1;
pub const __k8__: ::std::os::raw::c_uint = 1;
pub const __tune_k8__: ::std::os::raw::c_uint = 1;
pub const __NO_MATH_INLINES: ::std::os::raw::c_uint = 1;
pub const __FXSR__: ::std::os::raw::c_uint = 1;
pub const __SSE2__: ::std::os::raw::c_uint = 1;
pub const __SSE2_MATH__: ::std::os::raw::c_uint = 1;
pub const __SSE__: ::std::os::raw::c_uint = 1;
pub const __SSE_MATH__: ::std::os::raw::c_uint = 1;
pub const __MMX__: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: ::std::os::raw::c_uint = 1;
pub const unix: ::std::os::raw::c_uint = 1;
pub const __unix: ::std::os::raw::c_uint = 1;
pub const __unix__: ::std::os::raw::c_uint = 1;
pub const linux: ::std::os::raw::c_uint = 1;
pub const __linux: ::std::os::raw::c_uint = 1;
pub const __linux__: ::std::os::raw::c_uint = 1;
pub const __gnu_linux__: ::std::os::raw::c_uint = 1;
pub const __ELF__: ::std::os::raw::c_uint = 1;
pub const __STDC__: ::std::os::raw::c_uint = 1;
pub const __STDC_HOSTED__: ::std::os::raw::c_uint = 1;
pub const __STDC_VERSION__: ::std::os::raw::c_uint = 201112;
pub const __STDC_UTF_16__: ::std::os::raw::c_uint = 1;
pub const __STDC_UTF_32__: ::std::os::raw::c_uint = 1;
pub const CZMQ_BUILD_DRAFT_API: ::std::os::raw::c_uint = 1;
pub const ZMQ_VERSION_MAJOR: ::std::os::raw::c_uint = 4;
pub const ZMQ_VERSION_MINOR: ::std::os::raw::c_uint = 1;
pub const ZMQ_VERSION_PATCH: ::std::os::raw::c_uint = 4;
pub const _ERRNO_H: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 23;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const EPERM: ::std::os::raw::c_uint = 1;
pub const ENOENT: ::std::os::raw::c_uint = 2;
pub const ESRCH: ::std::os::raw::c_uint = 3;
pub const EINTR: ::std::os::raw::c_uint = 4;
pub const EIO: ::std::os::raw::c_uint = 5;
pub const ENXIO: ::std::os::raw::c_uint = 6;
pub const E2BIG: ::std::os::raw::c_uint = 7;
pub const ENOEXEC: ::std::os::raw::c_uint = 8;
pub const EBADF: ::std::os::raw::c_uint = 9;
pub const ECHILD: ::std::os::raw::c_uint = 10;
pub const EAGAIN: ::std::os::raw::c_uint = 11;
pub const ENOMEM: ::std::os::raw::c_uint = 12;
pub const EACCES: ::std::os::raw::c_uint = 13;
pub const EFAULT: ::std::os::raw::c_uint = 14;
pub const ENOTBLK: ::std::os::raw::c_uint = 15;
pub const EBUSY: ::std::os::raw::c_uint = 16;
pub const EEXIST: ::std::os::raw::c_uint = 17;
pub const EXDEV: ::std::os::raw::c_uint = 18;
pub const ENODEV: ::std::os::raw::c_uint = 19;
pub const ENOTDIR: ::std::os::raw::c_uint = 20;
pub const EISDIR: ::std::os::raw::c_uint = 21;
pub const EINVAL: ::std::os::raw::c_uint = 22;
pub const ENFILE: ::std::os::raw::c_uint = 23;
pub const EMFILE: ::std::os::raw::c_uint = 24;
pub const ENOTTY: ::std::os::raw::c_uint = 25;
pub const ETXTBSY: ::std::os::raw::c_uint = 26;
pub const EFBIG: ::std::os::raw::c_uint = 27;
pub const ENOSPC: ::std::os::raw::c_uint = 28;
pub const ESPIPE: ::std::os::raw::c_uint = 29;
pub const EROFS: ::std::os::raw::c_uint = 30;
pub const EMLINK: ::std::os::raw::c_uint = 31;
pub const EPIPE: ::std::os::raw::c_uint = 32;
pub const EDOM: ::std::os::raw::c_uint = 33;
pub const ERANGE: ::std::os::raw::c_uint = 34;
pub const EDEADLK: ::std::os::raw::c_uint = 35;
pub const ENAMETOOLONG: ::std::os::raw::c_uint = 36;
pub const ENOLCK: ::std::os::raw::c_uint = 37;
pub const ENOSYS: ::std::os::raw::c_uint = 38;
pub const ENOTEMPTY: ::std::os::raw::c_uint = 39;
pub const ELOOP: ::std::os::raw::c_uint = 40;
pub const EWOULDBLOCK: ::std::os::raw::c_uint = 11;
pub const ENOMSG: ::std::os::raw::c_uint = 42;
pub const EIDRM: ::std::os::raw::c_uint = 43;
pub const ECHRNG: ::std::os::raw::c_uint = 44;
pub const EL2NSYNC: ::std::os::raw::c_uint = 45;
pub const EL3HLT: ::std::os::raw::c_uint = 46;
pub const EL3RST: ::std::os::raw::c_uint = 47;
pub const ELNRNG: ::std::os::raw::c_uint = 48;
pub const EUNATCH: ::std::os::raw::c_uint = 49;
pub const ENOCSI: ::std::os::raw::c_uint = 50;
pub const EL2HLT: ::std::os::raw::c_uint = 51;
pub const EBADE: ::std::os::raw::c_uint = 52;
pub const EBADR: ::std::os::raw::c_uint = 53;
pub const EXFULL: ::std::os::raw::c_uint = 54;
pub const ENOANO: ::std::os::raw::c_uint = 55;
pub const EBADRQC: ::std::os::raw::c_uint = 56;
pub const EBADSLT: ::std::os::raw::c_uint = 57;
pub const EDEADLOCK: ::std::os::raw::c_uint = 35;
pub const EBFONT: ::std::os::raw::c_uint = 59;
pub const ENOSTR: ::std::os::raw::c_uint = 60;
pub const ENODATA: ::std::os::raw::c_uint = 61;
pub const ETIME: ::std::os::raw::c_uint = 62;
pub const ENOSR: ::std::os::raw::c_uint = 63;
pub const ENONET: ::std::os::raw::c_uint = 64;
pub const ENOPKG: ::std::os::raw::c_uint = 65;
pub const EREMOTE: ::std::os::raw::c_uint = 66;
pub const ENOLINK: ::std::os::raw::c_uint = 67;
pub const EADV: ::std::os::raw::c_uint = 68;
pub const ESRMNT: ::std::os::raw::c_uint = 69;
pub const ECOMM: ::std::os::raw::c_uint = 70;
pub const EPROTO: ::std::os::raw::c_uint = 71;
pub const EMULTIHOP: ::std::os::raw::c_uint = 72;
pub const EDOTDOT: ::std::os::raw::c_uint = 73;
pub const EBADMSG: ::std::os::raw::c_uint = 74;
pub const EOVERFLOW: ::std::os::raw::c_uint = 75;
pub const ENOTUNIQ: ::std::os::raw::c_uint = 76;
pub const EBADFD: ::std::os::raw::c_uint = 77;
pub const EREMCHG: ::std::os::raw::c_uint = 78;
pub const ELIBACC: ::std::os::raw::c_uint = 79;
pub const ELIBBAD: ::std::os::raw::c_uint = 80;
pub const ELIBSCN: ::std::os::raw::c_uint = 81;
pub const ELIBMAX: ::std::os::raw::c_uint = 82;
pub const ELIBEXEC: ::std::os::raw::c_uint = 83;
pub const EILSEQ: ::std::os::raw::c_uint = 84;
pub const ERESTART: ::std::os::raw::c_uint = 85;
pub const ESTRPIPE: ::std::os::raw::c_uint = 86;
pub const EUSERS: ::std::os::raw::c_uint = 87;
pub const ENOTSOCK: ::std::os::raw::c_uint = 88;
pub const EDESTADDRREQ: ::std::os::raw::c_uint = 89;
pub const EMSGSIZE: ::std::os::raw::c_uint = 90;
pub const EPROTOTYPE: ::std::os::raw::c_uint = 91;
pub const ENOPROTOOPT: ::std::os::raw::c_uint = 92;
pub const EPROTONOSUPPORT: ::std::os::raw::c_uint = 93;
pub const ESOCKTNOSUPPORT: ::std::os::raw::c_uint = 94;
pub const EOPNOTSUPP: ::std::os::raw::c_uint = 95;
pub const EPFNOSUPPORT: ::std::os::raw::c_uint = 96;
pub const EAFNOSUPPORT: ::std::os::raw::c_uint = 97;
pub const EADDRINUSE: ::std::os::raw::c_uint = 98;
pub const EADDRNOTAVAIL: ::std::os::raw::c_uint = 99;
pub const ENETDOWN: ::std::os::raw::c_uint = 100;
pub const ENETUNREACH: ::std::os::raw::c_uint = 101;
pub const ENETRESET: ::std::os::raw::c_uint = 102;
pub const ECONNABORTED: ::std::os::raw::c_uint = 103;
pub const ECONNRESET: ::std::os::raw::c_uint = 104;
pub const ENOBUFS: ::std::os::raw::c_uint = 105;
pub const EISCONN: ::std::os::raw::c_uint = 106;
pub const ENOTCONN: ::std::os::raw::c_uint = 107;
pub const ESHUTDOWN: ::std::os::raw::c_uint = 108;
pub const ETOOMANYREFS: ::std::os::raw::c_uint = 109;
pub const ETIMEDOUT: ::std::os::raw::c_uint = 110;
pub const ECONNREFUSED: ::std::os::raw::c_uint = 111;
pub const EHOSTDOWN: ::std::os::raw::c_uint = 112;
pub const EHOSTUNREACH: ::std::os::raw::c_uint = 113;
pub const EALREADY: ::std::os::raw::c_uint = 114;
pub const EINPROGRESS: ::std::os::raw::c_uint = 115;
pub const ESTALE: ::std::os::raw::c_uint = 116;
pub const EUCLEAN: ::std::os::raw::c_uint = 117;
pub const ENOTNAM: ::std::os::raw::c_uint = 118;
pub const ENAVAIL: ::std::os::raw::c_uint = 119;
pub const EISNAM: ::std::os::raw::c_uint = 120;
pub const EREMOTEIO: ::std::os::raw::c_uint = 121;
pub const EDQUOT: ::std::os::raw::c_uint = 122;
pub const ENOMEDIUM: ::std::os::raw::c_uint = 123;
pub const EMEDIUMTYPE: ::std::os::raw::c_uint = 124;
pub const ECANCELED: ::std::os::raw::c_uint = 125;
pub const ENOKEY: ::std::os::raw::c_uint = 126;
pub const EKEYEXPIRED: ::std::os::raw::c_uint = 127;
pub const EKEYREVOKED: ::std::os::raw::c_uint = 128;
pub const EKEYREJECTED: ::std::os::raw::c_uint = 129;
pub const EOWNERDEAD: ::std::os::raw::c_uint = 130;
pub const ENOTRECOVERABLE: ::std::os::raw::c_uint = 131;
pub const ERFKILL: ::std::os::raw::c_uint = 132;
pub const EHWPOISON: ::std::os::raw::c_uint = 133;
pub const ENOTSUP: ::std::os::raw::c_uint = 95;
pub const _STDIO_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __FILE_defined: ::std::os::raw::c_uint = 1;
pub const ____FILE_defined: ::std::os::raw::c_uint = 1;
pub const _G_config_h: ::std::os::raw::c_uint = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uint = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uint = 1;
pub const EOF: ::std::os::raw::c_int = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uint = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uint = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uint = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uint = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uint = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uint = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uint = 64;
pub const _IOS_BIN: ::std::os::raw::c_uint = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uint = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uint = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uint = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uint = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uint = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uint = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uint = 64;
pub const _IO_LINKED: ::std::os::raw::c_uint = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_uint = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_uint = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_uint = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_uint = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_uint = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_uint = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_uint = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uint = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uint = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uint = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uint = 1;
pub const _IO_LEFT: ::std::os::raw::c_uint = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uint = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uint = 8;
pub const _IO_DEC: ::std::os::raw::c_uint = 16;
pub const _IO_OCT: ::std::os::raw::c_uint = 32;
pub const _IO_HEX: ::std::os::raw::c_uint = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uint = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_uint = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_uint = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_uint = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_uint = 2048;
pub const _IO_FIXED: ::std::os::raw::c_uint = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_STDIO: ::std::os::raw::c_uint = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_uint = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 4096;
pub const L_ctermid: ::std::os::raw::c_uint = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 16;
pub const ZMQ_DEFINED_STDINT: ::std::os::raw::c_uint = 1;
pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const __WCHAR_MAX: ::std::os::raw::c_uint = 2147483647;
pub const __WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const WCHAR_MAX: ::std::os::raw::c_uint = 2147483647;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const ZMQ_HAUSNUMERO: ::std::os::raw::c_uint = 156384712;
pub const EFSM: ::std::os::raw::c_uint = 156384763;
pub const ENOCOMPATPROTO: ::std::os::raw::c_uint = 156384764;
pub const ETERM: ::std::os::raw::c_uint = 156384765;
pub const EMTHREAD: ::std::os::raw::c_uint = 156384766;
pub const ZMQ_IO_THREADS: ::std::os::raw::c_uint = 1;
pub const ZMQ_MAX_SOCKETS: ::std::os::raw::c_uint = 2;
pub const ZMQ_SOCKET_LIMIT: ::std::os::raw::c_uint = 3;
pub const ZMQ_THREAD_PRIORITY: ::std::os::raw::c_uint = 3;
pub const ZMQ_THREAD_SCHED_POLICY: ::std::os::raw::c_uint = 4;
pub const ZMQ_IO_THREADS_DFLT: ::std::os::raw::c_uint = 1;
pub const ZMQ_MAX_SOCKETS_DFLT: ::std::os::raw::c_uint = 1023;
pub const ZMQ_THREAD_PRIORITY_DFLT: ::std::os::raw::c_int = -1;
pub const ZMQ_PAIR: ::std::os::raw::c_uint = 0;
pub const ZMQ_PUB: ::std::os::raw::c_uint = 1;
pub const ZMQ_SUB: ::std::os::raw::c_uint = 2;
pub const ZMQ_REQ: ::std::os::raw::c_uint = 3;
pub const ZMQ_REP: ::std::os::raw::c_uint = 4;
pub const ZMQ_DEALER: ::std::os::raw::c_uint = 5;
pub const ZMQ_ROUTER: ::std::os::raw::c_uint = 6;
pub const ZMQ_PULL: ::std::os::raw::c_uint = 7;
pub const ZMQ_PUSH: ::std::os::raw::c_uint = 8;
pub const ZMQ_XPUB: ::std::os::raw::c_uint = 9;
pub const ZMQ_XSUB: ::std::os::raw::c_uint = 10;
pub const ZMQ_STREAM: ::std::os::raw::c_uint = 11;
pub const ZMQ_XREQ: ::std::os::raw::c_uint = 5;
pub const ZMQ_XREP: ::std::os::raw::c_uint = 6;
pub const ZMQ_AFFINITY: ::std::os::raw::c_uint = 4;
pub const ZMQ_IDENTITY: ::std::os::raw::c_uint = 5;
pub const ZMQ_SUBSCRIBE: ::std::os::raw::c_uint = 6;
pub const ZMQ_UNSUBSCRIBE: ::std::os::raw::c_uint = 7;
pub const ZMQ_RATE: ::std::os::raw::c_uint = 8;
pub const ZMQ_RECOVERY_IVL: ::std::os::raw::c_uint = 9;
pub const ZMQ_SNDBUF: ::std::os::raw::c_uint = 11;
pub const ZMQ_RCVBUF: ::std::os::raw::c_uint = 12;
pub const ZMQ_RCVMORE: ::std::os::raw::c_uint = 13;
pub const ZMQ_FD: ::std::os::raw::c_uint = 14;
pub const ZMQ_EVENTS: ::std::os::raw::c_uint = 15;
pub const ZMQ_TYPE: ::std::os::raw::c_uint = 16;
pub const ZMQ_LINGER: ::std::os::raw::c_uint = 17;
pub const ZMQ_RECONNECT_IVL: ::std::os::raw::c_uint = 18;
pub const ZMQ_BACKLOG: ::std::os::raw::c_uint = 19;
pub const ZMQ_RECONNECT_IVL_MAX: ::std::os::raw::c_uint = 21;
pub const ZMQ_MAXMSGSIZE: ::std::os::raw::c_uint = 22;
pub const ZMQ_SNDHWM: ::std::os::raw::c_uint = 23;
pub const ZMQ_RCVHWM: ::std::os::raw::c_uint = 24;
pub const ZMQ_MULTICAST_HOPS: ::std::os::raw::c_uint = 25;
pub const ZMQ_RCVTIMEO: ::std::os::raw::c_uint = 27;
pub const ZMQ_SNDTIMEO: ::std::os::raw::c_uint = 28;
pub const ZMQ_LAST_ENDPOINT: ::std::os::raw::c_uint = 32;
pub const ZMQ_ROUTER_MANDATORY: ::std::os::raw::c_uint = 33;
pub const ZMQ_TCP_KEEPALIVE: ::std::os::raw::c_uint = 34;
pub const ZMQ_TCP_KEEPALIVE_CNT: ::std::os::raw::c_uint = 35;
pub const ZMQ_TCP_KEEPALIVE_IDLE: ::std::os::raw::c_uint = 36;
pub const ZMQ_TCP_KEEPALIVE_INTVL: ::std::os::raw::c_uint = 37;
pub const ZMQ_IMMEDIATE: ::std::os::raw::c_uint = 39;
pub const ZMQ_XPUB_VERBOSE: ::std::os::raw::c_uint = 40;
pub const ZMQ_ROUTER_RAW: ::std::os::raw::c_uint = 41;
pub const ZMQ_IPV6: ::std::os::raw::c_uint = 42;
pub const ZMQ_MECHANISM: ::std::os::raw::c_uint = 43;
pub const ZMQ_PLAIN_SERVER: ::std::os::raw::c_uint = 44;
pub const ZMQ_PLAIN_USERNAME: ::std::os::raw::c_uint = 45;
pub const ZMQ_PLAIN_PASSWORD: ::std::os::raw::c_uint = 46;
pub const ZMQ_CURVE_SERVER: ::std::os::raw::c_uint = 47;
pub const ZMQ_CURVE_PUBLICKEY: ::std::os::raw::c_uint = 48;
pub const ZMQ_CURVE_SECRETKEY: ::std::os::raw::c_uint = 49;
pub const ZMQ_CURVE_SERVERKEY: ::std::os::raw::c_uint = 50;
pub const ZMQ_PROBE_ROUTER: ::std::os::raw::c_uint = 51;
pub const ZMQ_REQ_CORRELATE: ::std::os::raw::c_uint = 52;
pub const ZMQ_REQ_RELAXED: ::std::os::raw::c_uint = 53;
pub const ZMQ_CONFLATE: ::std::os::raw::c_uint = 54;
pub const ZMQ_ZAP_DOMAIN: ::std::os::raw::c_uint = 55;
pub const ZMQ_ROUTER_HANDOVER: ::std::os::raw::c_uint = 56;
pub const ZMQ_TOS: ::std::os::raw::c_uint = 57;
pub const ZMQ_CONNECT_RID: ::std::os::raw::c_uint = 61;
pub const ZMQ_GSSAPI_SERVER: ::std::os::raw::c_uint = 62;
pub const ZMQ_GSSAPI_PRINCIPAL: ::std::os::raw::c_uint = 63;
pub const ZMQ_GSSAPI_SERVICE_PRINCIPAL: ::std::os::raw::c_uint = 64;
pub const ZMQ_GSSAPI_PLAINTEXT: ::std::os::raw::c_uint = 65;
pub const ZMQ_HANDSHAKE_IVL: ::std::os::raw::c_uint = 66;
pub const ZMQ_SOCKS_PROXY: ::std::os::raw::c_uint = 68;
pub const ZMQ_XPUB_NODROP: ::std::os::raw::c_uint = 69;
pub const ZMQ_MORE: ::std::os::raw::c_uint = 1;
pub const ZMQ_SRCFD: ::std::os::raw::c_uint = 2;
pub const ZMQ_SHARED: ::std::os::raw::c_uint = 3;
pub const ZMQ_DONTWAIT: ::std::os::raw::c_uint = 1;
pub const ZMQ_SNDMORE: ::std::os::raw::c_uint = 2;
pub const ZMQ_NULL: ::std::os::raw::c_uint = 0;
pub const ZMQ_PLAIN: ::std::os::raw::c_uint = 1;
pub const ZMQ_CURVE: ::std::os::raw::c_uint = 2;
pub const ZMQ_GSSAPI: ::std::os::raw::c_uint = 3;
pub const ZMQ_TCP_ACCEPT_FILTER: ::std::os::raw::c_uint = 38;
pub const ZMQ_IPC_FILTER_PID: ::std::os::raw::c_uint = 58;
pub const ZMQ_IPC_FILTER_UID: ::std::os::raw::c_uint = 59;
pub const ZMQ_IPC_FILTER_GID: ::std::os::raw::c_uint = 60;
pub const ZMQ_IPV4ONLY: ::std::os::raw::c_uint = 31;
pub const ZMQ_DELAY_ATTACH_ON_CONNECT: ::std::os::raw::c_uint = 39;
pub const ZMQ_NOBLOCK: ::std::os::raw::c_uint = 1;
pub const ZMQ_FAIL_UNROUTABLE: ::std::os::raw::c_uint = 33;
pub const ZMQ_ROUTER_BEHAVIOR: ::std::os::raw::c_uint = 33;
pub const ZMQ_EVENT_CONNECTED: ::std::os::raw::c_uint = 1;
pub const ZMQ_EVENT_CONNECT_DELAYED: ::std::os::raw::c_uint = 2;
pub const ZMQ_EVENT_CONNECT_RETRIED: ::std::os::raw::c_uint = 4;
pub const ZMQ_EVENT_LISTENING: ::std::os::raw::c_uint = 8;
pub const ZMQ_EVENT_BIND_FAILED: ::std::os::raw::c_uint = 16;
pub const ZMQ_EVENT_ACCEPTED: ::std::os::raw::c_uint = 32;
pub const ZMQ_EVENT_ACCEPT_FAILED: ::std::os::raw::c_uint = 64;
pub const ZMQ_EVENT_CLOSED: ::std::os::raw::c_uint = 128;
pub const ZMQ_EVENT_CLOSE_FAILED: ::std::os::raw::c_uint = 256;
pub const ZMQ_EVENT_DISCONNECTED: ::std::os::raw::c_uint = 512;
pub const ZMQ_EVENT_MONITOR_STOPPED: ::std::os::raw::c_uint = 1024;
pub const ZMQ_POLLIN: ::std::os::raw::c_uint = 1;
pub const ZMQ_POLLOUT: ::std::os::raw::c_uint = 2;
pub const ZMQ_POLLERR: ::std::os::raw::c_uint = 4;
pub const ZMQ_STREAMER: ::std::os::raw::c_uint = 1;
pub const ZMQ_FORWARDER: ::std::os::raw::c_uint = 2;
pub const ZMQ_QUEUE: ::std::os::raw::c_uint = 3;
pub const _CTYPE_H: ::std::os::raw::c_uint = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const _XLOCALE_H: ::std::os::raw::c_uint = 1;
pub const _LIBC_LIMITS_H_: ::std::os::raw::c_uint = 1;
pub const MB_LEN_MAX: ::std::os::raw::c_uint = 16;
pub const LLONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const ULLONG_MAX: ::std::os::raw::c_int = -1;
pub const _BITS_POSIX1_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uint = 1;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_uint = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uint = 25;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uint = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uint = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_uint = 512;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _POSIX_CLOCKRES_MIN: ::std::os::raw::c_uint = 20000000;
pub const NR_OPEN: ::std::os::raw::c_uint = 1024;
pub const NGROUPS_MAX: ::std::os::raw::c_uint = 65536;
pub const ARG_MAX: ::std::os::raw::c_uint = 131072;
pub const LINK_MAX: ::std::os::raw::c_uint = 127;
pub const MAX_CANON: ::std::os::raw::c_uint = 255;
pub const MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const NAME_MAX: ::std::os::raw::c_uint = 255;
pub const PATH_MAX: ::std::os::raw::c_uint = 4096;
pub const PIPE_BUF: ::std::os::raw::c_uint = 4096;
pub const XATTR_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const XATTR_SIZE_MAX: ::std::os::raw::c_uint = 65536;
pub const XATTR_LIST_MAX: ::std::os::raw::c_uint = 65536;
pub const RTSIG_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 128;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_uint = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 64;
pub const AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 20;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_uint = 16384;
pub const DELAYTIMER_MAX: ::std::os::raw::c_uint = 2147483647;
pub const TTY_NAME_MAX: ::std::os::raw::c_uint = 32;
pub const LOGIN_NAME_MAX: ::std::os::raw::c_uint = 256;
pub const HOST_NAME_MAX: ::std::os::raw::c_uint = 64;
pub const MQ_PRIO_MAX: ::std::os::raw::c_uint = 32768;
pub const SEM_VALUE_MAX: ::std::os::raw::c_uint = 2147483647;
pub const _BITS_POSIX2_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX2_BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX2_EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX2_LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 255;
pub const EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 2048;
pub const RE_DUP_MAX: ::std::os::raw::c_uint = 32767;
pub const SCHAR_MAX: ::std::os::raw::c_uint = 127;
pub const SHRT_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const LONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SCHAR_MIN: ::std::os::raw::c_int = -128;
pub const SHRT_MIN: ::std::os::raw::c_int = -32768;
pub const INT_MIN: ::std::os::raw::c_int = -2147483648;
pub const LONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const UCHAR_MAX: ::std::os::raw::c_uint = 255;
pub const USHRT_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const ULONG_MAX: ::std::os::raw::c_int = -1;
pub const CHAR_BIT: ::std::os::raw::c_uint = 8;
pub const CHAR_MIN: ::std::os::raw::c_int = -128;
pub const CHAR_MAX: ::std::os::raw::c_uint = 127;
pub const LLONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const _STDLIB_H: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WSTOPPED: ::std::os::raw::c_uint = 2;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WCONTINUED: ::std::os::raw::c_uint = 8;
pub const WNOWAIT: ::std::os::raw::c_uint = 16777216;
pub const __WNOTHREAD: ::std::os::raw::c_uint = 536870912;
pub const __WALL: ::std::os::raw::c_uint = 1073741824;
pub const __WCLONE: ::std::os::raw::c_uint = 2147483648;
pub const __ENUM_IDTYPE_T: ::std::os::raw::c_uint = 1;
pub const __W_CONTINUED: ::std::os::raw::c_uint = 65535;
pub const __WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const __ldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\x00";
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const _STRUCT_TIMEVAL: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uint = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uint = 1;
pub const _ALLOCA_H: ::std::os::raw::c_uint = 1;
pub const _STRING_H: ::std::os::raw::c_uint = 1;
pub const _TIME_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TIME_H: ::std::os::raw::c_uint = 1;
pub const CLOCK_REALTIME: ::std::os::raw::c_uint = 0;
pub const CLOCK_MONOTONIC: ::std::os::raw::c_uint = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: ::std::os::raw::c_uint = 2;
pub const CLOCK_THREAD_CPUTIME_ID: ::std::os::raw::c_uint = 3;
pub const CLOCK_MONOTONIC_RAW: ::std::os::raw::c_uint = 4;
pub const CLOCK_REALTIME_COARSE: ::std::os::raw::c_uint = 5;
pub const CLOCK_MONOTONIC_COARSE: ::std::os::raw::c_uint = 6;
pub const CLOCK_BOOTTIME: ::std::os::raw::c_uint = 7;
pub const CLOCK_REALTIME_ALARM: ::std::os::raw::c_uint = 8;
pub const CLOCK_BOOTTIME_ALARM: ::std::os::raw::c_uint = 9;
pub const CLOCK_TAI: ::std::os::raw::c_uint = 11;
pub const TIMER_ABSTIME: ::std::os::raw::c_uint = 1;
pub const TIME_UTC: ::std::os::raw::c_uint = 1;
pub const FLT_EVAL_METHOD: ::std::os::raw::c_uint = 0;
pub const FLT_RADIX: ::std::os::raw::c_uint = 2;
pub const FLT_MANT_DIG: ::std::os::raw::c_uint = 24;
pub const DBL_MANT_DIG: ::std::os::raw::c_uint = 53;
pub const LDBL_MANT_DIG: ::std::os::raw::c_uint = 64;
pub const DECIMAL_DIG: ::std::os::raw::c_uint = 21;
pub const FLT_DIG: ::std::os::raw::c_uint = 6;
pub const DBL_DIG: ::std::os::raw::c_uint = 15;
pub const LDBL_DIG: ::std::os::raw::c_uint = 18;
pub const FLT_MIN_EXP: ::std::os::raw::c_int = -125;
pub const DBL_MIN_EXP: ::std::os::raw::c_int = -1021;
pub const LDBL_MIN_EXP: ::std::os::raw::c_int = -16381;
pub const FLT_MIN_10_EXP: ::std::os::raw::c_int = -37;
pub const DBL_MIN_10_EXP: ::std::os::raw::c_int = -307;
pub const LDBL_MIN_10_EXP: ::std::os::raw::c_int = -4931;
pub const FLT_MAX_EXP: ::std::os::raw::c_uint = 128;
pub const DBL_MAX_EXP: ::std::os::raw::c_uint = 1024;
pub const LDBL_MAX_EXP: ::std::os::raw::c_uint = 16384;
pub const FLT_MAX_10_EXP: ::std::os::raw::c_uint = 38;
pub const DBL_MAX_10_EXP: ::std::os::raw::c_uint = 308;
pub const LDBL_MAX_10_EXP: ::std::os::raw::c_uint = 4932;
pub const FLT_DECIMAL_DIG: ::std::os::raw::c_uint = 9;
pub const DBL_DECIMAL_DIG: ::std::os::raw::c_uint = 17;
pub const LDBL_DECIMAL_DIG: ::std::os::raw::c_uint = 21;
pub const _MATH_H: ::std::os::raw::c_uint = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: ::std::os::raw::c_uint = 1;
pub const _MATH_H_MATHDEF: ::std::os::raw::c_uint = 1;
pub const FP_ILOGB0: ::std::os::raw::c_int = -2147483648;
pub const FP_ILOGBNAN: ::std::os::raw::c_int = -2147483648;
pub const __MATH_DECLARING_DOUBLE: ::std::os::raw::c_uint = 1;
pub const __MATH_DECLARE_LDOUBLE: ::std::os::raw::c_uint = 1;
pub const MATH_ERRNO: ::std::os::raw::c_uint = 1;
pub const MATH_ERREXCEPT: ::std::os::raw::c_uint = 2;
pub const math_errhandling: ::std::os::raw::c_uint = 3;
pub const DOMAIN: ::std::os::raw::c_uint = 1;
pub const SING: ::std::os::raw::c_uint = 2;
pub const OVERFLOW: ::std::os::raw::c_uint = 3;
pub const UNDERFLOW: ::std::os::raw::c_uint = 4;
pub const TLOSS: ::std::os::raw::c_uint = 5;
pub const PLOSS: ::std::os::raw::c_uint = 6;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const _SIGSET_H_fns: ::std::os::raw::c_uint = 1;
pub const SIGHUP: ::std::os::raw::c_uint = 1;
pub const SIGINT: ::std::os::raw::c_uint = 2;
pub const SIGQUIT: ::std::os::raw::c_uint = 3;
pub const SIGILL: ::std::os::raw::c_uint = 4;
pub const SIGTRAP: ::std::os::raw::c_uint = 5;
pub const SIGABRT: ::std::os::raw::c_uint = 6;
pub const SIGIOT: ::std::os::raw::c_uint = 6;
pub const SIGBUS: ::std::os::raw::c_uint = 7;
pub const SIGFPE: ::std::os::raw::c_uint = 8;
pub const SIGKILL: ::std::os::raw::c_uint = 9;
pub const SIGUSR1: ::std::os::raw::c_uint = 10;
pub const SIGSEGV: ::std::os::raw::c_uint = 11;
pub const SIGUSR2: ::std::os::raw::c_uint = 12;
pub const SIGPIPE: ::std::os::raw::c_uint = 13;
pub const SIGALRM: ::std::os::raw::c_uint = 14;
pub const SIGTERM: ::std::os::raw::c_uint = 15;
pub const SIGSTKFLT: ::std::os::raw::c_uint = 16;
pub const SIGCHLD: ::std::os::raw::c_uint = 17;
pub const SIGCONT: ::std::os::raw::c_uint = 18;
pub const SIGSTOP: ::std::os::raw::c_uint = 19;
pub const SIGTSTP: ::std::os::raw::c_uint = 20;
pub const SIGTTIN: ::std::os::raw::c_uint = 21;
pub const SIGTTOU: ::std::os::raw::c_uint = 22;
pub const SIGURG: ::std::os::raw::c_uint = 23;
pub const SIGXCPU: ::std::os::raw::c_uint = 24;
pub const SIGXFSZ: ::std::os::raw::c_uint = 25;
pub const SIGVTALRM: ::std::os::raw::c_uint = 26;
pub const SIGPROF: ::std::os::raw::c_uint = 27;
pub const SIGWINCH: ::std::os::raw::c_uint = 28;
pub const SIGIO: ::std::os::raw::c_uint = 29;
pub const SIGPWR: ::std::os::raw::c_uint = 30;
pub const SIGSYS: ::std::os::raw::c_uint = 31;
pub const SIGUNUSED: ::std::os::raw::c_uint = 31;
pub const _NSIG: ::std::os::raw::c_uint = 65;
pub const __SIGRTMIN: ::std::os::raw::c_uint = 32;
pub const __SIGRTMAX: ::std::os::raw::c_uint = 64;
pub const __have_sigval_t: ::std::os::raw::c_uint = 1;
pub const __have_siginfo_t: ::std::os::raw::c_uint = 1;
pub const __SI_MAX_SIZE: ::std::os::raw::c_uint = 128;
pub const __have_sigevent_t: ::std::os::raw::c_uint = 1;
pub const __SIGEV_MAX_SIZE: ::std::os::raw::c_uint = 64;
pub const NSIG: ::std::os::raw::c_uint = 65;
pub const SA_NOCLDSTOP: ::std::os::raw::c_uint = 1;
pub const SA_NOCLDWAIT: ::std::os::raw::c_uint = 2;
pub const SA_SIGINFO: ::std::os::raw::c_uint = 4;
pub const SA_ONSTACK: ::std::os::raw::c_uint = 134217728;
pub const SA_RESTART: ::std::os::raw::c_uint = 268435456;
pub const SA_NODEFER: ::std::os::raw::c_uint = 1073741824;
pub const SA_RESETHAND: ::std::os::raw::c_uint = 2147483648;
pub const SA_INTERRUPT: ::std::os::raw::c_uint = 536870912;
pub const SA_NOMASK: ::std::os::raw::c_uint = 1073741824;
pub const SA_ONESHOT: ::std::os::raw::c_uint = 2147483648;
pub const SA_STACK: ::std::os::raw::c_uint = 134217728;
pub const SIG_BLOCK: ::std::os::raw::c_uint = 0;
pub const SIG_UNBLOCK: ::std::os::raw::c_uint = 1;
pub const SIG_SETMASK: ::std::os::raw::c_uint = 2;
pub const _BITS_SIGCONTEXT_H: ::std::os::raw::c_uint = 1;
pub const FP_XSTATE_MAGIC1: ::std::os::raw::c_uint = 1179670611;
pub const FP_XSTATE_MAGIC2: ::std::os::raw::c_uint = 1179670597;
pub const MINSIGSTKSZ: ::std::os::raw::c_uint = 2048;
pub const SIGSTKSZ: ::std::os::raw::c_uint = 8192;
pub const _SYS_UCONTEXT_H: ::std::os::raw::c_uint = 1;
pub const NGREG: ::std::os::raw::c_uint = 23;
pub const _BITS_SIGTHREAD_H: ::std::os::raw::c_uint = 1;
pub const _SETJMP_H: ::std::os::raw::c_uint = 1;
pub const _BITS_SETJMP_H: ::std::os::raw::c_uint = 1;
pub const _ASSERT_H: ::std::os::raw::c_uint = 1;
pub const _FCNTL_H: ::std::os::raw::c_uint = 1;
pub const __O_LARGEFILE: ::std::os::raw::c_uint = 0;
pub const F_GETLK64: ::std::os::raw::c_uint = 5;
pub const F_SETLK64: ::std::os::raw::c_uint = 6;
pub const F_SETLKW64: ::std::os::raw::c_uint = 7;
pub const O_ACCMODE: ::std::os::raw::c_uint = 3;
pub const O_RDONLY: ::std::os::raw::c_uint = 0;
pub const O_WRONLY: ::std::os::raw::c_uint = 1;
pub const O_RDWR: ::std::os::raw::c_uint = 2;
pub const O_CREAT: ::std::os::raw::c_uint = 64;
pub const O_EXCL: ::std::os::raw::c_uint = 128;
pub const O_NOCTTY: ::std::os::raw::c_uint = 256;
pub const O_TRUNC: ::std::os::raw::c_uint = 512;
pub const O_APPEND: ::std::os::raw::c_uint = 1024;
pub const O_NONBLOCK: ::std::os::raw::c_uint = 2048;
pub const O_NDELAY: ::std::os::raw::c_uint = 2048;
pub const O_SYNC: ::std::os::raw::c_uint = 1052672;
pub const O_FSYNC: ::std::os::raw::c_uint = 1052672;
pub const O_ASYNC: ::std::os::raw::c_uint = 8192;
pub const __O_DIRECTORY: ::std::os::raw::c_uint = 65536;
pub const __O_NOFOLLOW: ::std::os::raw::c_uint = 131072;
pub const __O_CLOEXEC: ::std::os::raw::c_uint = 524288;
pub const __O_DIRECT: ::std::os::raw::c_uint = 16384;
pub const __O_NOATIME: ::std::os::raw::c_uint = 262144;
pub const __O_PATH: ::std::os::raw::c_uint = 2097152;
pub const __O_DSYNC: ::std::os::raw::c_uint = 4096;
pub const __O_TMPFILE: ::std::os::raw::c_uint = 4259840;
pub const F_GETLK: ::std::os::raw::c_uint = 5;
pub const F_SETLK: ::std::os::raw::c_uint = 6;
pub const F_SETLKW: ::std::os::raw::c_uint = 7;
pub const O_DIRECTORY: ::std::os::raw::c_uint = 65536;
pub const O_NOFOLLOW: ::std::os::raw::c_uint = 131072;
pub const O_CLOEXEC: ::std::os::raw::c_uint = 524288;
pub const O_DSYNC: ::std::os::raw::c_uint = 4096;
pub const O_RSYNC: ::std::os::raw::c_uint = 1052672;
pub const F_DUPFD: ::std::os::raw::c_uint = 0;
pub const F_GETFD: ::std::os::raw::c_uint = 1;
pub const F_SETFD: ::std::os::raw::c_uint = 2;
pub const F_GETFL: ::std::os::raw::c_uint = 3;
pub const F_SETFL: ::std::os::raw::c_uint = 4;
pub const __F_SETOWN: ::std::os::raw::c_uint = 8;
pub const __F_GETOWN: ::std::os::raw::c_uint = 9;
pub const F_SETOWN: ::std::os::raw::c_uint = 8;
pub const F_GETOWN: ::std::os::raw::c_uint = 9;
pub const __F_SETSIG: ::std::os::raw::c_uint = 10;
pub const __F_GETSIG: ::std::os::raw::c_uint = 11;
pub const __F_SETOWN_EX: ::std::os::raw::c_uint = 15;
pub const __F_GETOWN_EX: ::std::os::raw::c_uint = 16;
pub const F_DUPFD_CLOEXEC: ::std::os::raw::c_uint = 1030;
pub const FD_CLOEXEC: ::std::os::raw::c_uint = 1;
pub const F_RDLCK: ::std::os::raw::c_uint = 0;
pub const F_WRLCK: ::std::os::raw::c_uint = 1;
pub const F_UNLCK: ::std::os::raw::c_uint = 2;
pub const F_EXLCK: ::std::os::raw::c_uint = 4;
pub const F_SHLCK: ::std::os::raw::c_uint = 8;
pub const LOCK_SH: ::std::os::raw::c_uint = 1;
pub const LOCK_EX: ::std::os::raw::c_uint = 2;
pub const LOCK_NB: ::std::os::raw::c_uint = 4;
pub const LOCK_UN: ::std::os::raw::c_uint = 8;
pub const FAPPEND: ::std::os::raw::c_uint = 1024;
pub const FFSYNC: ::std::os::raw::c_uint = 1052672;
pub const FASYNC: ::std::os::raw::c_uint = 8192;
pub const FNONBLOCK: ::std::os::raw::c_uint = 2048;
pub const FNDELAY: ::std::os::raw::c_uint = 2048;
pub const __POSIX_FADV_DONTNEED: ::std::os::raw::c_uint = 4;
pub const __POSIX_FADV_NOREUSE: ::std::os::raw::c_uint = 5;
pub const POSIX_FADV_NORMAL: ::std::os::raw::c_uint = 0;
pub const POSIX_FADV_RANDOM: ::std::os::raw::c_uint = 1;
pub const POSIX_FADV_SEQUENTIAL: ::std::os::raw::c_uint = 2;
pub const POSIX_FADV_WILLNEED: ::std::os::raw::c_uint = 3;
pub const POSIX_FADV_DONTNEED: ::std::os::raw::c_uint = 4;
pub const POSIX_FADV_NOREUSE: ::std::os::raw::c_uint = 5;
pub const AT_FDCWD: ::std::os::raw::c_int = -100;
pub const AT_SYMLINK_NOFOLLOW: ::std::os::raw::c_uint = 256;
pub const AT_REMOVEDIR: ::std::os::raw::c_uint = 512;
pub const AT_SYMLINK_FOLLOW: ::std::os::raw::c_uint = 1024;
pub const AT_EACCESS: ::std::os::raw::c_uint = 512;
pub const _BITS_STAT_H: ::std::os::raw::c_uint = 1;
pub const _STAT_VER_KERNEL: ::std::os::raw::c_uint = 0;
pub const _STAT_VER_LINUX: ::std::os::raw::c_uint = 1;
pub const _MKNOD_VER_LINUX: ::std::os::raw::c_uint = 0;
pub const _STAT_VER: ::std::os::raw::c_uint = 1;
pub const __S_IFMT: ::std::os::raw::c_uint = 61440;
pub const __S_IFDIR: ::std::os::raw::c_uint = 16384;
pub const __S_IFCHR: ::std::os::raw::c_uint = 8192;
pub const __S_IFBLK: ::std::os::raw::c_uint = 24576;
pub const __S_IFREG: ::std::os::raw::c_uint = 32768;
pub const __S_IFIFO: ::std::os::raw::c_uint = 4096;
pub const __S_IFLNK: ::std::os::raw::c_uint = 40960;
pub const __S_IFSOCK: ::std::os::raw::c_uint = 49152;
pub const __S_ISUID: ::std::os::raw::c_uint = 2048;
pub const __S_ISGID: ::std::os::raw::c_uint = 1024;
pub const __S_ISVTX: ::std::os::raw::c_uint = 512;
pub const __S_IREAD: ::std::os::raw::c_uint = 256;
pub const __S_IWRITE: ::std::os::raw::c_uint = 128;
pub const __S_IEXEC: ::std::os::raw::c_uint = 64;
pub const UTIME_NOW: ::std::os::raw::c_uint = 1073741823;
pub const UTIME_OMIT: ::std::os::raw::c_uint = 1073741822;
pub const S_IFMT: ::std::os::raw::c_uint = 61440;
pub const S_IFDIR: ::std::os::raw::c_uint = 16384;
pub const S_IFCHR: ::std::os::raw::c_uint = 8192;
pub const S_IFBLK: ::std::os::raw::c_uint = 24576;
pub const S_IFREG: ::std::os::raw::c_uint = 32768;
pub const S_IFIFO: ::std::os::raw::c_uint = 4096;
pub const S_IFLNK: ::std::os::raw::c_uint = 40960;
pub const S_IFSOCK: ::std::os::raw::c_uint = 49152;
pub const S_ISUID: ::std::os::raw::c_uint = 2048;
pub const S_ISGID: ::std::os::raw::c_uint = 1024;
pub const S_ISVTX: ::std::os::raw::c_uint = 512;
pub const S_IRUSR: ::std::os::raw::c_uint = 256;
pub const S_IWUSR: ::std::os::raw::c_uint = 128;
pub const S_IXUSR: ::std::os::raw::c_uint = 64;
pub const S_IRWXU: ::std::os::raw::c_uint = 448;
pub const S_IRGRP: ::std::os::raw::c_uint = 32;
pub const S_IWGRP: ::std::os::raw::c_uint = 16;
pub const S_IXGRP: ::std::os::raw::c_uint = 8;
pub const S_IRWXG: ::std::os::raw::c_uint = 56;
pub const S_IROTH: ::std::os::raw::c_uint = 4;
pub const S_IWOTH: ::std::os::raw::c_uint = 2;
pub const S_IXOTH: ::std::os::raw::c_uint = 1;
pub const S_IRWXO: ::std::os::raw::c_uint = 7;
pub const R_OK: ::std::os::raw::c_uint = 4;
pub const W_OK: ::std::os::raw::c_uint = 2;
pub const X_OK: ::std::os::raw::c_uint = 1;
pub const F_OK: ::std::os::raw::c_uint = 0;
pub const F_ULOCK: ::std::os::raw::c_uint = 0;
pub const F_LOCK: ::std::os::raw::c_uint = 1;
pub const F_TLOCK: ::std::os::raw::c_uint = 2;
pub const F_TEST: ::std::os::raw::c_uint = 3;
pub const _NETDB_H: ::std::os::raw::c_uint = 1;
pub const _NETINET_IN_H: ::std::os::raw::c_uint = 1;
pub const _SYS_SOCKET_H: ::std::os::raw::c_uint = 1;
pub const _SYS_UIO_H: ::std::os::raw::c_uint = 1;
pub const _BITS_UIO_H: ::std::os::raw::c_uint = 1;
pub const UIO_MAXIOV: ::std::os::raw::c_uint = 1024;
pub const PF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const PF_LOCAL: ::std::os::raw::c_uint = 1;
pub const PF_UNIX: ::std::os::raw::c_uint = 1;
pub const PF_FILE: ::std::os::raw::c_uint = 1;
pub const PF_INET: ::std::os::raw::c_uint = 2;
pub const PF_AX25: ::std::os::raw::c_uint = 3;
pub const PF_IPX: ::std::os::raw::c_uint = 4;
pub const PF_APPLETALK: ::std::os::raw::c_uint = 5;
pub const PF_NETROM: ::std::os::raw::c_uint = 6;
pub const PF_BRIDGE: ::std::os::raw::c_uint = 7;
pub const PF_ATMPVC: ::std::os::raw::c_uint = 8;
pub const PF_X25: ::std::os::raw::c_uint = 9;
pub const PF_INET6: ::std::os::raw::c_uint = 10;
pub const PF_ROSE: ::std::os::raw::c_uint = 11;
pub const PF_DECnet: ::std::os::raw::c_uint = 12;
pub const PF_NETBEUI: ::std::os::raw::c_uint = 13;
pub const PF_SECURITY: ::std::os::raw::c_uint = 14;
pub const PF_KEY: ::std::os::raw::c_uint = 15;
pub const PF_NETLINK: ::std::os::raw::c_uint = 16;
pub const PF_ROUTE: ::std::os::raw::c_uint = 16;
pub const PF_PACKET: ::std::os::raw::c_uint = 17;
pub const PF_ASH: ::std::os::raw::c_uint = 18;
pub const PF_ECONET: ::std::os::raw::c_uint = 19;
pub const PF_ATMSVC: ::std::os::raw::c_uint = 20;
pub const PF_RDS: ::std::os::raw::c_uint = 21;
pub const PF_SNA: ::std::os::raw::c_uint = 22;
pub const PF_IRDA: ::std::os::raw::c_uint = 23;
pub const PF_PPPOX: ::std::os::raw::c_uint = 24;
pub const PF_WANPIPE: ::std::os::raw::c_uint = 25;
pub const PF_LLC: ::std::os::raw::c_uint = 26;
pub const PF_IB: ::std::os::raw::c_uint = 27;
pub const PF_MPLS: ::std::os::raw::c_uint = 28;
pub const PF_CAN: ::std::os::raw::c_uint = 29;
pub const PF_TIPC: ::std::os::raw::c_uint = 30;
pub const PF_BLUETOOTH: ::std::os::raw::c_uint = 31;
pub const PF_IUCV: ::std::os::raw::c_uint = 32;
pub const PF_RXRPC: ::std::os::raw::c_uint = 33;
pub const PF_ISDN: ::std::os::raw::c_uint = 34;
pub const PF_PHONET: ::std::os::raw::c_uint = 35;
pub const PF_IEEE802154: ::std::os::raw::c_uint = 36;
pub const PF_CAIF: ::std::os::raw::c_uint = 37;
pub const PF_ALG: ::std::os::raw::c_uint = 38;
pub const PF_NFC: ::std::os::raw::c_uint = 39;
pub const PF_VSOCK: ::std::os::raw::c_uint = 40;
pub const PF_MAX: ::std::os::raw::c_uint = 41;
pub const AF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const AF_LOCAL: ::std::os::raw::c_uint = 1;
pub const AF_UNIX: ::std::os::raw::c_uint = 1;
pub const AF_FILE: ::std::os::raw::c_uint = 1;
pub const AF_INET: ::std::os::raw::c_uint = 2;
pub const AF_AX25: ::std::os::raw::c_uint = 3;
pub const AF_IPX: ::std::os::raw::c_uint = 4;
pub const AF_APPLETALK: ::std::os::raw::c_uint = 5;
pub const AF_NETROM: ::std::os::raw::c_uint = 6;
pub const AF_BRIDGE: ::std::os::raw::c_uint = 7;
pub const AF_ATMPVC: ::std::os::raw::c_uint = 8;
pub const AF_X25: ::std::os::raw::c_uint = 9;
pub const AF_INET6: ::std::os::raw::c_uint = 10;
pub const AF_ROSE: ::std::os::raw::c_uint = 11;
pub const AF_DECnet: ::std::os::raw::c_uint = 12;
pub const AF_NETBEUI: ::std::os::raw::c_uint = 13;
pub const AF_SECURITY: ::std::os::raw::c_uint = 14;
pub const AF_KEY: ::std::os::raw::c_uint = 15;
pub const AF_NETLINK: ::std::os::raw::c_uint = 16;
pub const AF_ROUTE: ::std::os::raw::c_uint = 16;
pub const AF_PACKET: ::std::os::raw::c_uint = 17;
pub const AF_ASH: ::std::os::raw::c_uint = 18;
pub const AF_ECONET: ::std::os::raw::c_uint = 19;
pub const AF_ATMSVC: ::std::os::raw::c_uint = 20;
pub const AF_RDS: ::std::os::raw::c_uint = 21;
pub const AF_SNA: ::std::os::raw::c_uint = 22;
pub const AF_IRDA: ::std::os::raw::c_uint = 23;
pub const AF_PPPOX: ::std::os::raw::c_uint = 24;
pub const AF_WANPIPE: ::std::os::raw::c_uint = 25;
pub const AF_LLC: ::std::os::raw::c_uint = 26;
pub const AF_IB: ::std::os::raw::c_uint = 27;
pub const AF_MPLS: ::std::os::raw::c_uint = 28;
pub const AF_CAN: ::std::os::raw::c_uint = 29;
pub const AF_TIPC: ::std::os::raw::c_uint = 30;
pub const AF_BLUETOOTH: ::std::os::raw::c_uint = 31;
pub const AF_IUCV: ::std::os::raw::c_uint = 32;
pub const AF_RXRPC: ::std::os::raw::c_uint = 33;
pub const AF_ISDN: ::std::os::raw::c_uint = 34;
pub const AF_PHONET: ::std::os::raw::c_uint = 35;
pub const AF_IEEE802154: ::std::os::raw::c_uint = 36;
pub const AF_CAIF: ::std::os::raw::c_uint = 37;
pub const AF_ALG: ::std::os::raw::c_uint = 38;
pub const AF_NFC: ::std::os::raw::c_uint = 39;
pub const AF_VSOCK: ::std::os::raw::c_uint = 40;
pub const AF_MAX: ::std::os::raw::c_uint = 41;
pub const SOL_RAW: ::std::os::raw::c_uint = 255;
pub const SOL_DECNET: ::std::os::raw::c_uint = 261;
pub const SOL_X25: ::std::os::raw::c_uint = 262;
pub const SOL_PACKET: ::std::os::raw::c_uint = 263;
pub const SOL_ATM: ::std::os::raw::c_uint = 264;
pub const SOL_AAL: ::std::os::raw::c_uint = 265;
pub const SOL_IRDA: ::std::os::raw::c_uint = 266;
pub const SOMAXCONN: ::std::os::raw::c_uint = 128;
pub const _BITS_SOCKADDR_H: ::std::os::raw::c_uint = 1;
pub const _SS_SIZE: ::std::os::raw::c_uint = 128;
pub const FIOSETOWN: ::std::os::raw::c_uint = 35073;
pub const SIOCSPGRP: ::std::os::raw::c_uint = 35074;
pub const FIOGETOWN: ::std::os::raw::c_uint = 35075;
pub const SIOCGPGRP: ::std::os::raw::c_uint = 35076;
pub const SIOCATMARK: ::std::os::raw::c_uint = 35077;
pub const SIOCGSTAMP: ::std::os::raw::c_uint = 35078;
pub const SIOCGSTAMPNS: ::std::os::raw::c_uint = 35079;
pub const SOL_SOCKET: ::std::os::raw::c_uint = 1;
pub const SO_DEBUG: ::std::os::raw::c_uint = 1;
pub const SO_REUSEADDR: ::std::os::raw::c_uint = 2;
pub const SO_TYPE: ::std::os::raw::c_uint = 3;
pub const SO_ERROR: ::std::os::raw::c_uint = 4;
pub const SO_DONTROUTE: ::std::os::raw::c_uint = 5;
pub const SO_BROADCAST: ::std::os::raw::c_uint = 6;
pub const SO_SNDBUF: ::std::os::raw::c_uint = 7;
pub const SO_RCVBUF: ::std::os::raw::c_uint = 8;
pub const SO_SNDBUFFORCE: ::std::os::raw::c_uint = 32;
pub const SO_RCVBUFFORCE: ::std::os::raw::c_uint = 33;
pub const SO_KEEPALIVE: ::std::os::raw::c_uint = 9;
pub const SO_OOBINLINE: ::std::os::raw::c_uint = 10;
pub const SO_NO_CHECK: ::std::os::raw::c_uint = 11;
pub const SO_PRIORITY: ::std::os::raw::c_uint = 12;
pub const SO_LINGER: ::std::os::raw::c_uint = 13;
pub const SO_BSDCOMPAT: ::std::os::raw::c_uint = 14;
pub const SO_REUSEPORT: ::std::os::raw::c_uint = 15;
pub const SO_PASSCRED: ::std::os::raw::c_uint = 16;
pub const SO_PEERCRED: ::std::os::raw::c_uint = 17;
pub const SO_RCVLOWAT: ::std::os::raw::c_uint = 18;
pub const SO_SNDLOWAT: ::std::os::raw::c_uint = 19;
pub const SO_RCVTIMEO: ::std::os::raw::c_uint = 20;
pub const SO_SNDTIMEO: ::std::os::raw::c_uint = 21;
pub const SO_SECURITY_AUTHENTICATION: ::std::os::raw::c_uint = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: ::std::os::raw::c_uint = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: ::std::os::raw::c_uint = 24;
pub const SO_BINDTODEVICE: ::std::os::raw::c_uint = 25;
pub const SO_ATTACH_FILTER: ::std::os::raw::c_uint = 26;
pub const SO_DETACH_FILTER: ::std::os::raw::c_uint = 27;
pub const SO_GET_FILTER: ::std::os::raw::c_uint = 26;
pub const SO_PEERNAME: ::std::os::raw::c_uint = 28;
pub const SO_TIMESTAMP: ::std::os::raw::c_uint = 29;
pub const SCM_TIMESTAMP: ::std::os::raw::c_uint = 29;
pub const SO_ACCEPTCONN: ::std::os::raw::c_uint = 30;
pub const SO_PEERSEC: ::std::os::raw::c_uint = 31;
pub const SO_PASSSEC: ::std::os::raw::c_uint = 34;
pub const SO_TIMESTAMPNS: ::std::os::raw::c_uint = 35;
pub const SCM_TIMESTAMPNS: ::std::os::raw::c_uint = 35;
pub const SO_MARK: ::std::os::raw::c_uint = 36;
pub const SO_TIMESTAMPING: ::std::os::raw::c_uint = 37;
pub const SCM_TIMESTAMPING: ::std::os::raw::c_uint = 37;
pub const SO_PROTOCOL: ::std::os::raw::c_uint = 38;
pub const SO_DOMAIN: ::std::os::raw::c_uint = 39;
pub const SO_RXQ_OVFL: ::std::os::raw::c_uint = 40;
pub const SO_WIFI_STATUS: ::std::os::raw::c_uint = 41;
pub const SCM_WIFI_STATUS: ::std::os::raw::c_uint = 41;
pub const SO_PEEK_OFF: ::std::os::raw::c_uint = 42;
pub const SO_NOFCS: ::std::os::raw::c_uint = 43;
pub const SO_LOCK_FILTER: ::std::os::raw::c_uint = 44;
pub const SO_SELECT_ERR_QUEUE: ::std::os::raw::c_uint = 45;
pub const SO_BUSY_POLL: ::std::os::raw::c_uint = 46;
pub const SO_MAX_PACING_RATE: ::std::os::raw::c_uint = 47;
pub const SO_BPF_EXTENSIONS: ::std::os::raw::c_uint = 48;
pub const SO_INCOMING_CPU: ::std::os::raw::c_uint = 49;
pub const SO_ATTACH_BPF: ::std::os::raw::c_uint = 50;
pub const SO_DETACH_BPF: ::std::os::raw::c_uint = 27;
pub const IP_OPTIONS: ::std::os::raw::c_uint = 4;
pub const IP_HDRINCL: ::std::os::raw::c_uint = 3;
pub const IP_TOS: ::std::os::raw::c_uint = 1;
pub const IP_TTL: ::std::os::raw::c_uint = 2;
pub const IP_RECVOPTS: ::std::os::raw::c_uint = 6;
pub const IP_RETOPTS: ::std::os::raw::c_uint = 7;
pub const IP_MULTICAST_IF: ::std::os::raw::c_uint = 32;
pub const IP_MULTICAST_TTL: ::std::os::raw::c_uint = 33;
pub const IP_MULTICAST_LOOP: ::std::os::raw::c_uint = 34;
pub const IP_ADD_MEMBERSHIP: ::std::os::raw::c_uint = 35;
pub const IP_DROP_MEMBERSHIP: ::std::os::raw::c_uint = 36;
pub const IP_UNBLOCK_SOURCE: ::std::os::raw::c_uint = 37;
pub const IP_BLOCK_SOURCE: ::std::os::raw::c_uint = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: ::std::os::raw::c_uint = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: ::std::os::raw::c_uint = 40;
pub const IP_MSFILTER: ::std::os::raw::c_uint = 41;
pub const MCAST_JOIN_GROUP: ::std::os::raw::c_uint = 42;
pub const MCAST_BLOCK_SOURCE: ::std::os::raw::c_uint = 43;
pub const MCAST_UNBLOCK_SOURCE: ::std::os::raw::c_uint = 44;
pub const MCAST_LEAVE_GROUP: ::std::os::raw::c_uint = 45;
pub const MCAST_JOIN_SOURCE_GROUP: ::std::os::raw::c_uint = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: ::std::os::raw::c_uint = 47;
pub const MCAST_MSFILTER: ::std::os::raw::c_uint = 48;
pub const IP_MULTICAST_ALL: ::std::os::raw::c_uint = 49;
pub const IP_UNICAST_IF: ::std::os::raw::c_uint = 50;
pub const MCAST_EXCLUDE: ::std::os::raw::c_uint = 0;
pub const MCAST_INCLUDE: ::std::os::raw::c_uint = 1;
pub const IP_ROUTER_ALERT: ::std::os::raw::c_uint = 5;
pub const IP_PKTINFO: ::std::os::raw::c_uint = 8;
pub const IP_PKTOPTIONS: ::std::os::raw::c_uint = 9;
pub const IP_PMTUDISC: ::std::os::raw::c_uint = 10;
pub const IP_MTU_DISCOVER: ::std::os::raw::c_uint = 10;
pub const IP_RECVERR: ::std::os::raw::c_uint = 11;
pub const IP_RECVTTL: ::std::os::raw::c_uint = 12;
pub const IP_RECVTOS: ::std::os::raw::c_uint = 13;
pub const IP_MTU: ::std::os::raw::c_uint = 14;
pub const IP_FREEBIND: ::std::os::raw::c_uint = 15;
pub const IP_IPSEC_POLICY: ::std::os::raw::c_uint = 16;
pub const IP_XFRM_POLICY: ::std::os::raw::c_uint = 17;
pub const IP_PASSSEC: ::std::os::raw::c_uint = 18;
pub const IP_TRANSPARENT: ::std::os::raw::c_uint = 19;
pub const IP_ORIGDSTADDR: ::std::os::raw::c_uint = 20;
pub const IP_RECVORIGDSTADDR: ::std::os::raw::c_uint = 20;
pub const IP_MINTTL: ::std::os::raw::c_uint = 21;
pub const IP_NODEFRAG: ::std::os::raw::c_uint = 22;
pub const IP_CHECKSUM: ::std::os::raw::c_uint = 23;
pub const IP_BIND_ADDRESS_NO_PORT: ::std::os::raw::c_uint = 24;
pub const IP_PMTUDISC_DONT: ::std::os::raw::c_uint = 0;
pub const IP_PMTUDISC_WANT: ::std::os::raw::c_uint = 1;
pub const IP_PMTUDISC_DO: ::std::os::raw::c_uint = 2;
pub const IP_PMTUDISC_PROBE: ::std::os::raw::c_uint = 3;
pub const IP_PMTUDISC_INTERFACE: ::std::os::raw::c_uint = 4;
pub const IP_PMTUDISC_OMIT: ::std::os::raw::c_uint = 5;
pub const SOL_IP: ::std::os::raw::c_uint = 0;
pub const IP_DEFAULT_MULTICAST_TTL: ::std::os::raw::c_uint = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: ::std::os::raw::c_uint = 1;
pub const IP_MAX_MEMBERSHIPS: ::std::os::raw::c_uint = 20;
pub const IPV6_ADDRFORM: ::std::os::raw::c_uint = 1;
pub const IPV6_2292PKTINFO: ::std::os::raw::c_uint = 2;
pub const IPV6_2292HOPOPTS: ::std::os::raw::c_uint = 3;
pub const IPV6_2292DSTOPTS: ::std::os::raw::c_uint = 4;
pub const IPV6_2292RTHDR: ::std::os::raw::c_uint = 5;
pub const IPV6_2292PKTOPTIONS: ::std::os::raw::c_uint = 6;
pub const IPV6_CHECKSUM: ::std::os::raw::c_uint = 7;
pub const IPV6_2292HOPLIMIT: ::std::os::raw::c_uint = 8;
pub const IPV6_NEXTHOP: ::std::os::raw::c_uint = 9;
pub const IPV6_AUTHHDR: ::std::os::raw::c_uint = 10;
pub const IPV6_UNICAST_HOPS: ::std::os::raw::c_uint = 16;
pub const IPV6_MULTICAST_IF: ::std::os::raw::c_uint = 17;
pub const IPV6_MULTICAST_HOPS: ::std::os::raw::c_uint = 18;
pub const IPV6_MULTICAST_LOOP: ::std::os::raw::c_uint = 19;
pub const IPV6_JOIN_GROUP: ::std::os::raw::c_uint = 20;
pub const IPV6_LEAVE_GROUP: ::std::os::raw::c_uint = 21;
pub const IPV6_ROUTER_ALERT: ::std::os::raw::c_uint = 22;
pub const IPV6_MTU_DISCOVER: ::std::os::raw::c_uint = 23;
pub const IPV6_MTU: ::std::os::raw::c_uint = 24;
pub const IPV6_RECVERR: ::std::os::raw::c_uint = 25;
pub const IPV6_V6ONLY: ::std::os::raw::c_uint = 26;
pub const IPV6_JOIN_ANYCAST: ::std::os::raw::c_uint = 27;
pub const IPV6_LEAVE_ANYCAST: ::std::os::raw::c_uint = 28;
pub const IPV6_IPSEC_POLICY: ::std::os::raw::c_uint = 34;
pub const IPV6_XFRM_POLICY: ::std::os::raw::c_uint = 35;
pub const IPV6_RECVPKTINFO: ::std::os::raw::c_uint = 49;
pub const IPV6_PKTINFO: ::std::os::raw::c_uint = 50;
pub const IPV6_RECVHOPLIMIT: ::std::os::raw::c_uint = 51;
pub const IPV6_HOPLIMIT: ::std::os::raw::c_uint = 52;
pub const IPV6_RECVHOPOPTS: ::std::os::raw::c_uint = 53;
pub const IPV6_HOPOPTS: ::std::os::raw::c_uint = 54;
pub const IPV6_RTHDRDSTOPTS: ::std::os::raw::c_uint = 55;
pub const IPV6_RECVRTHDR: ::std::os::raw::c_uint = 56;
pub const IPV6_RTHDR: ::std::os::raw::c_uint = 57;
pub const IPV6_RECVDSTOPTS: ::std::os::raw::c_uint = 58;
pub const IPV6_DSTOPTS: ::std::os::raw::c_uint = 59;
pub const IPV6_RECVPATHMTU: ::std::os::raw::c_uint = 60;
pub const IPV6_PATHMTU: ::std::os::raw::c_uint = 61;
pub const IPV6_DONTFRAG: ::std::os::raw::c_uint = 62;
pub const IPV6_RECVTCLASS: ::std::os::raw::c_uint = 66;
pub const IPV6_TCLASS: ::std::os::raw::c_uint = 67;
pub const IPV6_ADD_MEMBERSHIP: ::std::os::raw::c_uint = 20;
pub const IPV6_DROP_MEMBERSHIP: ::std::os::raw::c_uint = 21;
pub const IPV6_RXHOPOPTS: ::std::os::raw::c_uint = 54;
pub const IPV6_RXDSTOPTS: ::std::os::raw::c_uint = 59;
pub const IPV6_PMTUDISC_DONT: ::std::os::raw::c_uint = 0;
pub const IPV6_PMTUDISC_WANT: ::std::os::raw::c_uint = 1;
pub const IPV6_PMTUDISC_DO: ::std::os::raw::c_uint = 2;
pub const IPV6_PMTUDISC_PROBE: ::std::os::raw::c_uint = 3;
pub const IPV6_PMTUDISC_INTERFACE: ::std::os::raw::c_uint = 4;
pub const IPV6_PMTUDISC_OMIT: ::std::os::raw::c_uint = 5;
pub const SOL_IPV6: ::std::os::raw::c_uint = 41;
pub const SOL_ICMPV6: ::std::os::raw::c_uint = 58;
pub const IPV6_RTHDR_LOOSE: ::std::os::raw::c_uint = 0;
pub const IPV6_RTHDR_STRICT: ::std::os::raw::c_uint = 1;
pub const IPV6_RTHDR_TYPE_0: ::std::os::raw::c_uint = 0;
pub const IN_CLASSA_NET: ::std::os::raw::c_uint = 4278190080;
pub const IN_CLASSA_NSHIFT: ::std::os::raw::c_uint = 24;
pub const IN_CLASSA_HOST: ::std::os::raw::c_uint = 16777215;
pub const IN_CLASSA_MAX: ::std::os::raw::c_uint = 128;
pub const IN_CLASSB_NET: ::std::os::raw::c_uint = 4294901760;
pub const IN_CLASSB_NSHIFT: ::std::os::raw::c_uint = 16;
pub const IN_CLASSB_HOST: ::std::os::raw::c_uint = 65535;
pub const IN_CLASSB_MAX: ::std::os::raw::c_uint = 65536;
pub const IN_CLASSC_NET: ::std::os::raw::c_uint = 4294967040;
pub const IN_CLASSC_NSHIFT: ::std::os::raw::c_uint = 8;
pub const IN_CLASSC_HOST: ::std::os::raw::c_uint = 255;
pub const IN_LOOPBACKNET: ::std::os::raw::c_uint = 127;
pub const INET_ADDRSTRLEN: ::std::os::raw::c_uint = 16;
pub const INET6_ADDRSTRLEN: ::std::os::raw::c_uint = 46;
pub const _RPC_NETDB_H: ::std::os::raw::c_uint = 1;
pub const _PATH_HEQUIV: &'static [u8; 17usize] = b"/etc/hosts.equiv\x00";
pub const _PATH_HOSTS: &'static [u8; 11usize] = b"/etc/hosts\x00";
pub const _PATH_NETWORKS: &'static [u8; 14usize] = b"/etc/networks\x00";
pub const _PATH_NSSWITCH_CONF: &'static [u8; 19usize] =
    b"/etc/nsswitch.conf\x00";
pub const _PATH_PROTOCOLS: &'static [u8; 15usize] = b"/etc/protocols\x00";
pub const HOST_NOT_FOUND: ::std::os::raw::c_uint = 1;
pub const TRY_AGAIN: ::std::os::raw::c_uint = 2;
pub const NO_RECOVERY: ::std::os::raw::c_uint = 3;
pub const NO_DATA: ::std::os::raw::c_uint = 4;
pub const NETDB_INTERNAL: ::std::os::raw::c_int = -1;
pub const NETDB_SUCCESS: ::std::os::raw::c_uint = 0;
pub const NO_ADDRESS: ::std::os::raw::c_uint = 4;
pub const AI_PASSIVE: ::std::os::raw::c_uint = 1;
pub const AI_CANONNAME: ::std::os::raw::c_uint = 2;
pub const AI_NUMERICHOST: ::std::os::raw::c_uint = 4;
pub const AI_V4MAPPED: ::std::os::raw::c_uint = 8;
pub const AI_ALL: ::std::os::raw::c_uint = 16;
pub const AI_ADDRCONFIG: ::std::os::raw::c_uint = 32;
pub const AI_NUMERICSERV: ::std::os::raw::c_uint = 1024;
pub const EAI_BADFLAGS: ::std::os::raw::c_int = -1;
pub const EAI_NONAME: ::std::os::raw::c_int = -2;
pub const EAI_AGAIN: ::std::os::raw::c_int = -3;
pub const EAI_FAIL: ::std::os::raw::c_int = -4;
pub const EAI_FAMILY: ::std::os::raw::c_int = -6;
pub const EAI_SOCKTYPE: ::std::os::raw::c_int = -7;
pub const EAI_SERVICE: ::std::os::raw::c_int = -8;
pub const EAI_MEMORY: ::std::os::raw::c_int = -10;
pub const EAI_SYSTEM: ::std::os::raw::c_int = -11;
pub const EAI_OVERFLOW: ::std::os::raw::c_int = -12;
pub const NI_MAXHOST: ::std::os::raw::c_uint = 1025;
pub const NI_MAXSERV: ::std::os::raw::c_uint = 32;
pub const NI_NUMERICHOST: ::std::os::raw::c_uint = 1;
pub const NI_NUMERICSERV: ::std::os::raw::c_uint = 2;
pub const NI_NOFQDN: ::std::os::raw::c_uint = 4;
pub const NI_NAMEREQD: ::std::os::raw::c_uint = 8;
pub const NI_DGRAM: ::std::os::raw::c_uint = 16;
pub const _UNISTD_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_VERSION: ::std::os::raw::c_uint = 200809;
pub const __POSIX2_THIS_VERSION: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_VERSION: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_C_VERSION: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_C_BIND: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_C_DEV: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_SW_DEV: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_LOCALEDEF: ::std::os::raw::c_uint = 200809;
pub const _XOPEN_VERSION: ::std::os::raw::c_uint = 700;
pub const _XOPEN_XCU_VERSION: ::std::os::raw::c_uint = 4;
pub const _XOPEN_XPG2: ::std::os::raw::c_uint = 1;
pub const _XOPEN_XPG3: ::std::os::raw::c_uint = 1;
pub const _XOPEN_XPG4: ::std::os::raw::c_uint = 1;
pub const _XOPEN_UNIX: ::std::os::raw::c_uint = 1;
pub const _XOPEN_CRYPT: ::std::os::raw::c_uint = 1;
pub const _XOPEN_ENH_I18N: ::std::os::raw::c_uint = 1;
pub const _XOPEN_LEGACY: ::std::os::raw::c_uint = 1;
pub const _BITS_POSIX_OPT_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_JOB_CONTROL: ::std::os::raw::c_uint = 1;
pub const _POSIX_SAVED_IDS: ::std::os::raw::c_uint = 1;
pub const _POSIX_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SYNCHRONIZED_IO: ::std::os::raw::c_uint = 200809;
pub const _POSIX_FSYNC: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MAPPED_FILES: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MEMLOCK: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MEMLOCK_RANGE: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MEMORY_PROTECTION: ::std::os::raw::c_uint = 200809;
pub const _POSIX_CHOWN_RESTRICTED: ::std::os::raw::c_uint = 0;
pub const _POSIX_VDISABLE: u8 = b'\x00';
pub const _POSIX_NO_TRUNC: ::std::os::raw::c_uint = 1;
pub const _XOPEN_REALTIME: ::std::os::raw::c_uint = 1;
pub const _XOPEN_REALTIME_THREADS: ::std::os::raw::c_uint = 1;
pub const _XOPEN_SHM: ::std::os::raw::c_uint = 1;
pub const _POSIX_THREADS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: ::std::os::raw::c_uint = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: ::std::os::raw::c_int = -1;
pub const _POSIX_SEMAPHORES: ::std::os::raw::c_uint = 200809;
pub const _POSIX_REALTIME_SIGNALS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 200809;
pub const _POSIX_ASYNC_IO: ::std::os::raw::c_uint = 1;
pub const _LFS_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 1;
pub const _POSIX_PRIORITIZED_IO: ::std::os::raw::c_uint = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 1;
pub const _LFS_LARGEFILE: ::std::os::raw::c_uint = 1;
pub const _LFS64_LARGEFILE: ::std::os::raw::c_uint = 1;
pub const _LFS64_STDIO: ::std::os::raw::c_uint = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_CPUTIME: ::std::os::raw::c_uint = 0;
pub const _POSIX_THREAD_CPUTIME: ::std::os::raw::c_uint = 0;
pub const _POSIX_REGEXP: ::std::os::raw::c_uint = 1;
pub const _POSIX_READER_WRITER_LOCKS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SHELL: ::std::os::raw::c_uint = 1;
pub const _POSIX_TIMEOUTS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SPIN_LOCKS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SPAWN: ::std::os::raw::c_uint = 200809;
pub const _POSIX_TIMERS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_BARRIERS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MESSAGE_PASSING: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 0;
pub const _POSIX_CLOCK_SELECTION: ::std::os::raw::c_uint = 200809;
pub const _POSIX_ADVISORY_INFO: ::std::os::raw::c_uint = 200809;
pub const _POSIX_IPV6: ::std::os::raw::c_uint = 200809;
pub const _POSIX_RAW_SOCKETS: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_CHAR_TERM: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SPORADIC_SERVER: ::std::os::raw::c_int = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE_EVENT_FILTER: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE_INHERIT: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE_LOG: ::std::os::raw::c_int = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: ::std::os::raw::c_int = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: ::std::os::raw::c_int = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: ::std::os::raw::c_int = -1;
pub const _XBS5_LPBIG_OFFBIG: ::std::os::raw::c_int = -1;
pub const _POSIX_V7_LP64_OFF64: ::std::os::raw::c_uint = 1;
pub const _POSIX_V6_LP64_OFF64: ::std::os::raw::c_uint = 1;
pub const _XBS5_LP64_OFF64: ::std::os::raw::c_uint = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\x00";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\x00";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\x00";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\x00";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\x00";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\x00";
pub const STDIN_FILENO: ::std::os::raw::c_uint = 0;
pub const STDOUT_FILENO: ::std::os::raw::c_uint = 1;
pub const STDERR_FILENO: ::std::os::raw::c_uint = 2;
pub const L_SET: ::std::os::raw::c_uint = 0;
pub const L_INCR: ::std::os::raw::c_uint = 1;
pub const L_XTND: ::std::os::raw::c_uint = 2;
pub const _PTHREAD_H: ::std::os::raw::c_uint = 1;
pub const _SCHED_H: ::std::os::raw::c_uint = 1;
pub const SCHED_OTHER: ::std::os::raw::c_uint = 0;
pub const SCHED_FIFO: ::std::os::raw::c_uint = 1;
pub const SCHED_RR: ::std::os::raw::c_uint = 2;
pub const __defined_schedparam: ::std::os::raw::c_uint = 1;
pub const __CPU_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const PTHREAD_ONCE_INIT: ::std::os::raw::c_uint = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: ::std::os::raw::c_int = -1;
pub const _DIRENT_H: ::std::os::raw::c_uint = 1;
pub const _DIRENT_MATCHES_DIRENT64: ::std::os::raw::c_uint = 1;
pub const MAXNAMLEN: ::std::os::raw::c_uint = 255;
pub const _PWD_H: ::std::os::raw::c_uint = 1;
pub const NSS_BUFLEN_PASSWD: ::std::os::raw::c_uint = 1024;
pub const _GRP_H: ::std::os::raw::c_uint = 1;
pub const NSS_BUFLEN_GROUP: ::std::os::raw::c_uint = 1024;
pub const _UTIME_H: ::std::os::raw::c_uint = 1;
pub const _INTTYPES_H: ::std::os::raw::c_uint = 1;
pub const ____gwchar_t_defined: ::std::os::raw::c_uint = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\x00";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\x00";
pub const PRId8: &'static [u8; 2usize] = b"d\x00";
pub const PRId16: &'static [u8; 2usize] = b"d\x00";
pub const PRId32: &'static [u8; 2usize] = b"d\x00";
pub const PRId64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIi8: &'static [u8; 2usize] = b"i\x00";
pub const PRIi16: &'static [u8; 2usize] = b"i\x00";
pub const PRIi32: &'static [u8; 2usize] = b"i\x00";
pub const PRIi64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIo8: &'static [u8; 2usize] = b"o\x00";
pub const PRIo16: &'static [u8; 2usize] = b"o\x00";
pub const PRIo32: &'static [u8; 2usize] = b"o\x00";
pub const PRIo64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIu8: &'static [u8; 2usize] = b"u\x00";
pub const PRIu16: &'static [u8; 2usize] = b"u\x00";
pub const PRIu32: &'static [u8; 2usize] = b"u\x00";
pub const PRIu64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIx8: &'static [u8; 2usize] = b"x\x00";
pub const PRIx16: &'static [u8; 2usize] = b"x\x00";
pub const PRIx32: &'static [u8; 2usize] = b"x\x00";
pub const PRIx64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIX8: &'static [u8; 2usize] = b"X\x00";
pub const PRIX16: &'static [u8; 2usize] = b"X\x00";
pub const PRIX32: &'static [u8; 2usize] = b"X\x00";
pub const PRIX64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\x00";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\x00";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\x00";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\x00";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\x00";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\x00";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\x00";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\x00";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\x00";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNd16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNd32: &'static [u8; 2usize] = b"d\x00";
pub const SCNd64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNi16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNi32: &'static [u8; 2usize] = b"i\x00";
pub const SCNi64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNu16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNu32: &'static [u8; 2usize] = b"u\x00";
pub const SCNu64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNo8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNo16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNo32: &'static [u8; 2usize] = b"o\x00";
pub const SCNo64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNx16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNx32: &'static [u8; 2usize] = b"x\x00";
pub const SCNx64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\x00";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\x00";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\x00";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\x00";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\x00";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\x00";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const _SYS_SYSLOG_H: ::std::os::raw::c_uint = 1;
pub const _BITS_SYSLOG_PATH_H: ::std::os::raw::c_uint = 1;
pub const _PATH_LOG: &'static [u8; 9usize] = b"/dev/log\x00";
pub const LOG_EMERG: ::std::os::raw::c_uint = 0;
pub const LOG_ALERT: ::std::os::raw::c_uint = 1;
pub const LOG_CRIT: ::std::os::raw::c_uint = 2;
pub const LOG_ERR: ::std::os::raw::c_uint = 3;
pub const LOG_WARNING: ::std::os::raw::c_uint = 4;
pub const LOG_NOTICE: ::std::os::raw::c_uint = 5;
pub const LOG_INFO: ::std::os::raw::c_uint = 6;
pub const LOG_DEBUG: ::std::os::raw::c_uint = 7;
pub const LOG_PRIMASK: ::std::os::raw::c_uint = 7;
pub const LOG_KERN: ::std::os::raw::c_uint = 0;
pub const LOG_USER: ::std::os::raw::c_uint = 8;
pub const LOG_MAIL: ::std::os::raw::c_uint = 16;
pub const LOG_DAEMON: ::std::os::raw::c_uint = 24;
pub const LOG_AUTH: ::std::os::raw::c_uint = 32;
pub const LOG_SYSLOG: ::std::os::raw::c_uint = 40;
pub const LOG_LPR: ::std::os::raw::c_uint = 48;
pub const LOG_NEWS: ::std::os::raw::c_uint = 56;
pub const LOG_UUCP: ::std::os::raw::c_uint = 64;
pub const LOG_CRON: ::std::os::raw::c_uint = 72;
pub const LOG_AUTHPRIV: ::std::os::raw::c_uint = 80;
pub const LOG_FTP: ::std::os::raw::c_uint = 88;
pub const LOG_LOCAL0: ::std::os::raw::c_uint = 128;
pub const LOG_LOCAL1: ::std::os::raw::c_uint = 136;
pub const LOG_LOCAL2: ::std::os::raw::c_uint = 144;
pub const LOG_LOCAL3: ::std::os::raw::c_uint = 152;
pub const LOG_LOCAL4: ::std::os::raw::c_uint = 160;
pub const LOG_LOCAL5: ::std::os::raw::c_uint = 168;
pub const LOG_LOCAL6: ::std::os::raw::c_uint = 176;
pub const LOG_LOCAL7: ::std::os::raw::c_uint = 184;
pub const LOG_NFACILITIES: ::std::os::raw::c_uint = 24;
pub const LOG_FACMASK: ::std::os::raw::c_uint = 1016;
pub const LOG_PID: ::std::os::raw::c_uint = 1;
pub const LOG_CONS: ::std::os::raw::c_uint = 2;
pub const LOG_ODELAY: ::std::os::raw::c_uint = 4;
pub const LOG_NDELAY: ::std::os::raw::c_uint = 8;
pub const LOG_NOWAIT: ::std::os::raw::c_uint = 16;
pub const LOG_PERROR: ::std::os::raw::c_uint = 32;
pub const _SYS_PARAM_H: ::std::os::raw::c_uint = 1;
pub const HZ: ::std::os::raw::c_uint = 100;
pub const EXEC_PAGESIZE: ::std::os::raw::c_uint = 4096;
pub const NOGROUP: ::std::os::raw::c_int = -1;
pub const MAXHOSTNAMELEN: ::std::os::raw::c_uint = 64;
pub const MAXSYMLINKS: ::std::os::raw::c_uint = 20;
pub const NOFILE: ::std::os::raw::c_uint = 256;
pub const NCARGS: ::std::os::raw::c_uint = 131072;
pub const NBBY: ::std::os::raw::c_uint = 8;
pub const NGROUPS: ::std::os::raw::c_uint = 65536;
pub const CANBSIZ: ::std::os::raw::c_uint = 255;
pub const MAXPATHLEN: ::std::os::raw::c_uint = 4096;
pub const DEV_BSIZE: ::std::os::raw::c_uint = 512;
pub const _SYS_TIME_H: ::std::os::raw::c_uint = 1;
pub const _SYS_STAT_H: ::std::os::raw::c_uint = 1;
pub const S_IREAD: ::std::os::raw::c_uint = 256;
pub const S_IWRITE: ::std::os::raw::c_uint = 128;
pub const S_IEXEC: ::std::os::raw::c_uint = 64;
pub const ACCESSPERMS: ::std::os::raw::c_uint = 511;
pub const ALLPERMS: ::std::os::raw::c_uint = 4095;
pub const DEFFILEMODE: ::std::os::raw::c_uint = 438;
pub const S_BLKSIZE: ::std::os::raw::c_uint = 512;
pub const _MKNOD_VER: ::std::os::raw::c_uint = 0;
pub const _SYS_IOCTL_H: ::std::os::raw::c_uint = 1;
pub const _IOC_NRBITS: ::std::os::raw::c_uint = 8;
pub const _IOC_TYPEBITS: ::std::os::raw::c_uint = 8;
pub const _IOC_SIZEBITS: ::std::os::raw::c_uint = 14;
pub const _IOC_DIRBITS: ::std::os::raw::c_uint = 2;
pub const _IOC_NRMASK: ::std::os::raw::c_uint = 255;
pub const _IOC_TYPEMASK: ::std::os::raw::c_uint = 255;
pub const _IOC_SIZEMASK: ::std::os::raw::c_uint = 16383;
pub const _IOC_DIRMASK: ::std::os::raw::c_uint = 3;
pub const _IOC_NRSHIFT: ::std::os::raw::c_uint = 0;
pub const _IOC_TYPESHIFT: ::std::os::raw::c_uint = 8;
pub const _IOC_SIZESHIFT: ::std::os::raw::c_uint = 16;
pub const _IOC_DIRSHIFT: ::std::os::raw::c_uint = 30;
pub const _IOC_NONE: ::std::os::raw::c_uint = 0;
pub const _IOC_WRITE: ::std::os::raw::c_uint = 1;
pub const _IOC_READ: ::std::os::raw::c_uint = 2;
pub const IOC_IN: ::std::os::raw::c_uint = 1073741824;
pub const IOC_OUT: ::std::os::raw::c_uint = 2147483648;
pub const IOC_INOUT: ::std::os::raw::c_uint = 3221225472;
pub const IOCSIZE_MASK: ::std::os::raw::c_uint = 1073676288;
pub const IOCSIZE_SHIFT: ::std::os::raw::c_uint = 16;
pub const TCGETS: ::std::os::raw::c_uint = 21505;
pub const TCSETS: ::std::os::raw::c_uint = 21506;
pub const TCSETSW: ::std::os::raw::c_uint = 21507;
pub const TCSETSF: ::std::os::raw::c_uint = 21508;
pub const TCGETA: ::std::os::raw::c_uint = 21509;
pub const TCSETA: ::std::os::raw::c_uint = 21510;
pub const TCSETAW: ::std::os::raw::c_uint = 21511;
pub const TCSETAF: ::std::os::raw::c_uint = 21512;
pub const TCSBRK: ::std::os::raw::c_uint = 21513;
pub const TCXONC: ::std::os::raw::c_uint = 21514;
pub const TCFLSH: ::std::os::raw::c_uint = 21515;
pub const TIOCEXCL: ::std::os::raw::c_uint = 21516;
pub const TIOCNXCL: ::std::os::raw::c_uint = 21517;
pub const TIOCSCTTY: ::std::os::raw::c_uint = 21518;
pub const TIOCGPGRP: ::std::os::raw::c_uint = 21519;
pub const TIOCSPGRP: ::std::os::raw::c_uint = 21520;
pub const TIOCOUTQ: ::std::os::raw::c_uint = 21521;
pub const TIOCSTI: ::std::os::raw::c_uint = 21522;
pub const TIOCGWINSZ: ::std::os::raw::c_uint = 21523;
pub const TIOCSWINSZ: ::std::os::raw::c_uint = 21524;
pub const TIOCMGET: ::std::os::raw::c_uint = 21525;
pub const TIOCMBIS: ::std::os::raw::c_uint = 21526;
pub const TIOCMBIC: ::std::os::raw::c_uint = 21527;
pub const TIOCMSET: ::std::os::raw::c_uint = 21528;
pub const TIOCGSOFTCAR: ::std::os::raw::c_uint = 21529;
pub const TIOCSSOFTCAR: ::std::os::raw::c_uint = 21530;
pub const FIONREAD: ::std::os::raw::c_uint = 21531;
pub const TIOCINQ: ::std::os::raw::c_uint = 21531;
pub const TIOCLINUX: ::std::os::raw::c_uint = 21532;
pub const TIOCCONS: ::std::os::raw::c_uint = 21533;
pub const TIOCGSERIAL: ::std::os::raw::c_uint = 21534;
pub const TIOCSSERIAL: ::std::os::raw::c_uint = 21535;
pub const TIOCPKT: ::std::os::raw::c_uint = 21536;
pub const FIONBIO: ::std::os::raw::c_uint = 21537;
pub const TIOCNOTTY: ::std::os::raw::c_uint = 21538;
pub const TIOCSETD: ::std::os::raw::c_uint = 21539;
pub const TIOCGETD: ::std::os::raw::c_uint = 21540;
pub const TCSBRKP: ::std::os::raw::c_uint = 21541;
pub const TIOCSBRK: ::std::os::raw::c_uint = 21543;
pub const TIOCCBRK: ::std::os::raw::c_uint = 21544;
pub const TIOCGSID: ::std::os::raw::c_uint = 21545;
pub const TIOCGRS485: ::std::os::raw::c_uint = 21550;
pub const TIOCSRS485: ::std::os::raw::c_uint = 21551;
pub const TCGETX: ::std::os::raw::c_uint = 21554;
pub const TCSETX: ::std::os::raw::c_uint = 21555;
pub const TCSETXF: ::std::os::raw::c_uint = 21556;
pub const TCSETXW: ::std::os::raw::c_uint = 21557;
pub const TIOCVHANGUP: ::std::os::raw::c_uint = 21559;
pub const FIONCLEX: ::std::os::raw::c_uint = 21584;
pub const FIOCLEX: ::std::os::raw::c_uint = 21585;
pub const FIOASYNC: ::std::os::raw::c_uint = 21586;
pub const TIOCSERCONFIG: ::std::os::raw::c_uint = 21587;
pub const TIOCSERGWILD: ::std::os::raw::c_uint = 21588;
pub const TIOCSERSWILD: ::std::os::raw::c_uint = 21589;
pub const TIOCGLCKTRMIOS: ::std::os::raw::c_uint = 21590;
pub const TIOCSLCKTRMIOS: ::std::os::raw::c_uint = 21591;
pub const TIOCSERGSTRUCT: ::std::os::raw::c_uint = 21592;
pub const TIOCSERGETLSR: ::std::os::raw::c_uint = 21593;
pub const TIOCSERGETMULTI: ::std::os::raw::c_uint = 21594;
pub const TIOCSERSETMULTI: ::std::os::raw::c_uint = 21595;
pub const TIOCMIWAIT: ::std::os::raw::c_uint = 21596;
pub const TIOCGICOUNT: ::std::os::raw::c_uint = 21597;
pub const FIOQSIZE: ::std::os::raw::c_uint = 21600;
pub const TIOCPKT_DATA: ::std::os::raw::c_uint = 0;
pub const TIOCPKT_FLUSHREAD: ::std::os::raw::c_uint = 1;
pub const TIOCPKT_FLUSHWRITE: ::std::os::raw::c_uint = 2;
pub const TIOCPKT_STOP: ::std::os::raw::c_uint = 4;
pub const TIOCPKT_START: ::std::os::raw::c_uint = 8;
pub const TIOCPKT_NOSTOP: ::std::os::raw::c_uint = 16;
pub const TIOCPKT_DOSTOP: ::std::os::raw::c_uint = 32;
pub const TIOCPKT_IOCTL: ::std::os::raw::c_uint = 64;
pub const TIOCSER_TEMT: ::std::os::raw::c_uint = 1;
pub const SIOCADDRT: ::std::os::raw::c_uint = 35083;
pub const SIOCDELRT: ::std::os::raw::c_uint = 35084;
pub const SIOCRTMSG: ::std::os::raw::c_uint = 35085;
pub const SIOCGIFNAME: ::std::os::raw::c_uint = 35088;
pub const SIOCSIFLINK: ::std::os::raw::c_uint = 35089;
pub const SIOCGIFCONF: ::std::os::raw::c_uint = 35090;
pub const SIOCGIFFLAGS: ::std::os::raw::c_uint = 35091;
pub const SIOCSIFFLAGS: ::std::os::raw::c_uint = 35092;
pub const SIOCGIFADDR: ::std::os::raw::c_uint = 35093;
pub const SIOCSIFADDR: ::std::os::raw::c_uint = 35094;
pub const SIOCGIFDSTADDR: ::std::os::raw::c_uint = 35095;
pub const SIOCSIFDSTADDR: ::std::os::raw::c_uint = 35096;
pub const SIOCGIFBRDADDR: ::std::os::raw::c_uint = 35097;
pub const SIOCSIFBRDADDR: ::std::os::raw::c_uint = 35098;
pub const SIOCGIFNETMASK: ::std::os::raw::c_uint = 35099;
pub const SIOCSIFNETMASK: ::std::os::raw::c_uint = 35100;
pub const SIOCGIFMETRIC: ::std::os::raw::c_uint = 35101;
pub const SIOCSIFMETRIC: ::std::os::raw::c_uint = 35102;
pub const SIOCGIFMEM: ::std::os::raw::c_uint = 35103;
pub const SIOCSIFMEM: ::std::os::raw::c_uint = 35104;
pub const SIOCGIFMTU: ::std::os::raw::c_uint = 35105;
pub const SIOCSIFMTU: ::std::os::raw::c_uint = 35106;
pub const SIOCSIFNAME: ::std::os::raw::c_uint = 35107;
pub const SIOCSIFHWADDR: ::std::os::raw::c_uint = 35108;
pub const SIOCGIFENCAP: ::std::os::raw::c_uint = 35109;
pub const SIOCSIFENCAP: ::std::os::raw::c_uint = 35110;
pub const SIOCGIFHWADDR: ::std::os::raw::c_uint = 35111;
pub const SIOCGIFSLAVE: ::std::os::raw::c_uint = 35113;
pub const SIOCSIFSLAVE: ::std::os::raw::c_uint = 35120;
pub const SIOCADDMULTI: ::std::os::raw::c_uint = 35121;
pub const SIOCDELMULTI: ::std::os::raw::c_uint = 35122;
pub const SIOCGIFINDEX: ::std::os::raw::c_uint = 35123;
pub const SIOGIFINDEX: ::std::os::raw::c_uint = 35123;
pub const SIOCSIFPFLAGS: ::std::os::raw::c_uint = 35124;
pub const SIOCGIFPFLAGS: ::std::os::raw::c_uint = 35125;
pub const SIOCDIFADDR: ::std::os::raw::c_uint = 35126;
pub const SIOCSIFHWBROADCAST: ::std::os::raw::c_uint = 35127;
pub const SIOCGIFCOUNT: ::std::os::raw::c_uint = 35128;
pub const SIOCGIFBR: ::std::os::raw::c_uint = 35136;
pub const SIOCSIFBR: ::std::os::raw::c_uint = 35137;
pub const SIOCGIFTXQLEN: ::std::os::raw::c_uint = 35138;
pub const SIOCSIFTXQLEN: ::std::os::raw::c_uint = 35139;
pub const SIOCDARP: ::std::os::raw::c_uint = 35155;
pub const SIOCGARP: ::std::os::raw::c_uint = 35156;
pub const SIOCSARP: ::std::os::raw::c_uint = 35157;
pub const SIOCDRARP: ::std::os::raw::c_uint = 35168;
pub const SIOCGRARP: ::std::os::raw::c_uint = 35169;
pub const SIOCSRARP: ::std::os::raw::c_uint = 35170;
pub const SIOCGIFMAP: ::std::os::raw::c_uint = 35184;
pub const SIOCSIFMAP: ::std::os::raw::c_uint = 35185;
pub const SIOCADDDLCI: ::std::os::raw::c_uint = 35200;
pub const SIOCDELDLCI: ::std::os::raw::c_uint = 35201;
pub const SIOCDEVPRIVATE: ::std::os::raw::c_uint = 35312;
pub const SIOCPROTOPRIVATE: ::std::os::raw::c_uint = 35296;
pub const NCC: ::std::os::raw::c_uint = 8;
pub const TIOCM_LE: ::std::os::raw::c_uint = 1;
pub const TIOCM_DTR: ::std::os::raw::c_uint = 2;
pub const TIOCM_RTS: ::std::os::raw::c_uint = 4;
pub const TIOCM_ST: ::std::os::raw::c_uint = 8;
pub const TIOCM_SR: ::std::os::raw::c_uint = 16;
pub const TIOCM_CTS: ::std::os::raw::c_uint = 32;
pub const TIOCM_CAR: ::std::os::raw::c_uint = 64;
pub const TIOCM_RNG: ::std::os::raw::c_uint = 128;
pub const TIOCM_DSR: ::std::os::raw::c_uint = 256;
pub const TIOCM_CD: ::std::os::raw::c_uint = 64;
pub const TIOCM_RI: ::std::os::raw::c_uint = 128;
pub const N_TTY: ::std::os::raw::c_uint = 0;
pub const N_SLIP: ::std::os::raw::c_uint = 1;
pub const N_MOUSE: ::std::os::raw::c_uint = 2;
pub const N_PPP: ::std::os::raw::c_uint = 3;
pub const N_STRIP: ::std::os::raw::c_uint = 4;
pub const N_AX25: ::std::os::raw::c_uint = 5;
pub const N_X25: ::std::os::raw::c_uint = 6;
pub const N_6PACK: ::std::os::raw::c_uint = 7;
pub const N_MASC: ::std::os::raw::c_uint = 8;
pub const N_R3964: ::std::os::raw::c_uint = 9;
pub const N_PROFIBUS_FDL: ::std::os::raw::c_uint = 10;
pub const N_IRDA: ::std::os::raw::c_uint = 11;
pub const N_SMSBLOCK: ::std::os::raw::c_uint = 12;
pub const N_HDLC: ::std::os::raw::c_uint = 13;
pub const N_SYNC_PPP: ::std::os::raw::c_uint = 14;
pub const N_HCI: ::std::os::raw::c_uint = 15;
pub const CEOL: u8 = b'\x00';
pub const CERASE: ::std::os::raw::c_uint = 127;
pub const CSTATUS: u8 = b'\x00';
pub const CMIN: ::std::os::raw::c_uint = 1;
pub const CQUIT: ::std::os::raw::c_uint = 28;
pub const CTIME: ::std::os::raw::c_uint = 0;
pub const CBRK: u8 = b'\x00';
pub const _SYS_FILE_H: ::std::os::raw::c_uint = 1;
pub const __LOCK_ATOMIC: ::std::os::raw::c_uint = 16;
pub const _SYS_WAIT_H: ::std::os::raw::c_uint = 1;
pub const WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const WAIT_ANY: ::std::os::raw::c_int = -1;
pub const WAIT_MYPGRP: ::std::os::raw::c_uint = 0;
pub const _SYS_UN_H: ::std::os::raw::c_uint = 1;
pub const _IFADDRS_H: ::std::os::raw::c_uint = 1;
pub const _ARPA_INET_H: ::std::os::raw::c_uint = 1;
pub const _NETINET_TCP_H: ::std::os::raw::c_uint = 1;
pub const TCP_NODELAY: ::std::os::raw::c_uint = 1;
pub const TCP_MAXSEG: ::std::os::raw::c_uint = 2;
pub const TCP_CORK: ::std::os::raw::c_uint = 3;
pub const TCP_KEEPIDLE: ::std::os::raw::c_uint = 4;
pub const TCP_KEEPINTVL: ::std::os::raw::c_uint = 5;
pub const TCP_KEEPCNT: ::std::os::raw::c_uint = 6;
pub const TCP_SYNCNT: ::std::os::raw::c_uint = 7;
pub const TCP_LINGER2: ::std::os::raw::c_uint = 8;
pub const TCP_DEFER_ACCEPT: ::std::os::raw::c_uint = 9;
pub const TCP_WINDOW_CLAMP: ::std::os::raw::c_uint = 10;
pub const TCP_INFO: ::std::os::raw::c_uint = 11;
pub const TCP_QUICKACK: ::std::os::raw::c_uint = 12;
pub const TCP_CONGESTION: ::std::os::raw::c_uint = 13;
pub const TCP_MD5SIG: ::std::os::raw::c_uint = 14;
pub const TCP_COOKIE_TRANSACTIONS: ::std::os::raw::c_uint = 15;
pub const TCP_THIN_LINEAR_TIMEOUTS: ::std::os::raw::c_uint = 16;
pub const TCP_THIN_DUPACK: ::std::os::raw::c_uint = 17;
pub const TCP_USER_TIMEOUT: ::std::os::raw::c_uint = 18;
pub const TCP_REPAIR: ::std::os::raw::c_uint = 19;
pub const TCP_REPAIR_QUEUE: ::std::os::raw::c_uint = 20;
pub const TCP_QUEUE_SEQ: ::std::os::raw::c_uint = 21;
pub const TCP_REPAIR_OPTIONS: ::std::os::raw::c_uint = 22;
pub const TCP_FASTOPEN: ::std::os::raw::c_uint = 23;
pub const TCP_TIMESTAMP: ::std::os::raw::c_uint = 24;
pub const TCP_NOTSENT_LOWAT: ::std::os::raw::c_uint = 25;
pub const TCP_CC_INFO: ::std::os::raw::c_uint = 26;
pub const TCP_SAVE_SYN: ::std::os::raw::c_uint = 27;
pub const TCP_SAVED_SYN: ::std::os::raw::c_uint = 28;
pub const TH_FIN: ::std::os::raw::c_uint = 1;
pub const TH_SYN: ::std::os::raw::c_uint = 2;
pub const TH_RST: ::std::os::raw::c_uint = 4;
pub const TH_PUSH: ::std::os::raw::c_uint = 8;
pub const TH_ACK: ::std::os::raw::c_uint = 16;
pub const TCPOPT_EOL: ::std::os::raw::c_uint = 0;
pub const TCPOPT_NOP: ::std::os::raw::c_uint = 1;
pub const TCPOPT_MAXSEG: ::std::os::raw::c_uint = 2;
pub const TCPOLEN_MAXSEG: ::std::os::raw::c_uint = 4;
pub const TCPOPT_WINDOW: ::std::os::raw::c_uint = 3;
pub const TCPOLEN_WINDOW: ::std::os::raw::c_uint = 3;
pub const TCPOPT_SACK_PERMITTED: ::std::os::raw::c_uint = 4;
pub const TCPOLEN_SACK_PERMITTED: ::std::os::raw::c_uint = 2;
pub const TCPOPT_SACK: ::std::os::raw::c_uint = 5;
pub const TCPOPT_TIMESTAMP: ::std::os::raw::c_uint = 8;
pub const TCPOLEN_TIMESTAMP: ::std::os::raw::c_uint = 10;
pub const TCPOLEN_TSTAMP_APPA: ::std::os::raw::c_uint = 12;
pub const TCPOPT_TSTAMP_HDR: ::std::os::raw::c_uint = 16844810;
pub const TCP_MSS: ::std::os::raw::c_uint = 512;
pub const TCP_MAXWIN: ::std::os::raw::c_uint = 65535;
pub const TCP_MAX_WINSHIFT: ::std::os::raw::c_uint = 14;
pub const SOL_TCP: ::std::os::raw::c_uint = 6;
pub const TCPI_OPT_TIMESTAMPS: ::std::os::raw::c_uint = 1;
pub const TCPI_OPT_SACK: ::std::os::raw::c_uint = 2;
pub const TCPI_OPT_WSCALE: ::std::os::raw::c_uint = 4;
pub const TCPI_OPT_ECN: ::std::os::raw::c_uint = 8;
pub const TCPI_OPT_ECN_SEEN: ::std::os::raw::c_uint = 16;
pub const TCPI_OPT_SYN_DATA: ::std::os::raw::c_uint = 32;
pub const TCP_MD5SIG_MAXKEYLEN: ::std::os::raw::c_uint = 80;
pub const TCP_COOKIE_MIN: ::std::os::raw::c_uint = 8;
pub const TCP_COOKIE_MAX: ::std::os::raw::c_uint = 16;
pub const TCP_COOKIE_PAIR_SIZE: ::std::os::raw::c_uint = 32;
pub const TCP_COOKIE_IN_ALWAYS: ::std::os::raw::c_uint = 1;
pub const TCP_COOKIE_OUT_NEVER: ::std::os::raw::c_uint = 2;
pub const TCP_S_DATA_IN: ::std::os::raw::c_uint = 4;
pub const TCP_S_DATA_OUT: ::std::os::raw::c_uint = 8;
pub const TCP_MSS_DEFAULT: ::std::os::raw::c_uint = 536;
pub const TCP_MSS_DESIRED: ::std::os::raw::c_uint = 1220;
pub const true_: ::std::os::raw::c_uint = 1;
pub const false_: ::std::os::raw::c_uint = 0;
pub const __bool_true_false_are_defined: ::std::os::raw::c_uint = 1;
pub const INVALID_SOCKET: ::std::os::raw::c_int = -1;
pub const SOCKET_ERROR: ::std::os::raw::c_int = -1;
pub const O_BINARY: ::std::os::raw::c_uint = 0;
pub const ZMQ_POLL_MSEC: ::std::os::raw::c_uint = 1;
pub const CZMQ_VERSION_MAJOR: ::std::os::raw::c_uint = 4;
pub const CZMQ_VERSION_MINOR: ::std::os::raw::c_uint = 0;
pub const CZMQ_VERSION_PATCH: ::std::os::raw::c_uint = 2;
pub const ZARMOUR_MODE_BASE64_STD: ::std::os::raw::c_uint = 0;
pub const ZARMOUR_MODE_BASE64_URL: ::std::os::raw::c_uint = 1;
pub const ZARMOUR_MODE_BASE32_STD: ::std::os::raw::c_uint = 2;
pub const ZARMOUR_MODE_BASE32_HEX: ::std::os::raw::c_uint = 3;
pub const ZARMOUR_MODE_BASE16: ::std::os::raw::c_uint = 4;
pub const ZARMOUR_MODE_Z85: ::std::os::raw::c_uint = 5;
pub const ZDIR_PATCH_CREATE: ::std::os::raw::c_uint = 1;
pub const ZDIR_PATCH_DELETE: ::std::os::raw::c_uint = 2;
pub const ZFRAME_MORE: ::std::os::raw::c_uint = 1;
pub const ZFRAME_REUSE: ::std::os::raw::c_uint = 2;
pub const ZFRAME_DONTWAIT: ::std::os::raw::c_uint = 4;
pub const ZUUID_LEN: ::std::os::raw::c_uint = 16;
pub const ZUUID_STR_LEN: ::std::os::raw::c_uint = 32;
pub const CURVE_ALLOW_ANY: &'static [u8; 2usize] = b"*\x00";
pub const UDP_FRAME_MAX: ::std::os::raw::c_uint = 255;
pub type czmq_destructor =
    ::std::option::Option<unsafe extern "C" fn(item:
                                                   *mut *mut ::std::os::raw::c_void)>;
pub type czmq_duplicator =
    ::std::option::Option<unsafe extern "C" fn(item:
                                                   *const ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
pub type czmq_comparator =
    ::std::option::Option<unsafe extern "C" fn(item1:
                                                   *const ::std::os::raw::c_void,
                                               item2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(::std::mem::size_of::<__fsid_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __fsid_t ) ));
    assert_eq! (::std::mem::align_of::<__fsid_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __fsid_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __fsid_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(::std::mem::size_of::<_IO_FILE>() , 216usize , concat ! (
               "Size of: " , stringify ! ( _IO_FILE ) ));
    assert_eq! (::std::mem::align_of::<_IO_FILE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IO_FILE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_ptr as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_end as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_base as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_base as * const
                _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_ptr as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_end as * const _
                as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_base as * const _
                as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_end as * const _
                as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_base as * const _
                as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_backup_base as * const
                _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_backup_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_end as * const _
                as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _markers as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _markers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _chain as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _chain ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _fileno as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _fileno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags2 as * const _ as
                usize } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _old_offset as * const _
                as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _old_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _cur_column as * const _
                as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _cur_column ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _vtable_offset as * const
                _ as usize } , 130usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _vtable_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _shortbuf as * const _ as
                usize } , 131usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _shortbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _lock as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _offset as * const _ as
                usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad1 as * const _ as
                usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad2 as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad3 as * const _ as
                usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad4 as * const _ as
                usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad5 as * const _ as
                usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _mode as * const _ as
                usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _unused2 as * const _ as
                usize } , 196usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _unused2 ) ));
}
impl Clone for _IO_FILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t__bindgen_ty_1 {
    pub __wch: __BindgenUnionField<::std::os::raw::c_uint>,
    pub __wchb: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __mbstate_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wch as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wch ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wchb as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wchb )
                ));
}
impl Clone for __mbstate_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::std::mem::size_of::<__mbstate_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __count as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __value as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __value ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(::std::mem::size_of::<_G_fpos_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _G_fpos_t ) ));
    assert_eq! (::std::mem::align_of::<_G_fpos_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _G_fpos_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos_t ) ) . __pos as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" ,
                stringify ! ( __pos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos_t ) ) . __state as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" ,
                stringify ! ( __state ) ));
}
impl Clone for _G_fpos_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(::std::mem::size_of::<_G_fpos64_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _G_fpos64_t ) ));
    assert_eq! (::std::mem::align_of::<_G_fpos64_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _G_fpos64_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos64_t ) ) . __pos as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" ,
                stringify ! ( __pos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos64_t ) ) . __state as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" ,
                stringify ! ( __state ) ));
}
impl Clone for _G_fpos64_t {
    fn clone(&self) -> Self { *self }
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(::std::mem::size_of::<_IO_marker>() , 24usize , concat ! (
               "Size of: " , stringify ! ( _IO_marker ) ));
    assert_eq! (::std::mem::align_of::<_IO_marker>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IO_marker ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _next as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _sbuf as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _sbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _pos as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _pos ) ));
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: usize) -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: usize) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: *mut __va_list_tag,
                       arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: usize,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                     __format: *const ::std::os::raw::c_char,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_sscanf"]
    pub fn sscanf1(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vfscanf"]
    pub fn vfscanf1(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vsscanf"]
    pub fn vsscanf1(__s: *const ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut usize, __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __n: usize, __s: *mut FILE) -> usize;
}
extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                          __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: usize, __n: usize, __stream: *mut FILE)
     -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn zmq_errno() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_strerror(errnum: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zmq_version(major: *mut ::std::os::raw::c_int,
                       minor: *mut ::std::os::raw::c_int,
                       patch: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn zmq_ctx_new() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zmq_ctx_term(context: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_ctx_shutdown(ctx_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_ctx_set(context: *mut ::std::os::raw::c_void,
                       option: ::std::os::raw::c_int,
                       optval: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_ctx_get(context: *mut ::std::os::raw::c_void,
                       option: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_init(io_threads: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zmq_term(context: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_ctx_destroy(context: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct zmq_msg_t {
    pub _bindgen_opaque_blob: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_zmq_msg_t() {
    assert_eq!(::std::mem::size_of::<zmq_msg_t>() , 64usize , concat ! (
               "Size of: " , stringify ! ( zmq_msg_t ) ));
    assert_eq! (::std::mem::align_of::<zmq_msg_t>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( zmq_msg_t ) ));
}
pub type zmq_free_fn =
    ::std::option::Option<unsafe extern "C" fn(data:
                                                   *mut ::std::os::raw::c_void,
                                               hint:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn zmq_msg_init(msg: *mut zmq_msg_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_msg_init_size(msg: *mut zmq_msg_t, size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_msg_init_data(msg: *mut zmq_msg_t,
                             data: *mut ::std::os::raw::c_void, size: usize,
                             ffn: zmq_free_fn,
                             hint: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_msg_send(msg: *mut zmq_msg_t, s: *mut ::std::os::raw::c_void,
                        flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_msg_recv(msg: *mut zmq_msg_t, s: *mut ::std::os::raw::c_void,
                        flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_msg_close(msg: *mut zmq_msg_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_msg_move(dest: *mut zmq_msg_t, src: *mut zmq_msg_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_msg_copy(dest: *mut zmq_msg_t, src: *mut zmq_msg_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_msg_data(msg: *mut zmq_msg_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zmq_msg_size(msg: *mut zmq_msg_t) -> usize;
}
extern "C" {
    pub fn zmq_msg_more(msg: *mut zmq_msg_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_msg_get(msg: *mut zmq_msg_t, property: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_msg_set(msg: *mut zmq_msg_t, property: ::std::os::raw::c_int,
                       optval: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_msg_gets(msg: *mut zmq_msg_t,
                        property: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zmq_socket(arg1: *mut ::std::os::raw::c_void,
                      type_: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zmq_close(s: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_setsockopt(s: *mut ::std::os::raw::c_void,
                          option: ::std::os::raw::c_int,
                          optval: *const ::std::os::raw::c_void,
                          optvallen: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_getsockopt(s: *mut ::std::os::raw::c_void,
                          option: ::std::os::raw::c_int,
                          optval: *mut ::std::os::raw::c_void,
                          optvallen: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_bind(s: *mut ::std::os::raw::c_void,
                    addr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_connect(s: *mut ::std::os::raw::c_void,
                       addr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_unbind(s: *mut ::std::os::raw::c_void,
                      addr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_disconnect(s: *mut ::std::os::raw::c_void,
                          addr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_send(s: *mut ::std::os::raw::c_void,
                    buf: *const ::std::os::raw::c_void, len: usize,
                    flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_send_const(s: *mut ::std::os::raw::c_void,
                          buf: *const ::std::os::raw::c_void, len: usize,
                          flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_recv(s: *mut ::std::os::raw::c_void,
                    buf: *mut ::std::os::raw::c_void, len: usize,
                    flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_socket_monitor(s: *mut ::std::os::raw::c_void,
                              addr: *const ::std::os::raw::c_char,
                              events: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct zmq_pollitem_t {
    pub socket: *mut ::std::os::raw::c_void,
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_zmq_pollitem_t() {
    assert_eq!(::std::mem::size_of::<zmq_pollitem_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( zmq_pollitem_t ) ));
    assert_eq! (::std::mem::align_of::<zmq_pollitem_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( zmq_pollitem_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const zmq_pollitem_t ) ) . socket as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( zmq_pollitem_t ) , "::"
                , stringify ! ( socket ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const zmq_pollitem_t ) ) . fd as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( zmq_pollitem_t ) , "::"
                , stringify ! ( fd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const zmq_pollitem_t ) ) . events as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( zmq_pollitem_t ) , "::"
                , stringify ! ( events ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const zmq_pollitem_t ) ) . revents as * const _
                as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( zmq_pollitem_t ) , "::"
                , stringify ! ( revents ) ));
}
impl Clone for zmq_pollitem_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn zmq_poll(items: *mut zmq_pollitem_t, nitems: ::std::os::raw::c_int,
                    timeout: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_proxy(frontend: *mut ::std::os::raw::c_void,
                     backend: *mut ::std::os::raw::c_void,
                     capture: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_proxy_steerable(frontend: *mut ::std::os::raw::c_void,
                               backend: *mut ::std::os::raw::c_void,
                               capture: *mut ::std::os::raw::c_void,
                               control: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_has(capability: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_device(type_: ::std::os::raw::c_int,
                      frontend: *mut ::std::os::raw::c_void,
                      backend: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_sendmsg(s: *mut ::std::os::raw::c_void, msg: *mut zmq_msg_t,
                       flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_recvmsg(s: *mut ::std::os::raw::c_void, msg: *mut zmq_msg_t,
                       flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_z85_encode(dest: *mut ::std::os::raw::c_char, data: *const u8,
                          size: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zmq_z85_decode(dest: *mut u8,
                          string: *const ::std::os::raw::c_char) -> *mut u8;
}
extern "C" {
    pub fn zmq_curve_keypair(z85_public_key: *mut ::std::os::raw::c_char,
                             z85_secret_key: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(::std::mem::size_of::<iovec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( iovec ) ));
    assert_eq! (::std::mem::align_of::<iovec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( iovec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const iovec ) ) . iov_base as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( iovec ) , "::" ,
                stringify ! ( iov_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const iovec ) ) . iov_len as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( iovec ) , "::" ,
                stringify ! ( iov_len ) ));
}
impl Clone for iovec {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn zmq_sendiov(s: *mut ::std::os::raw::c_void, iov: *mut iovec,
                       count: usize, flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_recviov(s: *mut ::std::os::raw::c_void, iov: *mut iovec,
                       count: *mut usize, flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmq_stopwatch_start() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zmq_stopwatch_stop(watch_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn zmq_sleep(seconds_: ::std::os::raw::c_int);
}
pub type zmq_thread_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn zmq_threadstart(func: zmq_thread_fn,
                           arg: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zmq_threadclose(thread: *mut ::std::os::raw::c_void);
}
pub const _ISupper: _bindgen_ty_1 = _bindgen_ty_1::_ISupper;
pub const _ISlower: _bindgen_ty_1 = _bindgen_ty_1::_ISlower;
pub const _ISalpha: _bindgen_ty_1 = _bindgen_ty_1::_ISalpha;
pub const _ISdigit: _bindgen_ty_1 = _bindgen_ty_1::_ISdigit;
pub const _ISxdigit: _bindgen_ty_1 = _bindgen_ty_1::_ISxdigit;
pub const _ISspace: _bindgen_ty_1 = _bindgen_ty_1::_ISspace;
pub const _ISprint: _bindgen_ty_1 = _bindgen_ty_1::_ISprint;
pub const _ISgraph: _bindgen_ty_1 = _bindgen_ty_1::_ISgraph;
pub const _ISblank: _bindgen_ty_1 = _bindgen_ty_1::_ISblank;
pub const _IScntrl: _bindgen_ty_1 = _bindgen_ty_1::_IScntrl;
pub const _ISpunct: _bindgen_ty_1 = _bindgen_ty_1::_ISpunct;
pub const _ISalnum: _bindgen_ty_1 = _bindgen_ty_1::_ISalnum;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    _ISupper = 256,
    _ISlower = 512,
    _ISalpha = 1024,
    _ISdigit = 2048,
    _ISxdigit = 4096,
    _ISspace = 8192,
    _ISprint = 16384,
    _ISgraph = 32768,
    _ISblank = 1,
    _IScntrl = 2,
    _ISpunct = 4,
    _ISalnum = 8,
}
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(::std::mem::size_of::<__locale_struct>() , 232usize , concat !
               ( "Size of: " , stringify ! ( __locale_struct ) ));
    assert_eq! (::std::mem::align_of::<__locale_struct>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( __locale_struct ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __locales as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __locales ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_b as *
                const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_tolower as
                * const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_tolower ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_toupper as
                * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_toupper ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __names as * const
                _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __names ) ));
}
impl Clone for __locale_struct {
    fn clone(&self) -> Self { *self }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum idtype_t { P_ALL = 0, P_PID = 1, P_PGID = 2, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait {
    pub w_status: __BindgenUnionField<::std::os::raw::c_int>,
    pub __wait_terminated: __BindgenUnionField<wait__bindgen_ty_1>,
    pub __wait_stopped: __BindgenUnionField<wait__bindgen_ty_2>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: [u16; 2usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_1>() , 4usize , concat !
               ( "Size of: " , stringify ! ( wait__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<wait__bindgen_ty_1>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_1 ) ));
}
impl Clone for wait__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        let mask = 127usize as u32;
        let unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 127usize as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        let mask = 128usize as u32;
        let unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 7usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 128usize as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 7usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        let mask = 65280usize as u32;
        let unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 65280usize as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn new_bitfield_1(__w_termsig: ::std::os::raw::c_uint,
                          __w_coredump: ::std::os::raw::c_uint,
                          __w_retcode: ::std::os::raw::c_uint) -> u32 {
        ({
             ({
                  ({ 0 } |
                       ((__w_termsig as u32 as u32) << 0usize) &
                           (127usize as u32))
              } |
                  ((__w_coredump as u32 as u32) << 7usize) &
                      (128usize as u32))
         } | ((__w_retcode as u32 as u32) << 8usize) & (65280usize as u32))
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: [u16; 2usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_2>() , 4usize , concat !
               ( "Size of: " , stringify ! ( wait__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<wait__bindgen_ty_2>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_2 ) ));
}
impl Clone for wait__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        let mask = 255usize as u32;
        let unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 255usize as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        let mask = 65280usize as u32;
        let unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 65280usize as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn new_bitfield_1(__w_stopval: ::std::os::raw::c_uint,
                          __w_stopsig: ::std::os::raw::c_uint) -> u32 {
        ({
             ({ 0 } |
                  ((__w_stopval as u32 as u32) << 0usize) & (255usize as u32))
         } | ((__w_stopsig as u32 as u32) << 8usize) & (65280usize as u32))
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(::std::mem::size_of::<wait>() , 4usize , concat ! (
               "Size of: " , stringify ! ( wait ) ));
    assert_eq! (::std::mem::align_of::<wait>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( wait ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . w_status as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( w_status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . __wait_terminated as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( __wait_terminated ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . __wait_stopped as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( __wait_stopped ) ));
}
impl Clone for wait {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __WAIT_STATUS {
    pub __uptr: __BindgenUnionField<*mut wait>,
    pub __iptr: __BindgenUnionField<*mut ::std::os::raw::c_int>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout___WAIT_STATUS() {
    assert_eq!(::std::mem::size_of::<__WAIT_STATUS>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __WAIT_STATUS ) ));
    assert_eq! (::std::mem::align_of::<__WAIT_STATUS>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __WAIT_STATUS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __WAIT_STATUS ) ) . __uptr as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __WAIT_STATUS ) , "::"
                , stringify ! ( __uptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __WAIT_STATUS ) ) . __iptr as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __WAIT_STATUS ) , "::"
                , stringify ! ( __iptr ) ));
}
impl Clone for __WAIT_STATUS {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(::std::mem::size_of::<div_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( div_t ) ));
    assert_eq! (::std::mem::align_of::<div_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( div_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . rem as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for div_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(::std::mem::size_of::<ldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( ldiv_t ) ));
    assert_eq! (::std::mem::align_of::<ldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for ldiv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(::std::mem::size_of::<lldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( lldiv_t ) ));
    assert_eq! (::std::mem::align_of::<lldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( lldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . quot as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for lldiv_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(::std::mem::size_of::<__sigset_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __sigset_t ) ));
    assert_eq! (::std::mem::align_of::<__sigset_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sigset_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigset_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigset_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __sigset_t {
    fn clone(&self) -> Self { *self }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timespec ) ));
    assert_eq! (::std::mem::align_of::<timespec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timespec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_nsec ) ));
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timeval ) ));
    assert_eq! (::std::mem::align_of::<timeval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timeval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_usec ) ));
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(::std::mem::size_of::<fd_set>() , 128usize , concat ! (
               "Size of: " , stringify ! ( fd_set ) ));
    assert_eq! (::std::mem::align_of::<fd_set>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( fd_set ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fd_set ) ) . __fds_bits as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( fd_set ) , "::" ,
                stringify ! ( __fds_bits ) ));
}
impl Clone for fd_set {
    fn clone(&self) -> Self { *self }
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_attr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<pthread_attr_t>() , 56usize , concat ! (
               "Size of: " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_attr_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __align ) ));
}
impl Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(::std::mem::size_of::<__pthread_internal_list>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( __pthread_internal_list ) ));
    assert_eq! (::std::mem::align_of::<__pthread_internal_list>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __pthread_internal_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_internal_list ) ) . __prev as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_internal_list
                ) , "::" , stringify ! ( __prev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_internal_list ) ) . __next as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_internal_list
                ) , "::" , stringify ! ( __next ) ));
}
impl Clone for __pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutex_t {
    pub __data: __BindgenUnionField<pthread_mutex_t___pthread_mutex_s>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 40usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>() ,
               40usize , concat ! (
               "Size of: " , stringify ! ( pthread_mutex_t___pthread_mutex_s )
               ));
    assert_eq! (::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __lock as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __count as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __owner as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __owner ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __nusers as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __nusers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __kind as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __kind ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __spins as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __spins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __elision as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __elision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __list as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __list ) ));
}
impl Clone for pthread_mutex_t___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<pthread_mutex_t>() , 40usize , concat ! (
               "Size of: " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_mutex_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutexattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_mutexattr_t>() , 4usize , concat
               ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_mutexattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t {
    pub __data: __BindgenUnionField<pthread_cond_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 48usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>() , 48usize
               , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_cond_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) . __lock
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __lock )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __futex as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __futex
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __total_seq as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __total_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __wakeup_seq as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __wakeup_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __woken_seq as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __woken_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __mutex as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __mutex
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __nwaiters as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nwaiters ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __broadcast_seq as * const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __broadcast_seq ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t>() , 48usize , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __align ) ));
}
impl Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_condattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_condattr_t>() , 4usize , concat !
               ( "Size of: " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_condattr_t>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlock_t {
    pub __data: __BindgenUnionField<pthread_rwlock_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>() ,
               56usize , concat ! (
               "Size of: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_rwlock_t__bindgen_ty_1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __lock as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __lock
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __nr_readers as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nr_readers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __readers_wakeup as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __readers_wakeup ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writer_wakeup as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writer_wakeup ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __nr_readers_queued as * const _ as usize } , 16usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nr_readers_queued ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __nr_writers_queued as * const _ as usize } , 20usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nr_writers_queued ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writer as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __shared as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __shared ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __rwelision as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __rwelision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad1 as * const _ as usize } , 33usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad2 as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __flags as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __flags ) ));
}
impl Clone for pthread_rwlock_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<pthread_rwlock_t>() , 56usize , concat !
               ( "Size of: " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_rwlock_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __data as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlockattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 8usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_rwlockattr_t>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_rwlockattr_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_barrier_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 32usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(::std::mem::size_of::<pthread_barrier_t>() , 32usize , concat !
               ( "Size of: " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_barrier_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrier_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_barrierattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_barrierattr_t>() , 4usize ,
               concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t )
               ));
    assert_eq! (::std::mem::align_of::<pthread_barrierattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_barrierattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrierattr_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(::std::mem::size_of::<random_data>() , 48usize , concat ! (
               "Size of: " , stringify ! ( random_data ) ));
    assert_eq! (::std::mem::align_of::<random_data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( random_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . fptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( fptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rptr as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . state as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_type as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_deg as * const _
                as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_deg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_sep as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_sep ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . end_ptr as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( end_ptr ) ));
}
impl Clone for random_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: usize, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(::std::mem::size_of::<drand48_data>() , 24usize , concat ! (
               "Size of: " , stringify ! ( drand48_data ) ));
    assert_eq! (::std::mem::align_of::<drand48_data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( drand48_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __old_x as * const _
                as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __old_x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __c as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __c ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __init as * const _ as
                usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __init ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __a as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __a ) ));
}
impl Clone for drand48_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func:
                             ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                 __size: usize, __compar: __compar_fn_t);
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *const ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize,
                     __l: __locale_t) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize)
     -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__xpg_strerror_r"]
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(::std::mem::size_of::<tm>() , 56usize , concat ! (
               "Size of: " , stringify ! ( tm ) ));
    assert_eq! (::std::mem::align_of::<tm>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( tm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_sec as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_min as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_min ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_hour as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_hour ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_mday as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_mday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_mon as * const _ as usize } ,
                16usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_mon ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_year as * const _ as usize }
                , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_year ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_wday as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_wday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_yday as * const _ as usize }
                , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_yday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_isdst as * const _ as usize }
                , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_isdst ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_gmtoff as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_gmtoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_zone as * const _ as usize }
                , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_zone ) ));
}
impl Clone for tm {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(::std::mem::size_of::<itimerspec>() , 32usize , concat ! (
               "Size of: " , stringify ! ( itimerspec ) ));
    assert_eq! (::std::mem::align_of::<itimerspec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( itimerspec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerspec ) ) . it_interval as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerspec ) , "::" ,
                stringify ! ( it_interval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerspec ) ) . it_value as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerspec ) , "::" ,
                stringify ! ( it_value ) ));
}
impl Clone for itimerspec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent__bindgen_ty_1 {
    pub _pad: __BindgenUnionField<[::std::os::raw::c_int; 12usize]>,
    pub _tid: __BindgenUnionField<__pid_t>,
    pub _sigev_thread: __BindgenUnionField<sigevent__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() ,
               16usize , concat ! (
               "Size of: " , stringify ! (
               sigevent__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                sigevent__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1__bindgen_ty_1 ) )
                . _function as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigevent__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                _function ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1__bindgen_ty_1 ) )
                . _attribute as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigevent__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                _attribute ) ));
}
impl Clone for sigevent__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigevent__bindgen_ty_1>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( sigevent__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<sigevent__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( sigevent__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) . _pad as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1
                ) , "::" , stringify ! ( _pad ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) . _tid as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1
                ) , "::" , stringify ! ( _tid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) .
                _sigev_thread as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1
                ) , "::" , stringify ! ( _sigev_thread ) ));
}
impl Clone for sigevent__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(::std::mem::size_of::<sigevent>() , 64usize , concat ! (
               "Size of: " , stringify ! ( sigevent ) ));
    assert_eq! (::std::mem::align_of::<sigevent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigevent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_value as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_signo as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_signo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_notify as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_notify ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . _sigev_un as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( _sigev_un ) ));
}
impl Clone for sigevent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                    __format: *const ::std::os::raw::c_char, __tp: *const tm)
     -> usize;
}
extern "C" {
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const tm, __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(__requested_time: *const timespec,
                     __remaining: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const timespec, __rem: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const itimerspec,
                         __ovalue: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn expl(__x: f64) -> f64;
}
extern "C" {
    pub fn __expl(__x: f64) -> f64;
}
extern "C" {
    pub fn frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn logl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logl(__x: f64) -> f64;
}
extern "C" {
    pub fn log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn __floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn __significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn __truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    #[link_name = "signgam"]
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_2 = _bindgen_ty_2::FP_NAN;
pub const FP_INFINITE: _bindgen_ty_2 = _bindgen_ty_2::FP_INFINITE;
pub const FP_ZERO: _bindgen_ty_2 = _bindgen_ty_2::FP_ZERO;
pub const FP_SUBNORMAL: _bindgen_ty_2 = _bindgen_ty_2::FP_SUBNORMAL;
pub const FP_NORMAL: _bindgen_ty_2 = _bindgen_ty_2::FP_NORMAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _LIB_VERSION_TYPE {
    _IEEE_ = -1,
    _SVID_ = 0,
    _XOPEN_ = 1,
    _POSIX_ = 2,
    _ISOC_ = 3,
}
extern "C" {
    #[link_name = "_LIB_VERSION"]
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(::std::mem::size_of::<exception>() , 40usize , concat ! (
               "Size of: " , stringify ! ( exception ) ));
    assert_eq! (::std::mem::align_of::<exception>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( exception ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const exception ) ) . type_ as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( exception ) , "::" ,
                stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const exception ) ) . name as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( exception ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const exception ) ) . arg1 as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( exception ) , "::" ,
                stringify ! ( arg1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const exception ) ) . arg2 as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( exception ) , "::" ,
                stringify ! ( arg2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const exception ) ) . retval as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( exception ) , "::" ,
                stringify ! ( retval ) ));
}
impl Clone for exception {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn matherr(__exc: *mut exception) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigismember(arg1: *const __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigval {
    pub sival_int: __BindgenUnionField<::std::os::raw::c_int>,
    pub sival_ptr: __BindgenUnionField<*mut ::std::os::raw::c_void>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(::std::mem::size_of::<sigval>() , 8usize , concat ! (
               "Size of: " , stringify ! ( sigval ) ));
    assert_eq! (::std::mem::align_of::<sigval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigval ) ) . sival_int as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigval ) , "::" ,
                stringify ! ( sival_int ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigval ) ) . sival_ptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigval ) , "::" ,
                stringify ! ( sival_ptr ) ));
}
impl Clone for sigval {
    fn clone(&self) -> Self { *self }
}
pub type sigval_t = sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1 {
    pub _pad: __BindgenUnionField<[::std::os::raw::c_int; 28usize]>,
    pub _kill: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_1>,
    pub _timer: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_2>,
    pub _rt: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_3>,
    pub _sigchld: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_4>,
    pub _sigfault: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_5>,
    pub _sigpoll: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_6>,
    pub _sigsys: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_7>,
    pub bindgen_union_field: [u64; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_1 ) )
                . si_pid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                si_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_1 ) )
                . si_uid as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                si_uid ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) )
                . si_tid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                si_tid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) )
                . si_overrun as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                si_overrun ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) )
                . si_sigval as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                si_sigval ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) )
                . si_pid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! (
                si_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) )
                . si_uid as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! (
                si_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) )
                . si_sigval as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! (
                si_sigval ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>()
               , 32usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_pid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_uid as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_status as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_utime as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_utime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_stime as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_stime ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub si_addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ) .
                _lower as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) , "::" ,
                stringify ! ( _lower ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ) .
                _upper as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) , "::" ,
                stringify ! ( _upper ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()
               , 32usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_5 ) )
                . si_addr as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! (
                si_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_5 ) )
                . si_addr_lsb as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! (
                si_addr_lsb ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_5 ) )
                . si_addr_bnd as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! (
                si_addr_bnd ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_6 ) )
                . si_band as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_6 ) , "::" , stringify ! (
                si_band ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_6 ) )
                . si_fd as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_6 ) , "::" , stringify ! (
                si_fd ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) )
                . _call_addr as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! (
                _call_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) )
                . _syscall as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! (
                _syscall ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) )
                . _arch as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! (
                _arch ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1>() , 112usize ,
               concat ! (
               "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _pad as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _pad ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _kill as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _kill ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _timer as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _timer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _rt as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _rt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigchld as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigchld ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigfault
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigfault ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigpoll as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigpoll ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigsys as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigsys ) ));
}
impl Clone for siginfo_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    assert_eq!(::std::mem::size_of::<siginfo_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( siginfo_t ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( siginfo_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . si_signo as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( si_signo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . si_errno as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( si_errno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . si_code as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( si_code ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . _sifields as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( _sifields ) ));
}
impl Clone for siginfo_t {
    fn clone(&self) -> Self { *self }
}
pub const SI_ASYNCNL: _bindgen_ty_3 = _bindgen_ty_3::SI_ASYNCNL;
pub const SI_TKILL: _bindgen_ty_3 = _bindgen_ty_3::SI_TKILL;
pub const SI_SIGIO: _bindgen_ty_3 = _bindgen_ty_3::SI_SIGIO;
pub const SI_ASYNCIO: _bindgen_ty_3 = _bindgen_ty_3::SI_ASYNCIO;
pub const SI_MESGQ: _bindgen_ty_3 = _bindgen_ty_3::SI_MESGQ;
pub const SI_TIMER: _bindgen_ty_3 = _bindgen_ty_3::SI_TIMER;
pub const SI_QUEUE: _bindgen_ty_3 = _bindgen_ty_3::SI_QUEUE;
pub const SI_USER: _bindgen_ty_3 = _bindgen_ty_3::SI_USER;
pub const SI_KERNEL: _bindgen_ty_3 = _bindgen_ty_3::SI_KERNEL;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 {
    SI_ASYNCNL = -60,
    SI_TKILL = -6,
    SI_SIGIO = -5,
    SI_ASYNCIO = -4,
    SI_MESGQ = -3,
    SI_TIMER = -2,
    SI_QUEUE = -1,
    SI_USER = 0,
    SI_KERNEL = 128,
}
pub const ILL_ILLOPC: _bindgen_ty_4 = _bindgen_ty_4::ILL_ILLOPC;
pub const ILL_ILLOPN: _bindgen_ty_4 = _bindgen_ty_4::ILL_ILLOPN;
pub const ILL_ILLADR: _bindgen_ty_4 = _bindgen_ty_4::ILL_ILLADR;
pub const ILL_ILLTRP: _bindgen_ty_4 = _bindgen_ty_4::ILL_ILLTRP;
pub const ILL_PRVOPC: _bindgen_ty_4 = _bindgen_ty_4::ILL_PRVOPC;
pub const ILL_PRVREG: _bindgen_ty_4 = _bindgen_ty_4::ILL_PRVREG;
pub const ILL_COPROC: _bindgen_ty_4 = _bindgen_ty_4::ILL_COPROC;
pub const ILL_BADSTK: _bindgen_ty_4 = _bindgen_ty_4::ILL_BADSTK;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_4 {
    ILL_ILLOPC = 1,
    ILL_ILLOPN = 2,
    ILL_ILLADR = 3,
    ILL_ILLTRP = 4,
    ILL_PRVOPC = 5,
    ILL_PRVREG = 6,
    ILL_COPROC = 7,
    ILL_BADSTK = 8,
}
pub const FPE_INTDIV: _bindgen_ty_5 = _bindgen_ty_5::FPE_INTDIV;
pub const FPE_INTOVF: _bindgen_ty_5 = _bindgen_ty_5::FPE_INTOVF;
pub const FPE_FLTDIV: _bindgen_ty_5 = _bindgen_ty_5::FPE_FLTDIV;
pub const FPE_FLTOVF: _bindgen_ty_5 = _bindgen_ty_5::FPE_FLTOVF;
pub const FPE_FLTUND: _bindgen_ty_5 = _bindgen_ty_5::FPE_FLTUND;
pub const FPE_FLTRES: _bindgen_ty_5 = _bindgen_ty_5::FPE_FLTRES;
pub const FPE_FLTINV: _bindgen_ty_5 = _bindgen_ty_5::FPE_FLTINV;
pub const FPE_FLTSUB: _bindgen_ty_5 = _bindgen_ty_5::FPE_FLTSUB;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_5 {
    FPE_INTDIV = 1,
    FPE_INTOVF = 2,
    FPE_FLTDIV = 3,
    FPE_FLTOVF = 4,
    FPE_FLTUND = 5,
    FPE_FLTRES = 6,
    FPE_FLTINV = 7,
    FPE_FLTSUB = 8,
}
pub const SEGV_MAPERR: _bindgen_ty_6 = _bindgen_ty_6::SEGV_MAPERR;
pub const SEGV_ACCERR: _bindgen_ty_6 = _bindgen_ty_6::SEGV_ACCERR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_6 { SEGV_MAPERR = 1, SEGV_ACCERR = 2, }
pub const BUS_ADRALN: _bindgen_ty_7 = _bindgen_ty_7::BUS_ADRALN;
pub const BUS_ADRERR: _bindgen_ty_7 = _bindgen_ty_7::BUS_ADRERR;
pub const BUS_OBJERR: _bindgen_ty_7 = _bindgen_ty_7::BUS_OBJERR;
pub const BUS_MCEERR_AR: _bindgen_ty_7 = _bindgen_ty_7::BUS_MCEERR_AR;
pub const BUS_MCEERR_AO: _bindgen_ty_7 = _bindgen_ty_7::BUS_MCEERR_AO;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_7 {
    BUS_ADRALN = 1,
    BUS_ADRERR = 2,
    BUS_OBJERR = 3,
    BUS_MCEERR_AR = 4,
    BUS_MCEERR_AO = 5,
}
pub const CLD_EXITED: _bindgen_ty_8 = _bindgen_ty_8::CLD_EXITED;
pub const CLD_KILLED: _bindgen_ty_8 = _bindgen_ty_8::CLD_KILLED;
pub const CLD_DUMPED: _bindgen_ty_8 = _bindgen_ty_8::CLD_DUMPED;
pub const CLD_TRAPPED: _bindgen_ty_8 = _bindgen_ty_8::CLD_TRAPPED;
pub const CLD_STOPPED: _bindgen_ty_8 = _bindgen_ty_8::CLD_STOPPED;
pub const CLD_CONTINUED: _bindgen_ty_8 = _bindgen_ty_8::CLD_CONTINUED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_8 {
    CLD_EXITED = 1,
    CLD_KILLED = 2,
    CLD_DUMPED = 3,
    CLD_TRAPPED = 4,
    CLD_STOPPED = 5,
    CLD_CONTINUED = 6,
}
pub const POLL_IN: _bindgen_ty_9 = _bindgen_ty_9::POLL_IN;
pub const POLL_OUT: _bindgen_ty_9 = _bindgen_ty_9::POLL_OUT;
pub const POLL_MSG: _bindgen_ty_9 = _bindgen_ty_9::POLL_MSG;
pub const POLL_ERR: _bindgen_ty_9 = _bindgen_ty_9::POLL_ERR;
pub const POLL_PRI: _bindgen_ty_9 = _bindgen_ty_9::POLL_PRI;
pub const POLL_HUP: _bindgen_ty_9 = _bindgen_ty_9::POLL_HUP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_9 {
    POLL_IN = 1,
    POLL_OUT = 2,
    POLL_MSG = 3,
    POLL_ERR = 4,
    POLL_PRI = 5,
    POLL_HUP = 6,
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_10 = _bindgen_ty_10::SIGEV_SIGNAL;
pub const SIGEV_NONE: _bindgen_ty_10 = _bindgen_ty_10::SIGEV_NONE;
pub const SIGEV_THREAD: _bindgen_ty_10 = _bindgen_ty_10::SIGEV_THREAD;
pub const SIGEV_THREAD_ID: _bindgen_ty_10 = _bindgen_ty_10::SIGEV_THREAD_ID;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_10 {
    SIGEV_SIGNAL = 0,
    SIGEV_NONE = 1,
    SIGEV_THREAD = 2,
    SIGEV_THREAD_ID = 4,
}
pub type __sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int,
                         __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int,
                   __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t,
                    __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(__set: *const sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigaction__bindgen_ty_1 {
    pub sa_handler: __BindgenUnionField<__sighandler_t>,
    pub sa_sigaction: __BindgenUnionField<::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                         ::std::os::raw::c_int,
                                                                                     arg2:
                                                                                         *mut siginfo_t,
                                                                                     arg3:
                                                                                         *mut ::std::os::raw::c_void)>>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigaction__bindgen_ty_1>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( sigaction__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<sigaction__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( sigaction__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction__bindgen_ty_1 ) ) . sa_handler
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction__bindgen_ty_1
                ) , "::" , stringify ! ( sa_handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction__bindgen_ty_1 ) ) .
                sa_sigaction as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction__bindgen_ty_1
                ) , "::" , stringify ! ( sa_sigaction ) ));
}
impl Clone for sigaction__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(::std::mem::size_of::<sigaction>() , 152usize , concat ! (
               "Size of: " , stringify ! ( sigaction ) ));
    assert_eq! (::std::mem::align_of::<sigaction>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigaction ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . __sigaction_handler as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( __sigaction_handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_mask as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_flags as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_restorer as * const _
                as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_restorer ) ));
}
impl Clone for sigaction {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn sigprocmask(__how: ::std::os::raw::c_int, __set: *const sigset_t,
                       __oset: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(__sig: ::std::os::raw::c_int, __act: *const sigaction,
                     __oact: *mut sigaction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(__set: *const sigset_t, __sig: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(__set: *const sigset_t, __info: *mut siginfo_t,
                        __timeout: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(__pid: __pid_t, __sig: ::std::os::raw::c_int,
                    __val: sigval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_sys_siglist"]
    pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    #[link_name = "sys_siglist"]
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    assert_eq!(::std::mem::size_of::<_fpx_sw_bytes>() , 48usize , concat ! (
               "Size of: " , stringify ! ( _fpx_sw_bytes ) ));
    assert_eq! (::std::mem::align_of::<_fpx_sw_bytes>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _fpx_sw_bytes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . magic1 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( magic1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . extended_size as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( extended_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . xstate_bv as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( xstate_bv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . xstate_size as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( xstate_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . padding as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( padding ) ));
}
impl Clone for _fpx_sw_bytes {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__fpreg() {
    assert_eq!(::std::mem::size_of::<_fpreg>() , 10usize , concat ! (
               "Size of: " , stringify ! ( _fpreg ) ));
    assert_eq! (::std::mem::align_of::<_fpreg>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( _fpreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpreg ) ) . significand as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpreg ) , "::" ,
                stringify ! ( significand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpreg ) ) . exponent as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpreg ) , "::" ,
                stringify ! ( exponent ) ));
}
impl Clone for _fpreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__fpxreg() {
    assert_eq!(::std::mem::size_of::<_fpxreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _fpxreg ) ));
    assert_eq! (::std::mem::align_of::<_fpxreg>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( _fpxreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpxreg ) ) . significand as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpxreg ) , "::" ,
                stringify ! ( significand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpxreg ) ) . exponent as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpxreg ) , "::" ,
                stringify ! ( exponent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpxreg ) ) . padding as * const _ as
                usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpxreg ) , "::" ,
                stringify ! ( padding ) ));
}
impl Clone for _fpxreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__xmmreg() {
    assert_eq!(::std::mem::size_of::<_xmmreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _xmmreg ) ));
    assert_eq! (::std::mem::align_of::<_xmmreg>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _xmmreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xmmreg ) ) . element as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _xmmreg ) , "::" ,
                stringify ! ( element ) ));
}
impl Clone for _xmmreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__fpstate() {
    assert_eq!(::std::mem::size_of::<_fpstate>() , 512usize , concat ! (
               "Size of: " , stringify ! ( _fpstate ) ));
    assert_eq! (::std::mem::align_of::<_fpstate>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _fpstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . cwd as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( cwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . swd as * const _ as usize
                } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( swd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . ftw as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( ftw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . fop as * const _ as usize
                } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( fop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . rip as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( rip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . rdp as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( rdp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . mxcsr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( mxcsr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . mxcr_mask as * const _ as
                usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( mxcr_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . _st as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( _st ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . _xmm as * const _ as usize
                } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( _xmm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . padding as * const _ as
                usize } , 416usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( padding ) ));
}
impl Clone for _fpstate {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigcontext__bindgen_ty_1 {
    pub fpstate: __BindgenUnionField<*mut _fpstate>,
    pub __fpstate_word: __BindgenUnionField<__uint64_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigcontext__bindgen_ty_1>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( sigcontext__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<sigcontext__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( sigcontext__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext__bindgen_ty_1 ) ) . fpstate as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigcontext__bindgen_ty_1 ) , "::" , stringify ! ( fpstate )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext__bindgen_ty_1 ) ) .
                __fpstate_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigcontext__bindgen_ty_1 ) , "::" , stringify ! (
                __fpstate_word ) ));
}
impl Clone for sigcontext__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigcontext() {
    assert_eq!(::std::mem::size_of::<sigcontext>() , 256usize , concat ! (
               "Size of: " , stringify ! ( sigcontext ) ));
    assert_eq! (::std::mem::align_of::<sigcontext>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigcontext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r8 as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r9 as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r9 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r10 as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r11 as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r11 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r12 as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r13 as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r13 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r14 as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r14 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r15 as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r15 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rdi as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rdi ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rsi as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rsi ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rbp as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rbp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rbx as * const _ as
                usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rbx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rdx as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rdx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rax as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rax ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rcx as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rcx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rsp as * const _ as
                usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rsp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rip as * const _ as
                usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . eflags as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( eflags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . cs as * const _ as usize
                } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( cs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . gs as * const _ as usize
                } , 146usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( gs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . fs as * const _ as usize
                } , 148usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( fs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . __pad0 as * const _ as
                usize } , 150usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( __pad0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . err as * const _ as
                usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( err ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . trapno as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( trapno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . oldmask as * const _ as
                usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( oldmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . cr2 as * const _ as
                usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( cr2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . __reserved1 as * const _
                as usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( __reserved1 ) ));
}
impl Clone for sigcontext {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2usize],
    pub reserved2: [__uint64_t; 5usize],
}
#[test]
fn bindgen_test_layout__xsave_hdr() {
    assert_eq!(::std::mem::size_of::<_xsave_hdr>() , 64usize , concat ! (
               "Size of: " , stringify ! ( _xsave_hdr ) ));
    assert_eq! (::std::mem::align_of::<_xsave_hdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _xsave_hdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xsave_hdr ) ) . xstate_bv as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" ,
                stringify ! ( xstate_bv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xsave_hdr ) ) . reserved1 as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" ,
                stringify ! ( reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xsave_hdr ) ) . reserved2 as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" ,
                stringify ! ( reserved2 ) ));
}
impl Clone for _xsave_hdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout__ymmh_state() {
    assert_eq!(::std::mem::size_of::<_ymmh_state>() , 256usize , concat ! (
               "Size of: " , stringify ! ( _ymmh_state ) ));
    assert_eq! (::std::mem::align_of::<_ymmh_state>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _ymmh_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _ymmh_state ) ) . ymmh_space as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _ymmh_state ) , "::" ,
                stringify ! ( ymmh_space ) ));
}
#[repr(C)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[test]
fn bindgen_test_layout__xstate() {
    assert_eq!(::std::mem::size_of::<_xstate>() , 832usize , concat ! (
               "Size of: " , stringify ! ( _xstate ) ));
    assert_eq! (::std::mem::align_of::<_xstate>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _xstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xstate ) ) . fpstate as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _xstate ) , "::" ,
                stringify ! ( fpstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xstate ) ) . xstate_hdr as * const _ as
                usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( _xstate ) , "::" ,
                stringify ! ( xstate_hdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xstate ) ) . ymmh as * const _ as usize
                } , 576usize , concat ! (
                "Alignment of field: " , stringify ! ( _xstate ) , "::" ,
                stringify ! ( ymmh ) ));
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(__sig: ::std::os::raw::c_int,
                        __interrupt: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(::std::mem::size_of::<sigstack>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sigstack ) ));
    assert_eq! (::std::mem::align_of::<sigstack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigstack ) ) . ss_sp as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigstack ) , "::" ,
                stringify ! ( ss_sp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigstack ) ) . ss_onstack as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigstack ) , "::" ,
                stringify ! ( ss_onstack ) ));
}
impl Clone for sigstack {
    fn clone(&self) -> Self { *self }
}
pub const SS_ONSTACK: _bindgen_ty_11 = _bindgen_ty_11::SS_ONSTACK;
pub const SS_DISABLE: _bindgen_ty_11 = _bindgen_ty_11::SS_DISABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_11 { SS_ONSTACK = 1, SS_DISABLE = 2, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[test]
fn bindgen_test_layout_sigaltstack() {
    assert_eq!(::std::mem::size_of::<sigaltstack>() , 24usize , concat ! (
               "Size of: " , stringify ! ( sigaltstack ) ));
    assert_eq! (::std::mem::align_of::<sigaltstack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigaltstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaltstack ) ) . ss_sp as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaltstack ) , "::" ,
                stringify ! ( ss_sp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaltstack ) ) . ss_flags as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaltstack ) , "::" ,
                stringify ! ( ss_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaltstack ) ) . ss_size as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaltstack ) , "::" ,
                stringify ! ( ss_size ) ));
}
impl Clone for sigaltstack {
    fn clone(&self) -> Self { *self }
}
pub type stack_t = sigaltstack;
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__libc_fpxreg() {
    assert_eq!(::std::mem::size_of::<_libc_fpxreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _libc_fpxreg ) ));
    assert_eq! (::std::mem::align_of::<_libc_fpxreg>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( _libc_fpxreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpxreg ) ) . significand as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" ,
                stringify ! ( significand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpxreg ) ) . exponent as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" ,
                stringify ! ( exponent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpxreg ) ) . padding as * const _
                as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" ,
                stringify ! ( padding ) ));
}
impl Clone for _libc_fpxreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__libc_xmmreg() {
    assert_eq!(::std::mem::size_of::<_libc_xmmreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _libc_xmmreg ) ));
    assert_eq! (::std::mem::align_of::<_libc_xmmreg>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _libc_xmmreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_xmmreg ) ) . element as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_xmmreg ) , "::" ,
                stringify ! ( element ) ));
}
impl Clone for _libc_xmmreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    assert_eq!(::std::mem::size_of::<_libc_fpstate>() , 512usize , concat ! (
               "Size of: " , stringify ! ( _libc_fpstate ) ));
    assert_eq! (::std::mem::align_of::<_libc_fpstate>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _libc_fpstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . cwd as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( cwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . swd as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( swd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . ftw as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( ftw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . fop as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( fop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . rip as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( rip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . rdp as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( rdp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . mxcsr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( mxcsr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . mxcr_mask as * const
                _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( mxcr_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . _st as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( _st ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . _xmm as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( _xmm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . padding as * const _
                as usize } , 416usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( padding ) ));
}
impl Clone for _libc_fpstate {
    fn clone(&self) -> Self { *self }
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    assert_eq!(::std::mem::size_of::<mcontext_t>() , 256usize , concat ! (
               "Size of: " , stringify ! ( mcontext_t ) ));
    assert_eq! (::std::mem::align_of::<mcontext_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( mcontext_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mcontext_t ) ) . gregs as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mcontext_t ) , "::" ,
                stringify ! ( gregs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mcontext_t ) ) . fpregs as * const _ as
                usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( mcontext_t ) , "::" ,
                stringify ! ( fpregs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mcontext_t ) ) . __reserved1 as * const _
                as usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( mcontext_t ) , "::" ,
                stringify ! ( __reserved1 ) ));
}
impl Clone for mcontext_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ucontext {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: _libc_fpstate,
}
#[test]
fn bindgen_test_layout_ucontext() {
    assert_eq!(::std::mem::size_of::<ucontext>() , 936usize , concat ! (
               "Size of: " , stringify ! ( ucontext ) ));
    assert_eq! (::std::mem::align_of::<ucontext>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ucontext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_flags as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_link as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_link ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_stack as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_mcontext as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_mcontext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_sigmask as * const _ as
                usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_sigmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . __fpregs_mem as * const _
                as usize } , 424usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( __fpregs_mem ) ));
}
impl Clone for ucontext {
    fn clone(&self) -> Self { *self }
}
pub type ucontext_t = ucontext;
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(__ss: *const sigaltstack, __oss: *mut sigaltstack)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(__how: ::std::os::raw::c_int,
                           __newmask: *const __sigset_t,
                           __oldmask: *mut __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(__threadid: pthread_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(::std::mem::size_of::<__jmp_buf_tag>() , 200usize , concat ! (
               "Size of: " , stringify ! ( __jmp_buf_tag ) ));
    assert_eq! (::std::mem::align_of::<__jmp_buf_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __jmp_buf_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __jmp_buf_tag ) ) . __jmpbuf as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __jmp_buf_tag ) , "::"
                , stringify ! ( __jmpbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __jmp_buf_tag ) ) . __mask_was_saved as *
                const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( __jmp_buf_tag ) , "::"
                , stringify ! ( __mask_was_saved ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __jmp_buf_tag ) ) . __saved_mask as *
                const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( __jmp_buf_tag ) , "::"
                , stringify ! ( __saved_mask ) ));
}
impl Clone for __jmp_buf_tag {
    fn clone(&self) -> Self { *self }
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(__env: *mut __jmp_buf_tag,
                       __savemask: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag,
                      __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __assert_fail(__assertion: *const ::std::os::raw::c_char,
                         __file: *const ::std::os::raw::c_char,
                         __line: ::std::os::raw::c_uint,
                         __function: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __assert_perror_fail(__errnum: ::std::os::raw::c_int,
                                __file: *const ::std::os::raw::c_char,
                                __line: ::std::os::raw::c_uint,
                                __function: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __assert(__assertion: *const ::std::os::raw::c_char,
                    __file: *const ::std::os::raw::c_char,
                    __line: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(::std::mem::size_of::<flock>() , 32usize , concat ! (
               "Size of: " , stringify ! ( flock ) ));
    assert_eq! (::std::mem::align_of::<flock>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( flock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock ) ) . l_type as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( flock ) , "::" ,
                stringify ! ( l_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock ) ) . l_whence as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( flock ) , "::" ,
                stringify ! ( l_whence ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock ) ) . l_start as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( flock ) , "::" ,
                stringify ! ( l_start ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock ) ) . l_len as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( flock ) , "::" ,
                stringify ! ( l_len ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock ) ) . l_pid as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( flock ) , "::" ,
                stringify ! ( l_pid ) ));
}
impl Clone for flock {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(::std::mem::size_of::<stat>() , 144usize , concat ! (
               "Size of: " , stringify ! ( stat ) ));
    assert_eq! (::std::mem::align_of::<stat>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( stat ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_dev as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_dev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_ino as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_ino ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_nlink as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_nlink ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_mode as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_uid as * const _ as usize }
                , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_gid as * const _ as usize }
                , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_gid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . __pad0 as * const _ as usize }
                , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( __pad0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_rdev as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_rdev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_size as * const _ as usize
                } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_blksize as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_blksize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_blocks as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_blocks ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_atim as * const _ as usize
                } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_atim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_mtim as * const _ as usize
                } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_mtim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_ctim as * const _ as usize
                } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_ctim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . __glibc_reserved as * const _
                as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( __glibc_reserved ) ));
}
impl Clone for stat {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn fcntl(__fd: ::std::os::raw::c_int,
                 __cmd: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(__file: *const ::std::os::raw::c_char,
                __oflag: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(__fd: ::std::os::raw::c_int,
                  __file: *const ::std::os::raw::c_char,
                  __oflag: ::std::os::raw::c_int, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(__fd: ::std::os::raw::c_int, __cmd: ::std::os::raw::c_int,
                 __len: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(__fd: ::std::os::raw::c_int, __offset: off_t,
                         __len: off_t, __advise: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(__fd: ::std::os::raw::c_int, __offset: off_t,
                           __len: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                 __count: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn writev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn preadv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int, __offset: __off_t) -> isize;
}
extern "C" {
    pub fn pwritev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                   __count: ::std::os::raw::c_int, __offset: __off_t)
     -> isize;
}
pub type socklen_t = __socklen_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __socket_type {
    SOCK_STREAM = 1,
    SOCK_DGRAM = 2,
    SOCK_RAW = 3,
    SOCK_RDM = 4,
    SOCK_SEQPACKET = 5,
    SOCK_DCCP = 6,
    SOCK_PACKET = 10,
    SOCK_CLOEXEC = 524288,
    SOCK_NONBLOCK = 2048,
}
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(::std::mem::size_of::<sockaddr>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sockaddr ) ));
    assert_eq! (::std::mem::align_of::<sockaddr>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( sockaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr ) ) . sa_family as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr ) , "::" ,
                stringify ! ( sa_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr ) ) . sa_data as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr ) , "::" ,
                stringify ! ( sa_data ) ));
}
impl Clone for sockaddr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(::std::mem::size_of::<sockaddr_storage>() , 128usize , concat !
               ( "Size of: " , stringify ! ( sockaddr_storage ) ));
    assert_eq! (::std::mem::align_of::<sockaddr_storage>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( sockaddr_storage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_storage ) ) . ss_family as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_storage ) ,
                "::" , stringify ! ( ss_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_storage ) ) . __ss_padding as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_storage ) ,
                "::" , stringify ! ( __ss_padding ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_storage ) ) . __ss_align as *
                const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_storage ) ,
                "::" , stringify ! ( __ss_align ) ));
}
pub const MSG_OOB: _bindgen_ty_12 = _bindgen_ty_12::MSG_OOB;
pub const MSG_PEEK: _bindgen_ty_12 = _bindgen_ty_12::MSG_PEEK;
pub const MSG_DONTROUTE: _bindgen_ty_12 = _bindgen_ty_12::MSG_DONTROUTE;
pub const MSG_CTRUNC: _bindgen_ty_12 = _bindgen_ty_12::MSG_CTRUNC;
pub const MSG_PROXY: _bindgen_ty_12 = _bindgen_ty_12::MSG_PROXY;
pub const MSG_TRUNC: _bindgen_ty_12 = _bindgen_ty_12::MSG_TRUNC;
pub const MSG_DONTWAIT: _bindgen_ty_12 = _bindgen_ty_12::MSG_DONTWAIT;
pub const MSG_EOR: _bindgen_ty_12 = _bindgen_ty_12::MSG_EOR;
pub const MSG_WAITALL: _bindgen_ty_12 = _bindgen_ty_12::MSG_WAITALL;
pub const MSG_FIN: _bindgen_ty_12 = _bindgen_ty_12::MSG_FIN;
pub const MSG_SYN: _bindgen_ty_12 = _bindgen_ty_12::MSG_SYN;
pub const MSG_CONFIRM: _bindgen_ty_12 = _bindgen_ty_12::MSG_CONFIRM;
pub const MSG_RST: _bindgen_ty_12 = _bindgen_ty_12::MSG_RST;
pub const MSG_ERRQUEUE: _bindgen_ty_12 = _bindgen_ty_12::MSG_ERRQUEUE;
pub const MSG_NOSIGNAL: _bindgen_ty_12 = _bindgen_ty_12::MSG_NOSIGNAL;
pub const MSG_MORE: _bindgen_ty_12 = _bindgen_ty_12::MSG_MORE;
pub const MSG_WAITFORONE: _bindgen_ty_12 = _bindgen_ty_12::MSG_WAITFORONE;
pub const MSG_FASTOPEN: _bindgen_ty_12 = _bindgen_ty_12::MSG_FASTOPEN;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_12 = _bindgen_ty_12::MSG_CMSG_CLOEXEC;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_12 {
    MSG_OOB = 1,
    MSG_PEEK = 2,
    MSG_DONTROUTE = 4,
    MSG_CTRUNC = 8,
    MSG_PROXY = 16,
    MSG_TRUNC = 32,
    MSG_DONTWAIT = 64,
    MSG_EOR = 128,
    MSG_WAITALL = 256,
    MSG_FIN = 512,
    MSG_SYN = 1024,
    MSG_CONFIRM = 2048,
    MSG_RST = 4096,
    MSG_ERRQUEUE = 8192,
    MSG_NOSIGNAL = 16384,
    MSG_MORE = 32768,
    MSG_WAITFORONE = 65536,
    MSG_FASTOPEN = 536870912,
    MSG_CMSG_CLOEXEC = 1073741824,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(::std::mem::size_of::<msghdr>() , 56usize , concat ! (
               "Size of: " , stringify ! ( msghdr ) ));
    assert_eq! (::std::mem::align_of::<msghdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( msghdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_namelen as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_namelen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_iov as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_iov ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_iovlen as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_iovlen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_control as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_control ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_controllen as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_controllen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_flags as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_flags ) ));
}
impl Clone for msghdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(::std::mem::size_of::<cmsghdr>() , 16usize , concat ! (
               "Size of: " , stringify ! ( cmsghdr ) ));
    assert_eq! (::std::mem::align_of::<cmsghdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( cmsghdr ) ));
}
impl Clone for cmsghdr {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr)
     -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_13 = _bindgen_ty_13::SCM_RIGHTS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_13 { SCM_RIGHTS = 1, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(::std::mem::size_of::<linger>() , 8usize , concat ! (
               "Size of: " , stringify ! ( linger ) ));
    assert_eq! (::std::mem::align_of::<linger>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( linger ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linger ) ) . l_onoff as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( linger ) , "::" ,
                stringify ! ( l_onoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linger ) ) . l_linger as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( linger ) , "::" ,
                stringify ! ( l_linger ) ));
}
impl Clone for linger {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(::std::mem::size_of::<osockaddr>() , 16usize , concat ! (
               "Size of: " , stringify ! ( osockaddr ) ));
    assert_eq! (::std::mem::align_of::<osockaddr>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( osockaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const osockaddr ) ) . sa_family as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( osockaddr ) , "::" ,
                stringify ! ( sa_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const osockaddr ) ) . sa_data as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( osockaddr ) , "::" ,
                stringify ! ( sa_data ) ));
}
impl Clone for osockaddr {
    fn clone(&self) -> Self { *self }
}
pub const SHUT_RD: _bindgen_ty_14 = _bindgen_ty_14::SHUT_RD;
pub const SHUT_WR: _bindgen_ty_14 = _bindgen_ty_14::SHUT_WR;
pub const SHUT_RDWR: _bindgen_ty_14 = _bindgen_ty_14::SHUT_RDWR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_14 { SHUT_RD = 0, SHUT_WR = 1, SHUT_RDWR = 2, }
extern "C" {
    pub fn socket(__domain: ::std::os::raw::c_int,
                  __type: ::std::os::raw::c_int,
                  __protocol: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(__domain: ::std::os::raw::c_int,
                      __type: ::std::os::raw::c_int,
                      __protocol: ::std::os::raw::c_int,
                      __fds: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                __len: socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                   __len: socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(__fd: ::std::os::raw::c_int,
                __buf: *const ::std::os::raw::c_void, __n: usize,
                __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn recv(__fd: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_void, __n: usize,
                __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn sendto(__fd: ::std::os::raw::c_int,
                  __buf: *const ::std::os::raw::c_void, __n: usize,
                  __flags: ::std::os::raw::c_int, __addr: *const sockaddr,
                  __addr_len: socklen_t) -> isize;
}
extern "C" {
    pub fn recvfrom(__fd: ::std::os::raw::c_int,
                    __buf: *mut ::std::os::raw::c_void, __n: usize,
                    __flags: ::std::os::raw::c_int, __addr: *mut sockaddr,
                    __addr_len: *mut socklen_t) -> isize;
}
extern "C" {
    pub fn sendmsg(__fd: ::std::os::raw::c_int, __message: *const msghdr,
                   __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn recvmsg(__fd: ::std::os::raw::c_int, __message: *mut msghdr,
                   __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn getsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *mut ::std::os::raw::c_void,
                      __optlen: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *const ::std::os::raw::c_void,
                      __optlen: socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                  __addr_len: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(__fd: ::std::os::raw::c_int, __how: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(__fd: ::std::os::raw::c_int,
                    __fdtype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(::std::mem::size_of::<in_addr>() , 4usize , concat ! (
               "Size of: " , stringify ! ( in_addr ) ));
    assert_eq! (::std::mem::align_of::<in_addr>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( in_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const in_addr ) ) . s_addr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( in_addr ) , "::" ,
                stringify ! ( s_addr ) ));
}
impl Clone for in_addr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(::std::mem::size_of::<ip_opts>() , 44usize , concat ! (
               "Size of: " , stringify ! ( ip_opts ) ));
    assert_eq! (::std::mem::align_of::<ip_opts>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ip_opts ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_opts ) ) . ip_dst as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_opts ) , "::" ,
                stringify ! ( ip_dst ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_opts ) ) . ip_opts as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_opts ) , "::" ,
                stringify ! ( ip_opts ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(::std::mem::size_of::<ip_mreqn>() , 12usize , concat ! (
               "Size of: " , stringify ! ( ip_mreqn ) ));
    assert_eq! (::std::mem::align_of::<ip_mreqn>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ip_mreqn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_mreqn ) ) . imr_multiaddr as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_mreqn ) , "::" ,
                stringify ! ( imr_multiaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_mreqn ) ) . imr_address as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_mreqn ) , "::" ,
                stringify ! ( imr_address ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_mreqn ) ) . imr_ifindex as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_mreqn ) , "::" ,
                stringify ! ( imr_ifindex ) ));
}
impl Clone for ip_mreqn {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(::std::mem::size_of::<in_pktinfo>() , 12usize , concat ! (
               "Size of: " , stringify ! ( in_pktinfo ) ));
    assert_eq! (::std::mem::align_of::<in_pktinfo>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( in_pktinfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const in_pktinfo ) ) . ipi_ifindex as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( in_pktinfo ) , "::" ,
                stringify ! ( ipi_ifindex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const in_pktinfo ) ) . ipi_spec_dst as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( in_pktinfo ) , "::" ,
                stringify ! ( ipi_spec_dst ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const in_pktinfo ) ) . ipi_addr as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( in_pktinfo ) , "::" ,
                stringify ! ( ipi_addr ) ));
}
impl Clone for in_pktinfo {
    fn clone(&self) -> Self { *self }
}
pub const IPPROTO_IP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_IP;
pub const IPPROTO_ICMP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_ICMP;
pub const IPPROTO_IGMP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_IGMP;
pub const IPPROTO_IPIP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_IPIP;
pub const IPPROTO_TCP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_TCP;
pub const IPPROTO_EGP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_EGP;
pub const IPPROTO_PUP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_PUP;
pub const IPPROTO_UDP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_UDP;
pub const IPPROTO_IDP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_IDP;
pub const IPPROTO_TP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_TP;
pub const IPPROTO_DCCP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_DCCP;
pub const IPPROTO_IPV6: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_IPV6;
pub const IPPROTO_RSVP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_RSVP;
pub const IPPROTO_GRE: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_GRE;
pub const IPPROTO_ESP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_ESP;
pub const IPPROTO_AH: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_AH;
pub const IPPROTO_MTP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_MTP;
pub const IPPROTO_BEETPH: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_BEETPH;
pub const IPPROTO_ENCAP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_ENCAP;
pub const IPPROTO_PIM: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_PIM;
pub const IPPROTO_COMP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_COMP;
pub const IPPROTO_SCTP: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_SCTP;
pub const IPPROTO_UDPLITE: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_UDPLITE;
pub const IPPROTO_MPLS: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_MPLS;
pub const IPPROTO_RAW: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_RAW;
pub const IPPROTO_MAX: _bindgen_ty_15 = _bindgen_ty_15::IPPROTO_MAX;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_15 {
    IPPROTO_IP = 0,
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_IPIP = 4,
    IPPROTO_TCP = 6,
    IPPROTO_EGP = 8,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_TP = 29,
    IPPROTO_DCCP = 33,
    IPPROTO_IPV6 = 41,
    IPPROTO_RSVP = 46,
    IPPROTO_GRE = 47,
    IPPROTO_ESP = 50,
    IPPROTO_AH = 51,
    IPPROTO_MTP = 92,
    IPPROTO_BEETPH = 94,
    IPPROTO_ENCAP = 98,
    IPPROTO_PIM = 103,
    IPPROTO_COMP = 108,
    IPPROTO_SCTP = 132,
    IPPROTO_UDPLITE = 136,
    IPPROTO_MPLS = 137,
    IPPROTO_RAW = 255,
    IPPROTO_MAX = 256,
}
pub const IPPROTO_HOPOPTS: _bindgen_ty_16 = _bindgen_ty_16::IPPROTO_HOPOPTS;
pub const IPPROTO_ROUTING: _bindgen_ty_16 = _bindgen_ty_16::IPPROTO_ROUTING;
pub const IPPROTO_FRAGMENT: _bindgen_ty_16 = _bindgen_ty_16::IPPROTO_FRAGMENT;
pub const IPPROTO_ICMPV6: _bindgen_ty_16 = _bindgen_ty_16::IPPROTO_ICMPV6;
pub const IPPROTO_NONE: _bindgen_ty_16 = _bindgen_ty_16::IPPROTO_NONE;
pub const IPPROTO_DSTOPTS: _bindgen_ty_16 = _bindgen_ty_16::IPPROTO_DSTOPTS;
pub const IPPROTO_MH: _bindgen_ty_16 = _bindgen_ty_16::IPPROTO_MH;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_16 {
    IPPROTO_HOPOPTS = 0,
    IPPROTO_ROUTING = 43,
    IPPROTO_FRAGMENT = 44,
    IPPROTO_ICMPV6 = 58,
    IPPROTO_NONE = 59,
    IPPROTO_DSTOPTS = 60,
    IPPROTO_MH = 135,
}
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_ECHO;
pub const IPPORT_DISCARD: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_DISCARD;
pub const IPPORT_SYSTAT: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_SYSTAT;
pub const IPPORT_DAYTIME: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_DAYTIME;
pub const IPPORT_NETSTAT: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_NETSTAT;
pub const IPPORT_FTP: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_FTP;
pub const IPPORT_TELNET: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_TELNET;
pub const IPPORT_SMTP: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_SMTP;
pub const IPPORT_TIMESERVER: _bindgen_ty_17 =
    _bindgen_ty_17::IPPORT_TIMESERVER;
pub const IPPORT_NAMESERVER: _bindgen_ty_17 =
    _bindgen_ty_17::IPPORT_NAMESERVER;
pub const IPPORT_WHOIS: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_WHOIS;
pub const IPPORT_MTP: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_MTP;
pub const IPPORT_TFTP: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_TFTP;
pub const IPPORT_RJE: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_RJE;
pub const IPPORT_FINGER: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_FINGER;
pub const IPPORT_TTYLINK: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_TTYLINK;
pub const IPPORT_SUPDUP: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_SUPDUP;
pub const IPPORT_EXECSERVER: _bindgen_ty_17 =
    _bindgen_ty_17::IPPORT_EXECSERVER;
pub const IPPORT_LOGINSERVER: _bindgen_ty_17 =
    _bindgen_ty_17::IPPORT_LOGINSERVER;
pub const IPPORT_CMDSERVER: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_CMDSERVER;
pub const IPPORT_EFSSERVER: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_EFSSERVER;
pub const IPPORT_BIFFUDP: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_EXECSERVER;
pub const IPPORT_WHOSERVER: _bindgen_ty_17 =
    _bindgen_ty_17::IPPORT_LOGINSERVER;
pub const IPPORT_ROUTESERVER: _bindgen_ty_17 =
    _bindgen_ty_17::IPPORT_EFSSERVER;
pub const IPPORT_RESERVED: _bindgen_ty_17 = _bindgen_ty_17::IPPORT_RESERVED;
pub const IPPORT_USERRESERVED: _bindgen_ty_17 =
    _bindgen_ty_17::IPPORT_USERRESERVED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_17 {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,
    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,
    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,
    IPPORT_RESERVED = 1024,
    IPPORT_USERRESERVED = 5000,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct in6_addr__bindgen_ty_1 {
    pub __u6_addr8: __BindgenUnionField<[u8; 16usize]>,
    pub __u6_addr16: __BindgenUnionField<[u16; 8usize]>,
    pub __u6_addr32: __BindgenUnionField<[u32; 4usize]>,
    pub bindgen_union_field: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<in6_addr__bindgen_ty_1>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( in6_addr__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<in6_addr__bindgen_ty_1>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( in6_addr__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const in6_addr__bindgen_ty_1 ) ) . __u6_addr8
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( in6_addr__bindgen_ty_1
                ) , "::" , stringify ! ( __u6_addr8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const in6_addr__bindgen_ty_1 ) ) . __u6_addr16
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( in6_addr__bindgen_ty_1
                ) , "::" , stringify ! ( __u6_addr16 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const in6_addr__bindgen_ty_1 ) ) . __u6_addr32
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( in6_addr__bindgen_ty_1
                ) , "::" , stringify ! ( __u6_addr32 ) ));
}
impl Clone for in6_addr__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(::std::mem::size_of::<in6_addr>() , 16usize , concat ! (
               "Size of: " , stringify ! ( in6_addr ) ));
    assert_eq! (::std::mem::align_of::<in6_addr>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( in6_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const in6_addr ) ) . __in6_u as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( in6_addr ) , "::" ,
                stringify ! ( __in6_u ) ));
}
impl Clone for in6_addr {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "in6addr_any"]
    pub static in6addr_any: in6_addr;
}
extern "C" {
    #[link_name = "in6addr_loopback"]
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(::std::mem::size_of::<sockaddr_in>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sockaddr_in ) ));
    assert_eq! (::std::mem::align_of::<sockaddr_in>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( sockaddr_in ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_in ) ) . sin_family as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_in ) , "::" ,
                stringify ! ( sin_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_in ) ) . sin_port as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_in ) , "::" ,
                stringify ! ( sin_port ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_in ) ) . sin_addr as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_in ) , "::" ,
                stringify ! ( sin_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_in ) ) . sin_zero as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_in ) , "::" ,
                stringify ! ( sin_zero ) ));
}
impl Clone for sockaddr_in {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(::std::mem::size_of::<sockaddr_in6>() , 28usize , concat ! (
               "Size of: " , stringify ! ( sockaddr_in6 ) ));
    assert_eq! (::std::mem::align_of::<sockaddr_in6>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( sockaddr_in6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_in6 ) ) . sin6_family as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_in6 ) , "::" ,
                stringify ! ( sin6_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_in6 ) ) . sin6_port as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_in6 ) , "::" ,
                stringify ! ( sin6_port ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_in6 ) ) . sin6_flowinfo as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_in6 ) , "::" ,
                stringify ! ( sin6_flowinfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_in6 ) ) . sin6_addr as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_in6 ) , "::" ,
                stringify ! ( sin6_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_in6 ) ) . sin6_scope_id as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_in6 ) , "::" ,
                stringify ! ( sin6_scope_id ) ));
}
impl Clone for sockaddr_in6 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(::std::mem::size_of::<ip_mreq>() , 8usize , concat ! (
               "Size of: " , stringify ! ( ip_mreq ) ));
    assert_eq! (::std::mem::align_of::<ip_mreq>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ip_mreq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_mreq ) ) . imr_multiaddr as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_mreq ) , "::" ,
                stringify ! ( imr_multiaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_mreq ) ) . imr_interface as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_mreq ) , "::" ,
                stringify ! ( imr_interface ) ));
}
impl Clone for ip_mreq {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(::std::mem::size_of::<ip_mreq_source>() , 12usize , concat ! (
               "Size of: " , stringify ! ( ip_mreq_source ) ));
    assert_eq! (::std::mem::align_of::<ip_mreq_source>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ip_mreq_source ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_mreq_source ) ) . imr_multiaddr as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_mreq_source ) , "::"
                , stringify ! ( imr_multiaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_mreq_source ) ) . imr_interface as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_mreq_source ) , "::"
                , stringify ! ( imr_interface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_mreq_source ) ) . imr_sourceaddr as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_mreq_source ) , "::"
                , stringify ! ( imr_sourceaddr ) ));
}
impl Clone for ip_mreq_source {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(::std::mem::size_of::<ipv6_mreq>() , 20usize , concat ! (
               "Size of: " , stringify ! ( ipv6_mreq ) ));
    assert_eq! (::std::mem::align_of::<ipv6_mreq>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ipv6_mreq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ipv6_mreq ) ) . ipv6mr_multiaddr as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ipv6_mreq ) , "::" ,
                stringify ! ( ipv6mr_multiaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ipv6_mreq ) ) . ipv6mr_interface as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( ipv6_mreq ) , "::" ,
                stringify ! ( ipv6mr_interface ) ));
}
impl Clone for ipv6_mreq {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(::std::mem::size_of::<group_req>() , 136usize , concat ! (
               "Size of: " , stringify ! ( group_req ) ));
    assert_eq! (::std::mem::align_of::<group_req>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( group_req ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group_req ) ) . gr_interface as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( group_req ) , "::" ,
                stringify ! ( gr_interface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group_req ) ) . gr_group as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( group_req ) , "::" ,
                stringify ! ( gr_group ) ));
}
#[repr(C)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(::std::mem::size_of::<group_source_req>() , 264usize , concat !
               ( "Size of: " , stringify ! ( group_source_req ) ));
    assert_eq! (::std::mem::align_of::<group_source_req>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( group_source_req ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group_source_req ) ) . gsr_interface as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( group_source_req ) ,
                "::" , stringify ! ( gsr_interface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group_source_req ) ) . gsr_group as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( group_source_req ) ,
                "::" , stringify ! ( gsr_group ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group_source_req ) ) . gsr_source as *
                const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( group_source_req ) ,
                "::" , stringify ! ( gsr_source ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(::std::mem::size_of::<ip_msfilter>() , 20usize , concat ! (
               "Size of: " , stringify ! ( ip_msfilter ) ));
    assert_eq! (::std::mem::align_of::<ip_msfilter>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ip_msfilter ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_msfilter ) ) . imsf_multiaddr as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_msfilter ) , "::" ,
                stringify ! ( imsf_multiaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_msfilter ) ) . imsf_interface as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_msfilter ) , "::" ,
                stringify ! ( imsf_interface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_msfilter ) ) . imsf_fmode as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_msfilter ) , "::" ,
                stringify ! ( imsf_fmode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_msfilter ) ) . imsf_numsrc as * const
                _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_msfilter ) , "::" ,
                stringify ! ( imsf_numsrc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ip_msfilter ) ) . imsf_slist as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( ip_msfilter ) , "::" ,
                stringify ! ( imsf_slist ) ));
}
impl Clone for ip_msfilter {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(::std::mem::size_of::<group_filter>() , 272usize , concat ! (
               "Size of: " , stringify ! ( group_filter ) ));
    assert_eq! (::std::mem::align_of::<group_filter>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( group_filter ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group_filter ) ) . gf_interface as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( group_filter ) , "::" ,
                stringify ! ( gf_interface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group_filter ) ) . gf_group as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( group_filter ) , "::" ,
                stringify ! ( gf_group ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group_filter ) ) . gf_fmode as * const _
                as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( group_filter ) , "::" ,
                stringify ! ( gf_fmode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group_filter ) ) . gf_numsrc as * const _
                as usize } , 140usize , concat ! (
                "Alignment of field: " , stringify ! ( group_filter ) , "::" ,
                stringify ! ( gf_numsrc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group_filter ) ) . gf_slist as * const _
                as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( group_filter ) , "::" ,
                stringify ! ( gf_slist ) ));
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(__sockfd: ::std::os::raw::c_int,
                        __sock_in: *mut sockaddr_in) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(__sockfd: ::std::os::raw::c_int,
                         __sock_in: *mut sockaddr_in6)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rpcent() {
    assert_eq!(::std::mem::size_of::<rpcent>() , 24usize , concat ! (
               "Size of: " , stringify ! ( rpcent ) ));
    assert_eq! (::std::mem::align_of::<rpcent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( rpcent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rpcent ) ) . r_name as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rpcent ) , "::" ,
                stringify ! ( r_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rpcent ) ) . r_aliases as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( rpcent ) , "::" ,
                stringify ! ( r_aliases ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rpcent ) ) . r_number as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( rpcent ) , "::" ,
                stringify ! ( r_number ) ));
}
impl Clone for rpcent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setrpcent(__stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn getrpcbyname(__name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(__number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbyname_r(__name: *const ::std::os::raw::c_char,
                          __result_buf: *mut rpcent,
                          __buffer: *mut ::std::os::raw::c_char,
                          __buflen: usize, __result: *mut *mut rpcent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcbynumber_r(__number: ::std::os::raw::c_int,
                            __result_buf: *mut rpcent,
                            __buffer: *mut ::std::os::raw::c_char,
                            __buflen: usize, __result: *mut *mut rpcent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcent_r(__result_buf: *mut rpcent,
                       __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                       __result: *mut *mut rpcent) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[test]
fn bindgen_test_layout_netent() {
    assert_eq!(::std::mem::size_of::<netent>() , 24usize , concat ! (
               "Size of: " , stringify ! ( netent ) ));
    assert_eq! (::std::mem::align_of::<netent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( netent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const netent ) ) . n_name as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( netent ) , "::" ,
                stringify ! ( n_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const netent ) ) . n_aliases as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( netent ) , "::" ,
                stringify ! ( n_aliases ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const netent ) ) . n_addrtype as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( netent ) , "::" ,
                stringify ! ( n_addrtype ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const netent ) ) . n_net as * const _ as usize
                } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( netent ) , "::" ,
                stringify ! ( n_net ) ));
}
impl Clone for netent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn herror(__str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(__err_num: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hostent() {
    assert_eq!(::std::mem::size_of::<hostent>() , 32usize , concat ! (
               "Size of: " , stringify ! ( hostent ) ));
    assert_eq! (::std::mem::align_of::<hostent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( hostent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hostent ) ) . h_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( hostent ) , "::" ,
                stringify ! ( h_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hostent ) ) . h_aliases as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( hostent ) , "::" ,
                stringify ! ( h_aliases ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hostent ) ) . h_addrtype as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( hostent ) , "::" ,
                stringify ! ( h_addrtype ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hostent ) ) . h_length as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( hostent ) , "::" ,
                stringify ! ( h_length ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hostent ) ) . h_addr_list as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( hostent ) , "::" ,
                stringify ! ( h_addr_list ) ));
}
impl Clone for hostent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn sethostent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn gethostbyaddr(__addr: *const ::std::os::raw::c_void,
                         __len: __socklen_t, __type: ::std::os::raw::c_int)
     -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(__name: *const ::std::os::raw::c_char)
     -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname2(__name: *const ::std::os::raw::c_char,
                          __af: ::std::os::raw::c_int) -> *mut hostent;
}
extern "C" {
    pub fn gethostent_r(__result_buf: *mut hostent,
                        __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                        __result: *mut *mut hostent,
                        __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr_r(__addr: *const ::std::os::raw::c_void,
                           __len: __socklen_t, __type: ::std::os::raw::c_int,
                           __result_buf: *mut hostent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: usize, __result: *mut *mut hostent,
                           __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname_r(__name: *const ::std::os::raw::c_char,
                           __result_buf: *mut hostent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: usize, __result: *mut *mut hostent,
                           __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname2_r(__name: *const ::std::os::raw::c_char,
                            __af: ::std::os::raw::c_int,
                            __result_buf: *mut hostent,
                            __buf: *mut ::std::os::raw::c_char,
                            __buflen: usize, __result: *mut *mut hostent,
                            __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getnetbyaddr(__net: u32, __type: ::std::os::raw::c_int)
     -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent_r(__result_buf: *mut netent,
                       __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                       __result: *mut *mut netent,
                       __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr_r(__net: u32, __type: ::std::os::raw::c_int,
                          __result_buf: *mut netent,
                          __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                          __result: *mut *mut netent,
                          __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyname_r(__name: *const ::std::os::raw::c_char,
                          __result_buf: *mut netent,
                          __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                          __result: *mut *mut netent,
                          __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_servent() {
    assert_eq!(::std::mem::size_of::<servent>() , 32usize , concat ! (
               "Size of: " , stringify ! ( servent ) ));
    assert_eq! (::std::mem::align_of::<servent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( servent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const servent ) ) . s_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( servent ) , "::" ,
                stringify ! ( s_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const servent ) ) . s_aliases as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( servent ) , "::" ,
                stringify ! ( s_aliases ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const servent ) ) . s_port as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( servent ) , "::" ,
                stringify ! ( s_port ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const servent ) ) . s_proto as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( servent ) , "::" ,
                stringify ! ( s_proto ) ));
}
impl Clone for servent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setservent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn getservbyname(__name: *const ::std::os::raw::c_char,
                         __proto: *const ::std::os::raw::c_char)
     -> *mut servent;
}
extern "C" {
    pub fn getservbyport(__port: ::std::os::raw::c_int,
                         __proto: *const ::std::os::raw::c_char)
     -> *mut servent;
}
extern "C" {
    pub fn getservent_r(__result_buf: *mut servent,
                        __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                        __result: *mut *mut servent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyname_r(__name: *const ::std::os::raw::c_char,
                           __proto: *const ::std::os::raw::c_char,
                           __result_buf: *mut servent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: usize, __result: *mut *mut servent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyport_r(__port: ::std::os::raw::c_int,
                           __proto: *const ::std::os::raw::c_char,
                           __result_buf: *mut servent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: usize, __result: *mut *mut servent)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_protoent() {
    assert_eq!(::std::mem::size_of::<protoent>() , 24usize , concat ! (
               "Size of: " , stringify ! ( protoent ) ));
    assert_eq! (::std::mem::align_of::<protoent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( protoent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const protoent ) ) . p_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( protoent ) , "::" ,
                stringify ! ( p_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const protoent ) ) . p_aliases as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( protoent ) , "::" ,
                stringify ! ( p_aliases ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const protoent ) ) . p_proto as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( protoent ) , "::" ,
                stringify ! ( p_proto ) ));
}
impl Clone for protoent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getprotobyname(__name: *const ::std::os::raw::c_char)
     -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent_r(__result_buf: *mut protoent,
                         __buf: *mut ::std::os::raw::c_char, __buflen: usize,
                         __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobyname_r(__name: *const ::std::os::raw::c_char,
                            __result_buf: *mut protoent,
                            __buf: *mut ::std::os::raw::c_char,
                            __buflen: usize, __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobynumber_r(__proto: ::std::os::raw::c_int,
                              __result_buf: *mut protoent,
                              __buf: *mut ::std::os::raw::c_char,
                              __buflen: usize, __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetgrent(__netgroup: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn getnetgrent(__hostp: *mut *mut ::std::os::raw::c_char,
                       __userp: *mut *mut ::std::os::raw::c_char,
                       __domainp: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innetgr(__netgroup: *const ::std::os::raw::c_char,
                   __host: *const ::std::os::raw::c_char,
                   __user: *const ::std::os::raw::c_char,
                   __domain: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent_r(__hostp: *mut *mut ::std::os::raw::c_char,
                         __userp: *mut *mut ::std::os::raw::c_char,
                         __domainp: *mut *mut ::std::os::raw::c_char,
                         __buffer: *mut ::std::os::raw::c_char,
                         __buflen: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(__ahost: *mut *mut ::std::os::raw::c_char,
                __rport: ::std::os::raw::c_ushort,
                __locuser: *const ::std::os::raw::c_char,
                __remuser: *const ::std::os::raw::c_char,
                __cmd: *const ::std::os::raw::c_char,
                __fd2p: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(__ahost: *mut *mut ::std::os::raw::c_char,
                   __rport: ::std::os::raw::c_ushort,
                   __locuser: *const ::std::os::raw::c_char,
                   __remuser: *const ::std::os::raw::c_char,
                   __cmd: *const ::std::os::raw::c_char,
                   __fd2p: *mut ::std::os::raw::c_int, __af: sa_family_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec(__ahost: *mut *mut ::std::os::raw::c_char,
                 __rport: ::std::os::raw::c_int,
                 __name: *const ::std::os::raw::c_char,
                 __pass: *const ::std::os::raw::c_char,
                 __cmd: *const ::std::os::raw::c_char,
                 __fd2p: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec_af(__ahost: *mut *mut ::std::os::raw::c_char,
                    __rport: ::std::os::raw::c_int,
                    __name: *const ::std::os::raw::c_char,
                    __pass: *const ::std::os::raw::c_char,
                    __cmd: *const ::std::os::raw::c_char,
                    __fd2p: *mut ::std::os::raw::c_int, __af: sa_family_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(__rhost: *const ::std::os::raw::c_char,
                   __suser: ::std::os::raw::c_int,
                   __remuser: *const ::std::os::raw::c_char,
                   __locuser: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok_af(__rhost: *const ::std::os::raw::c_char,
                      __suser: ::std::os::raw::c_int,
                      __remuser: *const ::std::os::raw::c_char,
                      __locuser: *const ::std::os::raw::c_char,
                      __af: sa_family_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(__raddr: u32, __suser: ::std::os::raw::c_int,
                    __remuser: *const ::std::os::raw::c_char,
                    __locuser: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_af(__raddr: *const ::std::os::raw::c_void,
                       __suser: ::std::os::raw::c_int,
                       __remuser: *const ::std::os::raw::c_char,
                       __locuser: *const ::std::os::raw::c_char,
                       __af: sa_family_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(__alport: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(__alport: *mut ::std::os::raw::c_int,
                        __af: sa_family_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
#[test]
fn bindgen_test_layout_addrinfo() {
    assert_eq!(::std::mem::size_of::<addrinfo>() , 48usize , concat ! (
               "Size of: " , stringify ! ( addrinfo ) ));
    assert_eq! (::std::mem::align_of::<addrinfo>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( addrinfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const addrinfo ) ) . ai_flags as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( addrinfo ) , "::" ,
                stringify ! ( ai_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const addrinfo ) ) . ai_family as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( addrinfo ) , "::" ,
                stringify ! ( ai_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const addrinfo ) ) . ai_socktype as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( addrinfo ) , "::" ,
                stringify ! ( ai_socktype ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const addrinfo ) ) . ai_protocol as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( addrinfo ) , "::" ,
                stringify ! ( ai_protocol ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const addrinfo ) ) . ai_addrlen as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( addrinfo ) , "::" ,
                stringify ! ( ai_addrlen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const addrinfo ) ) . ai_addr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( addrinfo ) , "::" ,
                stringify ! ( ai_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const addrinfo ) ) . ai_canonname as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( addrinfo ) , "::" ,
                stringify ! ( ai_canonname ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const addrinfo ) ) . ai_next as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( addrinfo ) , "::" ,
                stringify ! ( ai_next ) ));
}
impl Clone for addrinfo {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn getaddrinfo(__name: *const ::std::os::raw::c_char,
                       __service: *const ::std::os::raw::c_char,
                       __req: *const addrinfo, __pai: *mut *mut addrinfo)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeaddrinfo(__ai: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(__ecode: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getnameinfo(__sa: *const sockaddr, __salen: socklen_t,
                       __host: *mut ::std::os::raw::c_char,
                       __hostlen: socklen_t,
                       __serv: *mut ::std::os::raw::c_char,
                       __servlen: socklen_t, __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type useconds_t = __useconds_t;
extern "C" {
    pub fn access(__name: *const ::std::os::raw::c_char,
                  __type: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(__fd: ::std::os::raw::c_int,
                     __file: *const ::std::os::raw::c_char,
                     __type: ::std::os::raw::c_int,
                     __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(__fd: ::std::os::raw::c_int, __offset: __off_t,
                 __whence: ::std::os::raw::c_int) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(__fd: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_void, __nbytes: usize) -> isize;
}
extern "C" {
    pub fn write(__fd: ::std::os::raw::c_int,
                 __buf: *const ::std::os::raw::c_void, __n: usize) -> isize;
}
extern "C" {
    pub fn pread(__fd: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_void, __nbytes: usize,
                 __offset: __off_t) -> isize;
}
extern "C" {
    pub fn pwrite(__fd: ::std::os::raw::c_int,
                  __buf: *const ::std::os::raw::c_void, __n: usize,
                  __offset: __off_t) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t)
     -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(__file: *const ::std::os::raw::c_char, __owner: __uid_t,
                 __group: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(__fd: ::std::os::raw::c_int, __owner: __uid_t,
                  __group: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(__file: *const ::std::os::raw::c_char, __owner: __uid_t,
                  __group: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(__fd: ::std::os::raw::c_int,
                    __file: *const ::std::os::raw::c_char, __owner: __uid_t,
                    __group: __gid_t, __flag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__environ"]
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(__path: *const ::std::os::raw::c_char,
                  __argv: *const *const ::std::os::raw::c_char,
                  __envp: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(__fd: ::std::os::raw::c_int,
                   __argv: *const *const ::std::os::raw::c_char,
                   __envp: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(__path: *const ::std::os::raw::c_char,
                 __argv: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(__path: *const ::std::os::raw::c_char,
                  __arg: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(__path: *const ::std::os::raw::c_char,
                 __arg: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(__file: *const ::std::os::raw::c_char,
                  __argv: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(__file: *const ::std::os::raw::c_char,
                  __arg: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: _bindgen_ty_18 = _bindgen_ty_18::_PC_LINK_MAX;
pub const _PC_MAX_CANON: _bindgen_ty_18 = _bindgen_ty_18::_PC_MAX_CANON;
pub const _PC_MAX_INPUT: _bindgen_ty_18 = _bindgen_ty_18::_PC_MAX_INPUT;
pub const _PC_NAME_MAX: _bindgen_ty_18 = _bindgen_ty_18::_PC_NAME_MAX;
pub const _PC_PATH_MAX: _bindgen_ty_18 = _bindgen_ty_18::_PC_PATH_MAX;
pub const _PC_PIPE_BUF: _bindgen_ty_18 = _bindgen_ty_18::_PC_PIPE_BUF;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_18 =
    _bindgen_ty_18::_PC_CHOWN_RESTRICTED;
pub const _PC_NO_TRUNC: _bindgen_ty_18 = _bindgen_ty_18::_PC_NO_TRUNC;
pub const _PC_VDISABLE: _bindgen_ty_18 = _bindgen_ty_18::_PC_VDISABLE;
pub const _PC_SYNC_IO: _bindgen_ty_18 = _bindgen_ty_18::_PC_SYNC_IO;
pub const _PC_ASYNC_IO: _bindgen_ty_18 = _bindgen_ty_18::_PC_ASYNC_IO;
pub const _PC_PRIO_IO: _bindgen_ty_18 = _bindgen_ty_18::_PC_PRIO_IO;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_18 = _bindgen_ty_18::_PC_SOCK_MAXBUF;
pub const _PC_FILESIZEBITS: _bindgen_ty_18 = _bindgen_ty_18::_PC_FILESIZEBITS;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_18 =
    _bindgen_ty_18::_PC_REC_INCR_XFER_SIZE;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_18 =
    _bindgen_ty_18::_PC_REC_MAX_XFER_SIZE;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_18 =
    _bindgen_ty_18::_PC_REC_MIN_XFER_SIZE;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_18 =
    _bindgen_ty_18::_PC_REC_XFER_ALIGN;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_18 =
    _bindgen_ty_18::_PC_ALLOC_SIZE_MIN;
pub const _PC_SYMLINK_MAX: _bindgen_ty_18 = _bindgen_ty_18::_PC_SYMLINK_MAX;
pub const _PC_2_SYMLINKS: _bindgen_ty_18 = _bindgen_ty_18::_PC_2_SYMLINKS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_18 {
    _PC_LINK_MAX = 0,
    _PC_MAX_CANON = 1,
    _PC_MAX_INPUT = 2,
    _PC_NAME_MAX = 3,
    _PC_PATH_MAX = 4,
    _PC_PIPE_BUF = 5,
    _PC_CHOWN_RESTRICTED = 6,
    _PC_NO_TRUNC = 7,
    _PC_VDISABLE = 8,
    _PC_SYNC_IO = 9,
    _PC_ASYNC_IO = 10,
    _PC_PRIO_IO = 11,
    _PC_SOCK_MAXBUF = 12,
    _PC_FILESIZEBITS = 13,
    _PC_REC_INCR_XFER_SIZE = 14,
    _PC_REC_MAX_XFER_SIZE = 15,
    _PC_REC_MIN_XFER_SIZE = 16,
    _PC_REC_XFER_ALIGN = 17,
    _PC_ALLOC_SIZE_MIN = 18,
    _PC_SYMLINK_MAX = 19,
    _PC_2_SYMLINKS = 20,
}
pub const _SC_ARG_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_ARG_MAX;
pub const _SC_CHILD_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_CHILD_MAX;
pub const _SC_CLK_TCK: _bindgen_ty_19 = _bindgen_ty_19::_SC_CLK_TCK;
pub const _SC_NGROUPS_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_NGROUPS_MAX;
pub const _SC_OPEN_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_OPEN_MAX;
pub const _SC_STREAM_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_STREAM_MAX;
pub const _SC_TZNAME_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_TZNAME_MAX;
pub const _SC_JOB_CONTROL: _bindgen_ty_19 = _bindgen_ty_19::_SC_JOB_CONTROL;
pub const _SC_SAVED_IDS: _bindgen_ty_19 = _bindgen_ty_19::_SC_SAVED_IDS;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_REALTIME_SIGNALS;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_PRIORITY_SCHEDULING;
pub const _SC_TIMERS: _bindgen_ty_19 = _bindgen_ty_19::_SC_TIMERS;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_ASYNCHRONOUS_IO;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_PRIORITIZED_IO;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_SYNCHRONIZED_IO;
pub const _SC_FSYNC: _bindgen_ty_19 = _bindgen_ty_19::_SC_FSYNC;
pub const _SC_MAPPED_FILES: _bindgen_ty_19 = _bindgen_ty_19::_SC_MAPPED_FILES;
pub const _SC_MEMLOCK: _bindgen_ty_19 = _bindgen_ty_19::_SC_MEMLOCK;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_MEMLOCK_RANGE;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_MEMORY_PROTECTION;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_MESSAGE_PASSING;
pub const _SC_SEMAPHORES: _bindgen_ty_19 = _bindgen_ty_19::_SC_SEMAPHORES;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_SHARED_MEMORY_OBJECTS;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_AIO_LISTIO_MAX;
pub const _SC_AIO_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_AIO_MAX;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_AIO_PRIO_DELTA_MAX;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_DELAYTIMER_MAX;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_MQ_OPEN_MAX;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_MQ_PRIO_MAX;
pub const _SC_VERSION: _bindgen_ty_19 = _bindgen_ty_19::_SC_VERSION;
pub const _SC_PAGESIZE: _bindgen_ty_19 = _bindgen_ty_19::_SC_PAGESIZE;
pub const _SC_RTSIG_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_RTSIG_MAX;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_SEM_NSEMS_MAX;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_SEM_VALUE_MAX;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_SIGQUEUE_MAX;
pub const _SC_TIMER_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_TIMER_MAX;
pub const _SC_BC_BASE_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_BC_BASE_MAX;
pub const _SC_BC_DIM_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_BC_DIM_MAX;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_BC_SCALE_MAX;
pub const _SC_BC_STRING_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_BC_STRING_MAX;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_COLL_WEIGHTS_MAX;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_EQUIV_CLASS_MAX;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_EXPR_NEST_MAX;
pub const _SC_LINE_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_LINE_MAX;
pub const _SC_RE_DUP_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_RE_DUP_MAX;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_CHARCLASS_NAME_MAX;
pub const _SC_2_VERSION: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_VERSION;
pub const _SC_2_C_BIND: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_C_BIND;
pub const _SC_2_C_DEV: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_C_DEV;
pub const _SC_2_FORT_DEV: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_FORT_DEV;
pub const _SC_2_FORT_RUN: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_FORT_RUN;
pub const _SC_2_SW_DEV: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_SW_DEV;
pub const _SC_2_LOCALEDEF: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_LOCALEDEF;
pub const _SC_PII: _bindgen_ty_19 = _bindgen_ty_19::_SC_PII;
pub const _SC_PII_XTI: _bindgen_ty_19 = _bindgen_ty_19::_SC_PII_XTI;
pub const _SC_PII_SOCKET: _bindgen_ty_19 = _bindgen_ty_19::_SC_PII_SOCKET;
pub const _SC_PII_INTERNET: _bindgen_ty_19 = _bindgen_ty_19::_SC_PII_INTERNET;
pub const _SC_PII_OSI: _bindgen_ty_19 = _bindgen_ty_19::_SC_PII_OSI;
pub const _SC_POLL: _bindgen_ty_19 = _bindgen_ty_19::_SC_POLL;
pub const _SC_SELECT: _bindgen_ty_19 = _bindgen_ty_19::_SC_SELECT;
pub const _SC_UIO_MAXIOV: _bindgen_ty_19 = _bindgen_ty_19::_SC_UIO_MAXIOV;
pub const _SC_IOV_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_UIO_MAXIOV;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_PII_INTERNET_STREAM;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_PII_INTERNET_DGRAM;
pub const _SC_PII_OSI_COTS: _bindgen_ty_19 = _bindgen_ty_19::_SC_PII_OSI_COTS;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_19 = _bindgen_ty_19::_SC_PII_OSI_CLTS;
pub const _SC_PII_OSI_M: _bindgen_ty_19 = _bindgen_ty_19::_SC_PII_OSI_M;
pub const _SC_T_IOV_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_T_IOV_MAX;
pub const _SC_THREADS: _bindgen_ty_19 = _bindgen_ty_19::_SC_THREADS;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_SAFE_FUNCTIONS;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_GETGR_R_SIZE_MAX;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_GETPW_R_SIZE_MAX;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LOGIN_NAME_MAX;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_TTY_NAME_MAX;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_DESTRUCTOR_ITERATIONS;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_KEYS_MAX;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_STACK_MIN;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_THREADS_MAX;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_ATTR_STACKADDR;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_ATTR_STACKSIZE;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_PRIORITY_SCHEDULING;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_PRIO_INHERIT;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_PRIO_PROTECT;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_PROCESS_SHARED;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_NPROCESSORS_CONF;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_NPROCESSORS_ONLN;
pub const _SC_PHYS_PAGES: _bindgen_ty_19 = _bindgen_ty_19::_SC_PHYS_PAGES;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_19 = _bindgen_ty_19::_SC_AVPHYS_PAGES;
pub const _SC_ATEXIT_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_ATEXIT_MAX;
pub const _SC_PASS_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_PASS_MAX;
pub const _SC_XOPEN_VERSION: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_XOPEN_VERSION;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_XOPEN_XCU_VERSION;
pub const _SC_XOPEN_UNIX: _bindgen_ty_19 = _bindgen_ty_19::_SC_XOPEN_UNIX;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_19 = _bindgen_ty_19::_SC_XOPEN_CRYPT;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_XOPEN_ENH_I18N;
pub const _SC_XOPEN_SHM: _bindgen_ty_19 = _bindgen_ty_19::_SC_XOPEN_SHM;
pub const _SC_2_CHAR_TERM: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_CHAR_TERM;
pub const _SC_2_C_VERSION: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_C_VERSION;
pub const _SC_2_UPE: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_UPE;
pub const _SC_XOPEN_XPG2: _bindgen_ty_19 = _bindgen_ty_19::_SC_XOPEN_XPG2;
pub const _SC_XOPEN_XPG3: _bindgen_ty_19 = _bindgen_ty_19::_SC_XOPEN_XPG3;
pub const _SC_XOPEN_XPG4: _bindgen_ty_19 = _bindgen_ty_19::_SC_XOPEN_XPG4;
pub const _SC_CHAR_BIT: _bindgen_ty_19 = _bindgen_ty_19::_SC_CHAR_BIT;
pub const _SC_CHAR_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_CHAR_MAX;
pub const _SC_CHAR_MIN: _bindgen_ty_19 = _bindgen_ty_19::_SC_CHAR_MIN;
pub const _SC_INT_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_INT_MAX;
pub const _SC_INT_MIN: _bindgen_ty_19 = _bindgen_ty_19::_SC_INT_MIN;
pub const _SC_LONG_BIT: _bindgen_ty_19 = _bindgen_ty_19::_SC_LONG_BIT;
pub const _SC_WORD_BIT: _bindgen_ty_19 = _bindgen_ty_19::_SC_WORD_BIT;
pub const _SC_MB_LEN_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_MB_LEN_MAX;
pub const _SC_NZERO: _bindgen_ty_19 = _bindgen_ty_19::_SC_NZERO;
pub const _SC_SSIZE_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_SSIZE_MAX;
pub const _SC_SCHAR_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_SCHAR_MAX;
pub const _SC_SCHAR_MIN: _bindgen_ty_19 = _bindgen_ty_19::_SC_SCHAR_MIN;
pub const _SC_SHRT_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_SHRT_MAX;
pub const _SC_SHRT_MIN: _bindgen_ty_19 = _bindgen_ty_19::_SC_SHRT_MIN;
pub const _SC_UCHAR_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_UCHAR_MAX;
pub const _SC_UINT_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_UINT_MAX;
pub const _SC_ULONG_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_ULONG_MAX;
pub const _SC_USHRT_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_USHRT_MAX;
pub const _SC_NL_ARGMAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_NL_ARGMAX;
pub const _SC_NL_LANGMAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_NL_LANGMAX;
pub const _SC_NL_MSGMAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_NL_MSGMAX;
pub const _SC_NL_NMAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_NL_NMAX;
pub const _SC_NL_SETMAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_NL_SETMAX;
pub const _SC_NL_TEXTMAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_NL_TEXTMAX;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_XBS5_ILP32_OFF32;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_XBS5_ILP32_OFFBIG;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_XBS5_LP64_OFF64;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_XBS5_LPBIG_OFFBIG;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_19 = _bindgen_ty_19::_SC_XOPEN_LEGACY;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_XOPEN_REALTIME;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_XOPEN_REALTIME_THREADS;
pub const _SC_ADVISORY_INFO: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_ADVISORY_INFO;
pub const _SC_BARRIERS: _bindgen_ty_19 = _bindgen_ty_19::_SC_BARRIERS;
pub const _SC_BASE: _bindgen_ty_19 = _bindgen_ty_19::_SC_BASE;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_C_LANG_SUPPORT;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_C_LANG_SUPPORT_R;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_CLOCK_SELECTION;
pub const _SC_CPUTIME: _bindgen_ty_19 = _bindgen_ty_19::_SC_CPUTIME;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_CPUTIME;
pub const _SC_DEVICE_IO: _bindgen_ty_19 = _bindgen_ty_19::_SC_DEVICE_IO;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_DEVICE_SPECIFIC;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_DEVICE_SPECIFIC_R;
pub const _SC_FD_MGMT: _bindgen_ty_19 = _bindgen_ty_19::_SC_FD_MGMT;
pub const _SC_FIFO: _bindgen_ty_19 = _bindgen_ty_19::_SC_FIFO;
pub const _SC_PIPE: _bindgen_ty_19 = _bindgen_ty_19::_SC_PIPE;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_FILE_ATTRIBUTES;
pub const _SC_FILE_LOCKING: _bindgen_ty_19 = _bindgen_ty_19::_SC_FILE_LOCKING;
pub const _SC_FILE_SYSTEM: _bindgen_ty_19 = _bindgen_ty_19::_SC_FILE_SYSTEM;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_MONOTONIC_CLOCK;
pub const _SC_MULTI_PROCESS: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_MULTI_PROCESS;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_SINGLE_PROCESS;
pub const _SC_NETWORKING: _bindgen_ty_19 = _bindgen_ty_19::_SC_NETWORKING;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_READER_WRITER_LOCKS;
pub const _SC_SPIN_LOCKS: _bindgen_ty_19 = _bindgen_ty_19::_SC_SPIN_LOCKS;
pub const _SC_REGEXP: _bindgen_ty_19 = _bindgen_ty_19::_SC_REGEXP;
pub const _SC_REGEX_VERSION: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_REGEX_VERSION;
pub const _SC_SHELL: _bindgen_ty_19 = _bindgen_ty_19::_SC_SHELL;
pub const _SC_SIGNALS: _bindgen_ty_19 = _bindgen_ty_19::_SC_SIGNALS;
pub const _SC_SPAWN: _bindgen_ty_19 = _bindgen_ty_19::_SC_SPAWN;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_SPORADIC_SERVER;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_SPORADIC_SERVER;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_SYSTEM_DATABASE;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_SYSTEM_DATABASE_R;
pub const _SC_TIMEOUTS: _bindgen_ty_19 = _bindgen_ty_19::_SC_TIMEOUTS;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_TYPED_MEMORY_OBJECTS;
pub const _SC_USER_GROUPS: _bindgen_ty_19 = _bindgen_ty_19::_SC_USER_GROUPS;
pub const _SC_USER_GROUPS_R: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_USER_GROUPS_R;
pub const _SC_2_PBS: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_PBS;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_2_PBS_ACCOUNTING;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_PBS_LOCATE;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_2_PBS_MESSAGE;
pub const _SC_2_PBS_TRACK: _bindgen_ty_19 = _bindgen_ty_19::_SC_2_PBS_TRACK;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_SYMLOOP_MAX;
pub const _SC_STREAMS: _bindgen_ty_19 = _bindgen_ty_19::_SC_STREAMS;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_2_PBS_CHECKPOINT;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_V6_ILP32_OFF32;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_V6_ILP32_OFFBIG;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_V6_LP64_OFF64;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_V6_LPBIG_OFFBIG;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_HOST_NAME_MAX;
pub const _SC_TRACE: _bindgen_ty_19 = _bindgen_ty_19::_SC_TRACE;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_TRACE_EVENT_FILTER;
pub const _SC_TRACE_INHERIT: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_TRACE_INHERIT;
pub const _SC_TRACE_LOG: _bindgen_ty_19 = _bindgen_ty_19::_SC_TRACE_LOG;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL1_ICACHE_SIZE;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL1_ICACHE_ASSOC;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL1_ICACHE_LINESIZE;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL1_DCACHE_SIZE;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL1_DCACHE_ASSOC;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL1_DCACHE_LINESIZE;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL2_CACHE_SIZE;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL2_CACHE_ASSOC;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL2_CACHE_LINESIZE;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL3_CACHE_SIZE;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL3_CACHE_ASSOC;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL3_CACHE_LINESIZE;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL4_CACHE_SIZE;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL4_CACHE_ASSOC;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_LEVEL4_CACHE_LINESIZE;
pub const _SC_IPV6: _bindgen_ty_19 = _bindgen_ty_19::_SC_IPV6;
pub const _SC_RAW_SOCKETS: _bindgen_ty_19 = _bindgen_ty_19::_SC_RAW_SOCKETS;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_V7_ILP32_OFF32;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_V7_ILP32_OFFBIG;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_V7_LP64_OFF64;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_V7_LPBIG_OFFBIG;
pub const _SC_SS_REPL_MAX: _bindgen_ty_19 = _bindgen_ty_19::_SC_SS_REPL_MAX;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_TRACE_EVENT_NAME_MAX;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_TRACE_NAME_MAX;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_TRACE_SYS_MAX;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_TRACE_USER_EVENT_MAX;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_XOPEN_STREAMS;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_ROBUST_PRIO_INHERIT;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_19 =
    _bindgen_ty_19::_SC_THREAD_ROBUST_PRIO_PROTECT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_19 {
    _SC_ARG_MAX = 0,
    _SC_CHILD_MAX = 1,
    _SC_CLK_TCK = 2,
    _SC_NGROUPS_MAX = 3,
    _SC_OPEN_MAX = 4,
    _SC_STREAM_MAX = 5,
    _SC_TZNAME_MAX = 6,
    _SC_JOB_CONTROL = 7,
    _SC_SAVED_IDS = 8,
    _SC_REALTIME_SIGNALS = 9,
    _SC_PRIORITY_SCHEDULING = 10,
    _SC_TIMERS = 11,
    _SC_ASYNCHRONOUS_IO = 12,
    _SC_PRIORITIZED_IO = 13,
    _SC_SYNCHRONIZED_IO = 14,
    _SC_FSYNC = 15,
    _SC_MAPPED_FILES = 16,
    _SC_MEMLOCK = 17,
    _SC_MEMLOCK_RANGE = 18,
    _SC_MEMORY_PROTECTION = 19,
    _SC_MESSAGE_PASSING = 20,
    _SC_SEMAPHORES = 21,
    _SC_SHARED_MEMORY_OBJECTS = 22,
    _SC_AIO_LISTIO_MAX = 23,
    _SC_AIO_MAX = 24,
    _SC_AIO_PRIO_DELTA_MAX = 25,
    _SC_DELAYTIMER_MAX = 26,
    _SC_MQ_OPEN_MAX = 27,
    _SC_MQ_PRIO_MAX = 28,
    _SC_VERSION = 29,
    _SC_PAGESIZE = 30,
    _SC_RTSIG_MAX = 31,
    _SC_SEM_NSEMS_MAX = 32,
    _SC_SEM_VALUE_MAX = 33,
    _SC_SIGQUEUE_MAX = 34,
    _SC_TIMER_MAX = 35,
    _SC_BC_BASE_MAX = 36,
    _SC_BC_DIM_MAX = 37,
    _SC_BC_SCALE_MAX = 38,
    _SC_BC_STRING_MAX = 39,
    _SC_COLL_WEIGHTS_MAX = 40,
    _SC_EQUIV_CLASS_MAX = 41,
    _SC_EXPR_NEST_MAX = 42,
    _SC_LINE_MAX = 43,
    _SC_RE_DUP_MAX = 44,
    _SC_CHARCLASS_NAME_MAX = 45,
    _SC_2_VERSION = 46,
    _SC_2_C_BIND = 47,
    _SC_2_C_DEV = 48,
    _SC_2_FORT_DEV = 49,
    _SC_2_FORT_RUN = 50,
    _SC_2_SW_DEV = 51,
    _SC_2_LOCALEDEF = 52,
    _SC_PII = 53,
    _SC_PII_XTI = 54,
    _SC_PII_SOCKET = 55,
    _SC_PII_INTERNET = 56,
    _SC_PII_OSI = 57,
    _SC_POLL = 58,
    _SC_SELECT = 59,
    _SC_UIO_MAXIOV = 60,
    _SC_PII_INTERNET_STREAM = 61,
    _SC_PII_INTERNET_DGRAM = 62,
    _SC_PII_OSI_COTS = 63,
    _SC_PII_OSI_CLTS = 64,
    _SC_PII_OSI_M = 65,
    _SC_T_IOV_MAX = 66,
    _SC_THREADS = 67,
    _SC_THREAD_SAFE_FUNCTIONS = 68,
    _SC_GETGR_R_SIZE_MAX = 69,
    _SC_GETPW_R_SIZE_MAX = 70,
    _SC_LOGIN_NAME_MAX = 71,
    _SC_TTY_NAME_MAX = 72,
    _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,
    _SC_THREAD_KEYS_MAX = 74,
    _SC_THREAD_STACK_MIN = 75,
    _SC_THREAD_THREADS_MAX = 76,
    _SC_THREAD_ATTR_STACKADDR = 77,
    _SC_THREAD_ATTR_STACKSIZE = 78,
    _SC_THREAD_PRIORITY_SCHEDULING = 79,
    _SC_THREAD_PRIO_INHERIT = 80,
    _SC_THREAD_PRIO_PROTECT = 81,
    _SC_THREAD_PROCESS_SHARED = 82,
    _SC_NPROCESSORS_CONF = 83,
    _SC_NPROCESSORS_ONLN = 84,
    _SC_PHYS_PAGES = 85,
    _SC_AVPHYS_PAGES = 86,
    _SC_ATEXIT_MAX = 87,
    _SC_PASS_MAX = 88,
    _SC_XOPEN_VERSION = 89,
    _SC_XOPEN_XCU_VERSION = 90,
    _SC_XOPEN_UNIX = 91,
    _SC_XOPEN_CRYPT = 92,
    _SC_XOPEN_ENH_I18N = 93,
    _SC_XOPEN_SHM = 94,
    _SC_2_CHAR_TERM = 95,
    _SC_2_C_VERSION = 96,
    _SC_2_UPE = 97,
    _SC_XOPEN_XPG2 = 98,
    _SC_XOPEN_XPG3 = 99,
    _SC_XOPEN_XPG4 = 100,
    _SC_CHAR_BIT = 101,
    _SC_CHAR_MAX = 102,
    _SC_CHAR_MIN = 103,
    _SC_INT_MAX = 104,
    _SC_INT_MIN = 105,
    _SC_LONG_BIT = 106,
    _SC_WORD_BIT = 107,
    _SC_MB_LEN_MAX = 108,
    _SC_NZERO = 109,
    _SC_SSIZE_MAX = 110,
    _SC_SCHAR_MAX = 111,
    _SC_SCHAR_MIN = 112,
    _SC_SHRT_MAX = 113,
    _SC_SHRT_MIN = 114,
    _SC_UCHAR_MAX = 115,
    _SC_UINT_MAX = 116,
    _SC_ULONG_MAX = 117,
    _SC_USHRT_MAX = 118,
    _SC_NL_ARGMAX = 119,
    _SC_NL_LANGMAX = 120,
    _SC_NL_MSGMAX = 121,
    _SC_NL_NMAX = 122,
    _SC_NL_SETMAX = 123,
    _SC_NL_TEXTMAX = 124,
    _SC_XBS5_ILP32_OFF32 = 125,
    _SC_XBS5_ILP32_OFFBIG = 126,
    _SC_XBS5_LP64_OFF64 = 127,
    _SC_XBS5_LPBIG_OFFBIG = 128,
    _SC_XOPEN_LEGACY = 129,
    _SC_XOPEN_REALTIME = 130,
    _SC_XOPEN_REALTIME_THREADS = 131,
    _SC_ADVISORY_INFO = 132,
    _SC_BARRIERS = 133,
    _SC_BASE = 134,
    _SC_C_LANG_SUPPORT = 135,
    _SC_C_LANG_SUPPORT_R = 136,
    _SC_CLOCK_SELECTION = 137,
    _SC_CPUTIME = 138,
    _SC_THREAD_CPUTIME = 139,
    _SC_DEVICE_IO = 140,
    _SC_DEVICE_SPECIFIC = 141,
    _SC_DEVICE_SPECIFIC_R = 142,
    _SC_FD_MGMT = 143,
    _SC_FIFO = 144,
    _SC_PIPE = 145,
    _SC_FILE_ATTRIBUTES = 146,
    _SC_FILE_LOCKING = 147,
    _SC_FILE_SYSTEM = 148,
    _SC_MONOTONIC_CLOCK = 149,
    _SC_MULTI_PROCESS = 150,
    _SC_SINGLE_PROCESS = 151,
    _SC_NETWORKING = 152,
    _SC_READER_WRITER_LOCKS = 153,
    _SC_SPIN_LOCKS = 154,
    _SC_REGEXP = 155,
    _SC_REGEX_VERSION = 156,
    _SC_SHELL = 157,
    _SC_SIGNALS = 158,
    _SC_SPAWN = 159,
    _SC_SPORADIC_SERVER = 160,
    _SC_THREAD_SPORADIC_SERVER = 161,
    _SC_SYSTEM_DATABASE = 162,
    _SC_SYSTEM_DATABASE_R = 163,
    _SC_TIMEOUTS = 164,
    _SC_TYPED_MEMORY_OBJECTS = 165,
    _SC_USER_GROUPS = 166,
    _SC_USER_GROUPS_R = 167,
    _SC_2_PBS = 168,
    _SC_2_PBS_ACCOUNTING = 169,
    _SC_2_PBS_LOCATE = 170,
    _SC_2_PBS_MESSAGE = 171,
    _SC_2_PBS_TRACK = 172,
    _SC_SYMLOOP_MAX = 173,
    _SC_STREAMS = 174,
    _SC_2_PBS_CHECKPOINT = 175,
    _SC_V6_ILP32_OFF32 = 176,
    _SC_V6_ILP32_OFFBIG = 177,
    _SC_V6_LP64_OFF64 = 178,
    _SC_V6_LPBIG_OFFBIG = 179,
    _SC_HOST_NAME_MAX = 180,
    _SC_TRACE = 181,
    _SC_TRACE_EVENT_FILTER = 182,
    _SC_TRACE_INHERIT = 183,
    _SC_TRACE_LOG = 184,
    _SC_LEVEL1_ICACHE_SIZE = 185,
    _SC_LEVEL1_ICACHE_ASSOC = 186,
    _SC_LEVEL1_ICACHE_LINESIZE = 187,
    _SC_LEVEL1_DCACHE_SIZE = 188,
    _SC_LEVEL1_DCACHE_ASSOC = 189,
    _SC_LEVEL1_DCACHE_LINESIZE = 190,
    _SC_LEVEL2_CACHE_SIZE = 191,
    _SC_LEVEL2_CACHE_ASSOC = 192,
    _SC_LEVEL2_CACHE_LINESIZE = 193,
    _SC_LEVEL3_CACHE_SIZE = 194,
    _SC_LEVEL3_CACHE_ASSOC = 195,
    _SC_LEVEL3_CACHE_LINESIZE = 196,
    _SC_LEVEL4_CACHE_SIZE = 197,
    _SC_LEVEL4_CACHE_ASSOC = 198,
    _SC_LEVEL4_CACHE_LINESIZE = 199,
    _SC_IPV6 = 235,
    _SC_RAW_SOCKETS = 236,
    _SC_V7_ILP32_OFF32 = 237,
    _SC_V7_ILP32_OFFBIG = 238,
    _SC_V7_LP64_OFF64 = 239,
    _SC_V7_LPBIG_OFFBIG = 240,
    _SC_SS_REPL_MAX = 241,
    _SC_TRACE_EVENT_NAME_MAX = 242,
    _SC_TRACE_NAME_MAX = 243,
    _SC_TRACE_SYS_MAX = 244,
    _SC_TRACE_USER_EVENT_MAX = 245,
    _SC_XOPEN_STREAMS = 246,
    _SC_THREAD_ROBUST_PRIO_INHERIT = 247,
    _SC_THREAD_ROBUST_PRIO_PROTECT = 248,
}
pub const _CS_PATH: _bindgen_ty_20 = _bindgen_ty_20::_CS_PATH;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_V6_WIDTH_RESTRICTED_ENVS;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_GNU_LIBC_VERSION;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_GNU_LIBPTHREAD_VERSION;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_V5_WIDTH_RESTRICTED_ENVS;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_V7_WIDTH_RESTRICTED_ENVS;
pub const _CS_LFS_CFLAGS: _bindgen_ty_20 = _bindgen_ty_20::_CS_LFS_CFLAGS;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_20 = _bindgen_ty_20::_CS_LFS_LDFLAGS;
pub const _CS_LFS_LIBS: _bindgen_ty_20 = _bindgen_ty_20::_CS_LFS_LIBS;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_LFS_LINTFLAGS;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_20 = _bindgen_ty_20::_CS_LFS64_CFLAGS;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_LFS64_LDFLAGS;
pub const _CS_LFS64_LIBS: _bindgen_ty_20 = _bindgen_ty_20::_CS_LFS64_LIBS;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_LFS64_LINTFLAGS;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_ILP32_OFF32_CFLAGS;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_ILP32_OFF32_LDFLAGS;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_ILP32_OFF32_LIBS;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_ILP32_OFF32_LINTFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_ILP32_OFFBIG_CFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_ILP32_OFFBIG_LDFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_ILP32_OFFBIG_LIBS;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_LP64_OFF64_CFLAGS;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_LP64_OFF64_LDFLAGS;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_LP64_OFF64_LIBS;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_LP64_OFF64_LINTFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_LPBIG_OFFBIG_CFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_LPBIG_OFFBIG_LIBS;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_ILP32_OFF32_CFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_ILP32_OFF32_LDFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_ILP32_OFF32_LIBS;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_ILP32_OFFBIG_LIBS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_LP64_OFF64_CFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_LP64_OFF64_LDFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_LP64_OFF64_LIBS;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_LP64_OFF64_LINTFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_LPBIG_OFFBIG_LIBS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_ILP32_OFF32_CFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_ILP32_OFF32_LDFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_ILP32_OFF32_LIBS;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_ILP32_OFFBIG_LIBS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_LP64_OFF64_CFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_LP64_OFF64_LDFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_LP64_OFF64_LIBS;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_LP64_OFF64_LINTFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_LPBIG_OFFBIG_LIBS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_20 =
    _bindgen_ty_20::_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_V6_ENV: _bindgen_ty_20 = _bindgen_ty_20::_CS_V6_ENV;
pub const _CS_V7_ENV: _bindgen_ty_20 = _bindgen_ty_20::_CS_V7_ENV;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_20 {
    _CS_PATH = 0,
    _CS_V6_WIDTH_RESTRICTED_ENVS = 1,
    _CS_GNU_LIBC_VERSION = 2,
    _CS_GNU_LIBPTHREAD_VERSION = 3,
    _CS_V5_WIDTH_RESTRICTED_ENVS = 4,
    _CS_V7_WIDTH_RESTRICTED_ENVS = 5,
    _CS_LFS_CFLAGS = 1000,
    _CS_LFS_LDFLAGS = 1001,
    _CS_LFS_LIBS = 1002,
    _CS_LFS_LINTFLAGS = 1003,
    _CS_LFS64_CFLAGS = 1004,
    _CS_LFS64_LDFLAGS = 1005,
    _CS_LFS64_LIBS = 1006,
    _CS_LFS64_LINTFLAGS = 1007,
    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
    _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,
    _CS_XBS5_ILP32_OFF32_LIBS = 1102,
    _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,
    _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,
    _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,
    _CS_XBS5_LP64_OFF64_CFLAGS = 1108,
    _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,
    _CS_XBS5_LP64_OFF64_LIBS = 1110,
    _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,
    _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,
    _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,
    _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,
    _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,
    _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,
    _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,
    _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,
    _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,
    _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147,
    _CS_V6_ENV = 1148,
    _CS_V7_ENV = 1149,
}
extern "C" {
    pub fn pathconf(__path: *const ::std::os::raw::c_char,
                    __name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(__fd: ::std::os::raw::c_int,
                     __name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(__name: ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(__fd: ::std::os::raw::c_int,
                     __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(__from: *const ::std::os::raw::c_char,
                __to: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(__fromfd: ::std::os::raw::c_int,
                  __from: *const ::std::os::raw::c_char,
                  __tofd: ::std::os::raw::c_int,
                  __to: *const ::std::os::raw::c_char,
                  __flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(__from: *const ::std::os::raw::c_char,
                   __to: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(__path: *const ::std::os::raw::c_char,
                    __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> isize;
}
extern "C" {
    pub fn symlinkat(__from: *const ::std::os::raw::c_char,
                     __tofd: ::std::os::raw::c_int,
                     __to: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(__fd: ::std::os::raw::c_int,
                      __path: *const ::std::os::raw::c_char,
                      __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(__fd: ::std::os::raw::c_int,
                    __name: *const ::std::os::raw::c_char,
                    __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(__name: *mut ::std::os::raw::c_char, __name_len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "optarg"]
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "optind"]
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "opterr"]
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "optopt"]
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(___argc: ::std::os::raw::c_int,
                  ___argv: *const *const ::std::os::raw::c_char,
                  __shortopts: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(__name: *const ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(__name: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(__name: *const ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(__sample_buffer: *mut ::std::os::raw::c_ushort,
                  __size: usize, __offset: usize,
                  __scale: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(__nochdir: ::std::os::raw::c_int,
                  __noclose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(__file: *const ::std::os::raw::c_char, __length: __off_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(::std::mem::size_of::<sched_param>() , 4usize , concat ! (
               "Size of: " , stringify ! ( sched_param ) ));
    assert_eq! (::std::mem::align_of::<sched_param>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( sched_param ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sched_param ) ) . __sched_priority as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sched_param ) , "::" ,
                stringify ! ( __sched_priority ) ));
}
impl Clone for sched_param {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sched_param() {
    assert_eq!(::std::mem::size_of::<__sched_param>() , 4usize , concat ! (
               "Size of: " , stringify ! ( __sched_param ) ));
    assert_eq! (::std::mem::align_of::<__sched_param>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __sched_param ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sched_param ) ) . __sched_priority as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sched_param ) , "::"
                , stringify ! ( __sched_priority ) ));
}
impl Clone for __sched_param {
    fn clone(&self) -> Self { *self }
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    assert_eq!(::std::mem::size_of::<cpu_set_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( cpu_set_t ) ));
    assert_eq! (::std::mem::align_of::<cpu_set_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( cpu_set_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cpu_set_t ) ) . __bits as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( cpu_set_t ) , "::" ,
                stringify ! ( __bits ) ));
}
impl Clone for cpu_set_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(__pid: __pid_t, __policy: ::std::os::raw::c_int,
                              __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec)
     -> ::std::os::raw::c_int;
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_21 =
    _bindgen_ty_21::PTHREAD_CREATE_JOINABLE;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_21 =
    _bindgen_ty_21::PTHREAD_CREATE_DETACHED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_21 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1,
}
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_22 =
    _bindgen_ty_22::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_22 =
    _bindgen_ty_22::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_22 =
    _bindgen_ty_22::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_22 =
    _bindgen_ty_22::PTHREAD_MUTEX_ADAPTIVE_NP;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_22 =
    _bindgen_ty_22::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_22 =
    _bindgen_ty_22::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_22 =
    _bindgen_ty_22::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_22 =
    _bindgen_ty_22::PTHREAD_MUTEX_TIMED_NP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_22 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
}
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_23 =
    _bindgen_ty_23::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_23 =
    _bindgen_ty_23::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_23 =
    _bindgen_ty_23::PTHREAD_MUTEX_ROBUST;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_23 =
    _bindgen_ty_23::PTHREAD_MUTEX_ROBUST;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_23 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_ROBUST = 1,
}
pub const PTHREAD_PRIO_NONE: _bindgen_ty_24 =
    _bindgen_ty_24::PTHREAD_PRIO_NONE;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_24 =
    _bindgen_ty_24::PTHREAD_PRIO_INHERIT;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_24 =
    _bindgen_ty_24::PTHREAD_PRIO_PROTECT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_24 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2,
}
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_25 =
    _bindgen_ty_25::PTHREAD_RWLOCK_PREFER_READER_NP;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_25 =
    _bindgen_ty_25::PTHREAD_RWLOCK_PREFER_WRITER_NP;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_25 =
    _bindgen_ty_25::PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_25 =
    _bindgen_ty_25::PTHREAD_RWLOCK_PREFER_READER_NP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_25 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
}
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_26 =
    _bindgen_ty_26::PTHREAD_INHERIT_SCHED;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_26 =
    _bindgen_ty_26::PTHREAD_EXPLICIT_SCHED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_26 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1,
}
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_27 =
    _bindgen_ty_27::PTHREAD_SCOPE_SYSTEM;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_27 =
    _bindgen_ty_27::PTHREAD_SCOPE_PROCESS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_27 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1,
}
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_28 =
    _bindgen_ty_28::PTHREAD_PROCESS_PRIVATE;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_28 =
    _bindgen_ty_28::PTHREAD_PROCESS_SHARED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_28 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    assert_eq!(::std::mem::size_of::<_pthread_cleanup_buffer>() , 32usize ,
               concat ! (
               "Size of: " , stringify ! ( _pthread_cleanup_buffer ) ));
    assert_eq! (::std::mem::align_of::<_pthread_cleanup_buffer>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _pthread_cleanup_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _pthread_cleanup_buffer ) ) . __routine
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _pthread_cleanup_buffer
                ) , "::" , stringify ! ( __routine ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _pthread_cleanup_buffer ) ) . __arg as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _pthread_cleanup_buffer
                ) , "::" , stringify ! ( __arg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _pthread_cleanup_buffer ) ) .
                __canceltype as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _pthread_cleanup_buffer
                ) , "::" , stringify ! ( __canceltype ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _pthread_cleanup_buffer ) ) . __prev as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _pthread_cleanup_buffer
                ) , "::" , stringify ! ( __prev ) ));
}
impl Clone for _pthread_cleanup_buffer {
    fn clone(&self) -> Self { *self }
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_29 =
    _bindgen_ty_29::PTHREAD_CANCEL_ENABLE;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_29 =
    _bindgen_ty_29::PTHREAD_CANCEL_DISABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_29 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1,
}
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_30 =
    _bindgen_ty_30::PTHREAD_CANCEL_DEFERRED;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_30 =
    _bindgen_ty_30::PTHREAD_CANCEL_ASYNCHRONOUS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_30 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1,
}
extern "C" {
    pub fn pthread_create(__newthread: *mut pthread_t,
                          __attr: *const pthread_attr_t,
                          __start_routine:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut ::std::os::raw::c_void)
                                                        ->
                                                            *mut ::std::os::raw::c_void>,
                          __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(__th: pthread_t,
                        __thread_return: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(__attr: *const pthread_attr_t,
                                       __detachstate:
                                           *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(__attr: *mut pthread_attr_t,
                                       __detachstate: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(__attr: *const pthread_attr_t,
                                     __guardsize: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(__attr: *mut pthread_attr_t,
                                     __guardsize: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(__attr: *const pthread_attr_t,
                                      __param: *mut sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(__attr: *mut pthread_attr_t,
                                      __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(__attr: *const pthread_attr_t,
                                       __policy: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(__attr: *mut pthread_attr_t,
                                       __policy: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(__attr: *const pthread_attr_t,
                                        __inherit: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(__attr: *mut pthread_attr_t,
                                        __inherit: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(__attr: *const pthread_attr_t,
                                 __scope: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(__attr: *mut pthread_attr_t,
                                 __scope: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(__attr: *const pthread_attr_t,
                                     __stackaddr:
                                         *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(__attr: *mut pthread_attr_t,
                                     __stackaddr: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(__attr: *const pthread_attr_t,
                                     __stacksize: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(__attr: *mut pthread_attr_t,
                                     __stacksize: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(__attr: *const pthread_attr_t,
                                 __stackaddr:
                                     *mut *mut ::std::os::raw::c_void,
                                 __stacksize: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(__attr: *mut pthread_attr_t,
                                 __stackaddr: *mut ::std::os::raw::c_void,
                                 __stacksize: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(__target_thread: pthread_t,
                                 __policy: ::std::os::raw::c_int,
                                 __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(__target_thread: pthread_t,
                                 __policy: *mut ::std::os::raw::c_int,
                                 __param: *mut sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(__target_thread: pthread_t,
                                __prio: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(__once_control: *mut pthread_once_t,
                        __init_routine:
                            ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(__state: ::std::os::raw::c_int,
                                  __oldstate: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(__type: ::std::os::raw::c_int,
                                 __oldtype: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>() ,
               72usize , concat ! (
               "Size of: " , stringify ! (
               __pthread_unwind_buf_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                __pthread_unwind_buf_t__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_unwind_buf_t__bindgen_ty_1 ) )
                . __cancel_jmp_buf as * const _ as usize } , 0usize , concat !
                (
                "Alignment of field: " , stringify ! (
                __pthread_unwind_buf_t__bindgen_ty_1 ) , "::" , stringify ! (
                __cancel_jmp_buf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_unwind_buf_t__bindgen_ty_1 ) )
                . __mask_was_saved as * const _ as usize } , 64usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                __pthread_unwind_buf_t__bindgen_ty_1 ) , "::" , stringify ! (
                __mask_was_saved ) ));
}
impl Clone for __pthread_unwind_buf_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    assert_eq!(::std::mem::size_of::<__pthread_unwind_buf_t>() , 104usize ,
               concat ! ( "Size of: " , stringify ! ( __pthread_unwind_buf_t )
               ));
    assert_eq! (::std::mem::align_of::<__pthread_unwind_buf_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __pthread_unwind_buf_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_unwind_buf_t ) ) .
                __cancel_jmp_buf as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_unwind_buf_t
                ) , "::" , stringify ! ( __cancel_jmp_buf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_unwind_buf_t ) ) . __pad as *
                const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_unwind_buf_t
                ) , "::" , stringify ! ( __pad ) ));
}
impl Clone for __pthread_unwind_buf_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    assert_eq!(::std::mem::size_of::<__pthread_cleanup_frame>() , 24usize ,
               concat ! (
               "Size of: " , stringify ! ( __pthread_cleanup_frame ) ));
    assert_eq! (::std::mem::align_of::<__pthread_cleanup_frame>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __pthread_cleanup_frame ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_cleanup_frame ) ) .
                __cancel_routine as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_cleanup_frame
                ) , "::" , stringify ! ( __cancel_routine ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_cleanup_frame ) ) .
                __cancel_arg as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_cleanup_frame
                ) , "::" , stringify ! ( __cancel_arg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_cleanup_frame ) ) . __do_it as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_cleanup_frame
                ) , "::" , stringify ! ( __do_it ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_cleanup_frame ) ) .
                __cancel_type as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_cleanup_frame
                ) , "::" , stringify ! ( __cancel_type ) ));
}
impl Clone for __pthread_cleanup_frame {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn pthread_mutex_init(__mutex: *mut pthread_mutex_t,
                              __mutexattr: *const pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(__mutex: *mut pthread_mutex_t,
                                   __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(__mutex: *const pthread_mutex_t,
                                        __prioceiling:
                                            *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(__mutex: *mut pthread_mutex_t,
                                        __prioceiling: ::std::os::raw::c_int,
                                        __old_ceiling:
                                            *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(__attr: *const pthread_mutexattr_t,
                                        __pshared: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(__attr: *mut pthread_mutexattr_t,
                                        __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(__attr: *const pthread_mutexattr_t,
                                     __kind: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(__attr: *mut pthread_mutexattr_t,
                                     __kind: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(__attr: *const pthread_mutexattr_t,
                                         __protocol:
                                             *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(__attr: *mut pthread_mutexattr_t,
                                         __protocol: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(__attr:
                                                *const pthread_mutexattr_t,
                                            __prioceiling:
                                                *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(__attr: *mut pthread_mutexattr_t,
                                            __prioceiling:
                                                ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(__attr: *const pthread_mutexattr_t,
                                       __robustness:
                                           *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(__attr: *mut pthread_mutexattr_t,
                                       __robustness: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(__rwlock: *mut pthread_rwlock_t,
                               __attr: *const pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(__attr: *const pthread_rwlockattr_t,
                                         __pshared:
                                             *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(__attr: *mut pthread_rwlockattr_t,
                                         __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(__attr: *const pthread_rwlockattr_t,
                                         __pref: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(__attr: *mut pthread_rwlockattr_t,
                                         __pref: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(__cond: *mut pthread_cond_t,
                             __cond_attr: *const pthread_condattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(__cond: *mut pthread_cond_t,
                             __mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(__cond: *mut pthread_cond_t,
                                  __mutex: *mut pthread_mutex_t,
                                  __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(__attr: *const pthread_condattr_t,
                                       __pshared: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(__attr: *mut pthread_condattr_t,
                                       __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(__attr: *const pthread_condattr_t,
                                     __clock_id: *mut __clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(__attr: *mut pthread_condattr_t,
                                     __clock_id: __clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(__lock: *mut pthread_spinlock_t,
                             __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(__barrier: *mut pthread_barrier_t,
                                __attr: *const pthread_barrierattr_t,
                                __count: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(__attr:
                                              *const pthread_barrierattr_t,
                                          __pshared:
                                              *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(__attr: *mut pthread_barrierattr_t,
                                          __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(__key: *mut pthread_key_t,
                              __destr_function:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(__key: pthread_key_t,
                               __pointer: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(__thread_id: pthread_t,
                                 __clock_id: *mut __clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(__prepare:
                              ::std::option::Option<unsafe extern "C" fn()>,
                          __parent:
                              ::std::option::Option<unsafe extern "C" fn()>,
                          __child:
                              ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    assert_eq!(::std::mem::size_of::<dirent>() , 280usize , concat ! (
               "Size of: " , stringify ! ( dirent ) ));
    assert_eq! (::std::mem::align_of::<dirent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( dirent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent ) ) . d_ino as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent ) , "::" ,
                stringify ! ( d_ino ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent ) ) . d_off as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent ) , "::" ,
                stringify ! ( d_off ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent ) ) . d_reclen as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent ) , "::" ,
                stringify ! ( d_reclen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent ) ) . d_type as * const _ as usize
                } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent ) , "::" ,
                stringify ! ( d_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent ) ) . d_name as * const _ as usize
                } , 19usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent ) , "::" ,
                stringify ! ( d_name ) ));
}
pub const DT_UNKNOWN: _bindgen_ty_31 = _bindgen_ty_31::DT_UNKNOWN;
pub const DT_FIFO: _bindgen_ty_31 = _bindgen_ty_31::DT_FIFO;
pub const DT_CHR: _bindgen_ty_31 = _bindgen_ty_31::DT_CHR;
pub const DT_DIR: _bindgen_ty_31 = _bindgen_ty_31::DT_DIR;
pub const DT_BLK: _bindgen_ty_31 = _bindgen_ty_31::DT_BLK;
pub const DT_REG: _bindgen_ty_31 = _bindgen_ty_31::DT_REG;
pub const DT_LNK: _bindgen_ty_31 = _bindgen_ty_31::DT_LNK;
pub const DT_SOCK: _bindgen_ty_31 = _bindgen_ty_31::DT_SOCK;
pub const DT_WHT: _bindgen_ty_31 = _bindgen_ty_31::DT_WHT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_31 {
    DT_UNKNOWN = 0,
    DT_FIFO = 1,
    DT_CHR = 2,
    DT_DIR = 4,
    DT_BLK = 6,
    DT_REG = 8,
    DT_LNK = 10,
    DT_SOCK = 12,
    DT_WHT = 14,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
extern "C" {
    pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    pub fn closedir(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readdir(__dirp: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir_r(__dirp: *mut DIR, __entry: *mut dirent,
                     __result: *mut *mut dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewinddir(__dirp: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dirp: *mut DIR, __pos: ::std::os::raw::c_long);
}
extern "C" {
    pub fn telldir(__dirp: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dirfd(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir(__dir: *const ::std::os::raw::c_char,
                   __namelist: *mut *mut *mut dirent,
                   __selector:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const dirent)
                                                 -> ::std::os::raw::c_int>,
                   __cmp:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut *const dirent,
                                                                  arg2:
                                                                      *mut *const dirent)
                                                 -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alphasort(__e1: *mut *const dirent, __e2: *mut *const dirent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentries(__fd: ::std::os::raw::c_int,
                         __buf: *mut ::std::os::raw::c_char, __nbytes: usize,
                         __basep: *mut __off_t) -> __ssize_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: __uid_t,
    pub pw_gid: __gid_t,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_passwd() {
    assert_eq!(::std::mem::size_of::<passwd>() , 48usize , concat ! (
               "Size of: " , stringify ! ( passwd ) ));
    assert_eq! (::std::mem::align_of::<passwd>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( passwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_passwd as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_passwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_uid as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_gid as * const _ as usize
                } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_gid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_gecos as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_gecos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_dir as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_dir ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_shell as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_shell ) ));
}
impl Clone for passwd {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn fgetpwent(__stream: *mut FILE) -> *mut passwd;
}
extern "C" {
    pub fn putpwent(__p: *const passwd, __f: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid(__uid: __uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(__name: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwent_r(__resultbuf: *mut passwd,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid_r(__uid: __uid_t, __resultbuf: *mut passwd,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(__name: *const ::std::os::raw::c_char,
                      __resultbuf: *mut passwd,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpwent_r(__stream: *mut FILE, __resultbuf: *mut passwd,
                       __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                       __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: __gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_group() {
    assert_eq!(::std::mem::size_of::<group>() , 32usize , concat ! (
               "Size of: " , stringify ! ( group ) ));
    assert_eq! (::std::mem::align_of::<group>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( group ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group ) ) . gr_name as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( group ) , "::" ,
                stringify ! ( gr_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group ) ) . gr_passwd as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( group ) , "::" ,
                stringify ! ( gr_passwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group ) ) . gr_gid as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( group ) , "::" ,
                stringify ! ( gr_gid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group ) ) . gr_mem as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( group ) , "::" ,
                stringify ! ( gr_mem ) ));
}
impl Clone for group {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setgrent();
}
extern "C" {
    pub fn endgrent();
}
extern "C" {
    pub fn getgrent() -> *mut group;
}
extern "C" {
    pub fn fgetgrent(__stream: *mut FILE) -> *mut group;
}
extern "C" {
    pub fn getgrgid(__gid: __gid_t) -> *mut group;
}
extern "C" {
    pub fn getgrnam(__name: *const ::std::os::raw::c_char) -> *mut group;
}
extern "C" {
    pub fn getgrgid_r(__gid: __gid_t, __resultbuf: *mut group,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrnam_r(__name: *const ::std::os::raw::c_char,
                      __resultbuf: *mut group,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetgrent_r(__stream: *mut FILE, __resultbuf: *mut group,
                       __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                       __result: *mut *mut group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(__n: usize, __groups: *const __gid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(__user: *const ::std::os::raw::c_char,
                        __group: __gid_t, __groups: *mut __gid_t,
                        __ngroups: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(__user: *const ::std::os::raw::c_char, __group: __gid_t)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct utimbuf {
    pub actime: __time_t,
    pub modtime: __time_t,
}
#[test]
fn bindgen_test_layout_utimbuf() {
    assert_eq!(::std::mem::size_of::<utimbuf>() , 16usize , concat ! (
               "Size of: " , stringify ! ( utimbuf ) ));
    assert_eq! (::std::mem::align_of::<utimbuf>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( utimbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const utimbuf ) ) . actime as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( utimbuf ) , "::" ,
                stringify ! ( actime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const utimbuf ) ) . modtime as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( utimbuf ) , "::" ,
                stringify ! ( modtime ) ));
}
impl Clone for utimbuf {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn utime(__file: *const ::std::os::raw::c_char,
                 __file_times: *const utimbuf) -> ::std::os::raw::c_int;
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(::std::mem::size_of::<imaxdiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( imaxdiv_t ) ));
    assert_eq! (::std::mem::align_of::<imaxdiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( imaxdiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imaxdiv_t ) ) . quot as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( imaxdiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imaxdiv_t ) ) . rem as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( imaxdiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for imaxdiv_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
}
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(__ident: *const ::std::os::raw::c_char,
                   __option: ::std::os::raw::c_int,
                   __facility: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setlogmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syslog(__pri: ::std::os::raw::c_int,
                  __fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(__pri: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char,
                   __ap: *mut __va_list_tag);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(::std::mem::size_of::<timezone>() , 8usize , concat ! (
               "Size of: " , stringify ! ( timezone ) ));
    assert_eq! (::std::mem::align_of::<timezone>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( timezone ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timezone ) ) . tz_minuteswest as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timezone ) , "::" ,
                stringify ! ( tz_minuteswest ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timezone ) ) . tz_dsttime as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( timezone ) , "::" ,
                stringify ! ( tz_dsttime ) ));
}
impl Clone for timezone {
    fn clone(&self) -> Self { *self }
}
pub type __timezone_ptr_t = *mut timezone;
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: __timezone_ptr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __itimer_which {
    ITIMER_REAL = 0,
    ITIMER_VIRTUAL = 1,
    ITIMER_PROF = 2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(::std::mem::size_of::<itimerval>() , 32usize , concat ! (
               "Size of: " , stringify ! ( itimerval ) ));
    assert_eq! (::std::mem::align_of::<itimerval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( itimerval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerval ) ) . it_interval as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerval ) , "::" ,
                stringify ! ( it_interval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerval ) ) . it_value as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerval ) , "::" ,
                stringify ! ( it_value ) ));
}
impl Clone for itimerval {
    fn clone(&self) -> Self { *self }
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(__which: __itimer_which_t, __new: *const itimerval,
                     __old: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(__file: *const ::std::os::raw::c_char,
                  __tvp: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(__file: *const ::std::os::raw::c_char,
                   __tvp: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(__fd: ::std::os::raw::c_int,
                   __file: *const ::std::os::raw::c_char, __buf: *mut stat,
                   __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(__fd: ::std::os::raw::c_int,
                    __file: *const ::std::os::raw::c_char, __mode: __mode_t,
                    __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(__fd: ::std::os::raw::c_int,
                   __path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(__path: *const ::std::os::raw::c_char, __mode: __mode_t,
                 __dev: __dev_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(__fd: ::std::os::raw::c_int,
                   __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                   __dev: __dev_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(__fd: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(__fd: ::std::os::raw::c_int,
                     __path: *const ::std::os::raw::c_char,
                     __times: *const timespec, __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstat(__ver: ::std::os::raw::c_int,
                    __fildes: ::std::os::raw::c_int, __stat_buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xstat(__ver: ::std::os::raw::c_int,
                   __filename: *const ::std::os::raw::c_char,
                   __stat_buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __lxstat(__ver: ::std::os::raw::c_int,
                    __filename: *const ::std::os::raw::c_char,
                    __stat_buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstatat(__ver: ::std::os::raw::c_int,
                      __fildes: ::std::os::raw::c_int,
                      __filename: *const ::std::os::raw::c_char,
                      __stat_buf: *mut stat, __flag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknod(__ver: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                    __dev: *mut __dev_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknodat(__ver: ::std::os::raw::c_int,
                      __fd: ::std::os::raw::c_int,
                      __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                      __dev: *mut __dev_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_winsize() {
    assert_eq!(::std::mem::size_of::<winsize>() , 8usize , concat ! (
               "Size of: " , stringify ! ( winsize ) ));
    assert_eq! (::std::mem::align_of::<winsize>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( winsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const winsize ) ) . ws_row as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( winsize ) , "::" ,
                stringify ! ( ws_row ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const winsize ) ) . ws_col as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( winsize ) , "::" ,
                stringify ! ( ws_col ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const winsize ) ) . ws_xpixel as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( winsize ) , "::" ,
                stringify ! ( ws_xpixel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const winsize ) ) . ws_ypixel as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( winsize ) , "::" ,
                stringify ! ( ws_ypixel ) ));
}
impl Clone for winsize {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct termio {
    pub c_iflag: ::std::os::raw::c_ushort,
    pub c_oflag: ::std::os::raw::c_ushort,
    pub c_cflag: ::std::os::raw::c_ushort,
    pub c_lflag: ::std::os::raw::c_ushort,
    pub c_line: ::std::os::raw::c_uchar,
    pub c_cc: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_termio() {
    assert_eq!(::std::mem::size_of::<termio>() , 18usize , concat ! (
               "Size of: " , stringify ! ( termio ) ));
    assert_eq! (::std::mem::align_of::<termio>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( termio ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_iflag as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_iflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_oflag as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_oflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_cflag as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_cflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_lflag as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_lflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_line as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_line ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_cc as * const _ as usize }
                , 9usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_cc ) ));
}
impl Clone for termio {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn ioctl(__fd: ::std::os::raw::c_int,
                 __request: ::std::os::raw::c_ulong, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flock(__fd: ::std::os::raw::c_int,
                 __operation: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait(__stat_loc: __WAIT_STATUS) -> __pid_t;
}
extern "C" {
    pub fn waitpid(__pid: __pid_t, __stat_loc: *mut ::std::os::raw::c_int,
                   __options: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn waitid(__idtype: idtype_t, __id: __id_t, __infop: *mut siginfo_t,
                  __options: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wait3(__stat_loc: __WAIT_STATUS, __options: ::std::os::raw::c_int,
                 __usage: *mut rusage) -> __pid_t;
}
extern "C" {
    pub fn wait4(__pid: __pid_t, __stat_loc: __WAIT_STATUS,
                 __options: ::std::os::raw::c_int, __usage: *mut rusage)
     -> __pid_t;
}
#[repr(C)]
pub struct sockaddr_un {
    pub sun_family: sa_family_t,
    pub sun_path: [::std::os::raw::c_char; 108usize],
}
#[test]
fn bindgen_test_layout_sockaddr_un() {
    assert_eq!(::std::mem::size_of::<sockaddr_un>() , 110usize , concat ! (
               "Size of: " , stringify ! ( sockaddr_un ) ));
    assert_eq! (::std::mem::align_of::<sockaddr_un>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( sockaddr_un ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_un ) ) . sun_family as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_un ) , "::" ,
                stringify ! ( sun_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_un ) ) . sun_path as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_un ) , "::" ,
                stringify ! ( sun_path ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ifaddrs {
    pub ifa_next: *mut ifaddrs,
    pub ifa_name: *mut ::std::os::raw::c_char,
    pub ifa_flags: ::std::os::raw::c_uint,
    pub ifa_addr: *mut sockaddr,
    pub ifa_netmask: *mut sockaddr,
    pub ifa_ifu: ifaddrs__bindgen_ty_1,
    pub ifa_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ifaddrs__bindgen_ty_1 {
    pub ifu_broadaddr: __BindgenUnionField<*mut sockaddr>,
    pub ifu_dstaddr: __BindgenUnionField<*mut sockaddr>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_ifaddrs__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<ifaddrs__bindgen_ty_1>() , 8usize ,
               concat ! ( "Size of: " , stringify ! ( ifaddrs__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<ifaddrs__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( ifaddrs__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ifaddrs__bindgen_ty_1 ) ) . ifu_broadaddr
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ifaddrs__bindgen_ty_1 )
                , "::" , stringify ! ( ifu_broadaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ifaddrs__bindgen_ty_1 ) ) . ifu_dstaddr
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ifaddrs__bindgen_ty_1 )
                , "::" , stringify ! ( ifu_dstaddr ) ));
}
impl Clone for ifaddrs__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_ifaddrs() {
    assert_eq!(::std::mem::size_of::<ifaddrs>() , 56usize , concat ! (
               "Size of: " , stringify ! ( ifaddrs ) ));
    assert_eq! (::std::mem::align_of::<ifaddrs>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ifaddrs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ifaddrs ) ) . ifa_next as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ifaddrs ) , "::" ,
                stringify ! ( ifa_next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ifaddrs ) ) . ifa_name as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ifaddrs ) , "::" ,
                stringify ! ( ifa_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ifaddrs ) ) . ifa_flags as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( ifaddrs ) , "::" ,
                stringify ! ( ifa_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ifaddrs ) ) . ifa_addr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( ifaddrs ) , "::" ,
                stringify ! ( ifa_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ifaddrs ) ) . ifa_netmask as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( ifaddrs ) , "::" ,
                stringify ! ( ifa_netmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ifaddrs ) ) . ifa_ifu as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( ifaddrs ) , "::" ,
                stringify ! ( ifa_ifu ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ifaddrs ) ) . ifa_data as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( ifaddrs ) , "::" ,
                stringify ! ( ifa_data ) ));
}
impl Clone for ifaddrs {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn getifaddrs(__ifap: *mut *mut ifaddrs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeifaddrs(__ifa: *mut ifaddrs);
}
extern "C" {
    pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_lnaof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(__in: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(__af: ::std::os::raw::c_int,
                     __cp: *const ::std::os::raw::c_char,
                     __buf: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_ntop(__af: ::std::os::raw::c_int,
                     __cp: *const ::std::os::raw::c_void,
                     __buf: *mut ::std::os::raw::c_char, __len: socklen_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(__cp: *const ::std::os::raw::c_char, __inp: *mut in_addr)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(__net: in_addr_t, __buf: *mut ::std::os::raw::c_char,
                     __len: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_ntop(__af: ::std::os::raw::c_int,
                         __cp: *const ::std::os::raw::c_void,
                         __bits: ::std::os::raw::c_int,
                         __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(__af: ::std::os::raw::c_int,
                         __cp: *const ::std::os::raw::c_char,
                         __buf: *mut ::std::os::raw::c_void, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_nsap_addr(__cp: *const ::std::os::raw::c_char,
                          __buf: *mut ::std::os::raw::c_uchar,
                          __len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(__len: ::std::os::raw::c_int,
                          __cp: *const ::std::os::raw::c_uchar,
                          __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type tcp_seq = u_int32_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tcphdr {
    pub __bindgen_anon_1: tcphdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tcphdr__bindgen_ty_1 {
    pub __bindgen_anon_1: __BindgenUnionField<tcphdr__bindgen_ty_1__bindgen_ty_1>,
    pub __bindgen_anon_2: __BindgenUnionField<tcphdr__bindgen_ty_1__bindgen_ty_2>,
    pub bindgen_union_field: [u32; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tcphdr__bindgen_ty_1__bindgen_ty_1 {
    pub th_sport: u_int16_t,
    pub th_dport: u_int16_t,
    pub th_seq: tcp_seq,
    pub th_ack: tcp_seq,
    pub _bitfield_1: u8,
    pub th_flags: u_int8_t,
    pub th_win: u_int16_t,
    pub th_sum: u_int16_t,
    pub th_urp: u_int16_t,
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<tcphdr__bindgen_ty_1__bindgen_ty_1>() ,
               20usize , concat ! (
               "Size of: " , stringify ! ( tcphdr__bindgen_ty_1__bindgen_ty_1
               ) ));
    assert_eq! (::std::mem::align_of::<tcphdr__bindgen_ty_1__bindgen_ty_1>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_1 ) ) .
                th_sport as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                th_sport ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_1 ) ) .
                th_dport as * const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                th_dport ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_1 ) ) .
                th_seq as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                th_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_1 ) ) .
                th_ack as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                th_ack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_1 ) ) .
                th_flags as * const _ as usize } , 13usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                th_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_1 ) ) .
                th_win as * const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                th_win ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_1 ) ) .
                th_sum as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                th_sum ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_1 ) ) .
                th_urp as * const _ as usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                th_urp ) ));
}
impl Clone for tcphdr__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl tcphdr__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn th_x2(&self) -> u_int8_t {
        let mask = 15usize as u8;
        let unit_field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u8) }
    }
    #[inline]
    pub fn set_th_x2(&mut self, val: u_int8_t) {
        let mask = 15usize as u8;
        let val = val as u8 as u8;
        let mut unit_field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn th_off(&self) -> u_int8_t {
        let mask = 240usize as u8;
        let unit_field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 4usize;
        unsafe { ::std::mem::transmute(val as u8) }
    }
    #[inline]
    pub fn set_th_off(&mut self, val: u_int8_t) {
        let mask = 240usize as u8;
        let val = val as u8 as u8;
        let mut unit_field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 4usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn new_bitfield_1(th_x2: u_int8_t, th_off: u_int8_t) -> u8 {
        ({ ({ 0 } | ((th_x2 as u8 as u8) << 0usize) & (15usize as u8)) } |
             ((th_off as u8 as u8) << 4usize) & (240usize as u8))
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tcphdr__bindgen_ty_1__bindgen_ty_2 {
    pub source: u_int16_t,
    pub dest: u_int16_t,
    pub seq: u_int32_t,
    pub ack_seq: u_int32_t,
    pub _bitfield_1: [u8; 2usize],
    pub window: u_int16_t,
    pub check: u_int16_t,
    pub urg_ptr: u_int16_t,
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<tcphdr__bindgen_ty_1__bindgen_ty_2>() ,
               20usize , concat ! (
               "Size of: " , stringify ! ( tcphdr__bindgen_ty_1__bindgen_ty_2
               ) ));
    assert_eq! (::std::mem::align_of::<tcphdr__bindgen_ty_1__bindgen_ty_2>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_2 ) ) .
                source as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                source ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_2 ) ) .
                dest as * const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                dest ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_2 ) ) .
                seq as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_2 ) ) .
                ack_seq as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                ack_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_2 ) ) .
                window as * const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                window ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_2 ) ) .
                check as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                check ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcphdr__bindgen_ty_1__bindgen_ty_2 ) ) .
                urg_ptr as * const _ as usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! (
                tcphdr__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                urg_ptr ) ));
}
impl Clone for tcphdr__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
impl tcphdr__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn res1(&self) -> u_int16_t {
        let mask = 15usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set_res1(&mut self, val: u_int16_t) {
        let mask = 15usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn doff(&self) -> u_int16_t {
        let mask = 240usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 4usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set_doff(&mut self, val: u_int16_t) {
        let mask = 240usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 4usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn fin(&self) -> u_int16_t {
        let mask = 256usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set_fin(&mut self, val: u_int16_t) {
        let mask = 256usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn syn(&self) -> u_int16_t {
        let mask = 512usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 9usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set_syn(&mut self, val: u_int16_t) {
        let mask = 512usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 9usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn rst(&self) -> u_int16_t {
        let mask = 1024usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 10usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set_rst(&mut self, val: u_int16_t) {
        let mask = 1024usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 10usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn psh(&self) -> u_int16_t {
        let mask = 2048usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 11usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set_psh(&mut self, val: u_int16_t) {
        let mask = 2048usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 11usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn ack(&self) -> u_int16_t {
        let mask = 4096usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 12usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set_ack(&mut self, val: u_int16_t) {
        let mask = 4096usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 12usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn urg(&self) -> u_int16_t {
        let mask = 8192usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 13usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set_urg(&mut self, val: u_int16_t) {
        let mask = 8192usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 13usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn res2(&self) -> u_int16_t {
        let mask = 49152usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 14usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set_res2(&mut self, val: u_int16_t) {
        let mask = 49152usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 14usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn new_bitfield_1(res1: u_int16_t, doff: u_int16_t, fin: u_int16_t,
                          syn: u_int16_t, rst: u_int16_t, psh: u_int16_t,
                          ack: u_int16_t, urg: u_int16_t, res2: u_int16_t)
     -> u16 {
        ({
             ({
                  ({
                       ({
                            ({
                                 ({
                                      ({
                                           ({
                                                ({ 0 } |
                                                     ((res1 as u16 as u16) <<
                                                          0usize) &
                                                         (15usize as u16))
                                            } |
                                                ((doff as u16 as u16) <<
                                                     4usize) &
                                                    (240usize as u16))
                                       } |
                                           ((fin as u16 as u16) << 8usize) &
                                               (256usize as u16))
                                  } |
                                      ((syn as u16 as u16) << 9usize) &
                                          (512usize as u16))
                             } |
                                 ((rst as u16 as u16) << 10usize) &
                                     (1024usize as u16))
                        } |
                            ((psh as u16 as u16) << 11usize) &
                                (2048usize as u16))
                   } | ((ack as u16 as u16) << 12usize) & (4096usize as u16))
              } | ((urg as u16 as u16) << 13usize) & (8192usize as u16))
         } | ((res2 as u16 as u16) << 14usize) & (49152usize as u16))
    }
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<tcphdr__bindgen_ty_1>() , 20usize ,
               concat ! ( "Size of: " , stringify ! ( tcphdr__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<tcphdr__bindgen_ty_1>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( tcphdr__bindgen_ty_1 ) ));
}
impl Clone for tcphdr__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_tcphdr() {
    assert_eq!(::std::mem::size_of::<tcphdr>() , 20usize , concat ! (
               "Size of: " , stringify ! ( tcphdr ) ));
    assert_eq! (::std::mem::align_of::<tcphdr>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( tcphdr ) ));
}
impl Clone for tcphdr {
    fn clone(&self) -> Self { *self }
}
pub const TCP_ESTABLISHED: _bindgen_ty_32 = _bindgen_ty_32::TCP_ESTABLISHED;
pub const TCP_SYN_SENT: _bindgen_ty_32 = _bindgen_ty_32::TCP_SYN_SENT;
pub const TCP_SYN_RECV: _bindgen_ty_32 = _bindgen_ty_32::TCP_SYN_RECV;
pub const TCP_FIN_WAIT1: _bindgen_ty_32 = _bindgen_ty_32::TCP_FIN_WAIT1;
pub const TCP_FIN_WAIT2: _bindgen_ty_32 = _bindgen_ty_32::TCP_FIN_WAIT2;
pub const TCP_TIME_WAIT: _bindgen_ty_32 = _bindgen_ty_32::TCP_TIME_WAIT;
pub const TCP_CLOSE: _bindgen_ty_32 = _bindgen_ty_32::TCP_CLOSE;
pub const TCP_CLOSE_WAIT: _bindgen_ty_32 = _bindgen_ty_32::TCP_CLOSE_WAIT;
pub const TCP_LAST_ACK: _bindgen_ty_32 = _bindgen_ty_32::TCP_LAST_ACK;
pub const TCP_LISTEN: _bindgen_ty_32 = _bindgen_ty_32::TCP_LISTEN;
pub const TCP_CLOSING: _bindgen_ty_32 = _bindgen_ty_32::TCP_CLOSING;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_32 {
    TCP_ESTABLISHED = 1,
    TCP_SYN_SENT = 2,
    TCP_SYN_RECV = 3,
    TCP_FIN_WAIT1 = 4,
    TCP_FIN_WAIT2 = 5,
    TCP_TIME_WAIT = 6,
    TCP_CLOSE = 7,
    TCP_CLOSE_WAIT = 8,
    TCP_LAST_ACK = 9,
    TCP_LISTEN = 10,
    TCP_CLOSING = 11,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum tcp_ca_state {
    TCP_CA_Open = 0,
    TCP_CA_Disorder = 1,
    TCP_CA_CWR = 2,
    TCP_CA_Recovery = 3,
    TCP_CA_Loss = 4,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tcp_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_ca_state: u_int8_t,
    pub tcpi_retransmits: u_int8_t,
    pub tcpi_probes: u_int8_t,
    pub tcpi_backoff: u_int8_t,
    pub tcpi_options: u_int8_t,
    pub _bitfield_1: u8,
    pub tcpi_rto: u_int32_t,
    pub tcpi_ato: u_int32_t,
    pub tcpi_snd_mss: u_int32_t,
    pub tcpi_rcv_mss: u_int32_t,
    pub tcpi_unacked: u_int32_t,
    pub tcpi_sacked: u_int32_t,
    pub tcpi_lost: u_int32_t,
    pub tcpi_retrans: u_int32_t,
    pub tcpi_fackets: u_int32_t,
    pub tcpi_last_data_sent: u_int32_t,
    pub tcpi_last_ack_sent: u_int32_t,
    pub tcpi_last_data_recv: u_int32_t,
    pub tcpi_last_ack_recv: u_int32_t,
    pub tcpi_pmtu: u_int32_t,
    pub tcpi_rcv_ssthresh: u_int32_t,
    pub tcpi_rtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_advmss: u_int32_t,
    pub tcpi_reordering: u_int32_t,
    pub tcpi_rcv_rtt: u_int32_t,
    pub tcpi_rcv_space: u_int32_t,
    pub tcpi_total_retrans: u_int32_t,
}
#[test]
fn bindgen_test_layout_tcp_info() {
    assert_eq!(::std::mem::size_of::<tcp_info>() , 104usize , concat ! (
               "Size of: " , stringify ! ( tcp_info ) ));
    assert_eq! (::std::mem::align_of::<tcp_info>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( tcp_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_state as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_ca_state as * const _
                as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_ca_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_retransmits as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_retransmits ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_probes as * const _
                as usize } , 3usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_probes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_backoff as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_backoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_options as * const _
                as usize } , 5usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_options ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_rto as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_rto ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_ato as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_ato ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_snd_mss as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_snd_mss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_rcv_mss as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_rcv_mss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_unacked as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_unacked ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_sacked as * const _
                as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_sacked ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_lost as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_lost ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_retrans as * const _
                as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_retrans ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_fackets as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_fackets ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_last_data_sent as *
                const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_last_data_sent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_last_ack_sent as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_last_ack_sent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_last_data_recv as *
                const _ as usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_last_data_recv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_last_ack_recv as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_last_ack_recv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_pmtu as * const _ as
                usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_pmtu ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_rcv_ssthresh as *
                const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_rcv_ssthresh ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_rtt as * const _ as
                usize } , 68usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_rtt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_rttvar as * const _
                as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_rttvar ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_snd_ssthresh as *
                const _ as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_snd_ssthresh ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_snd_cwnd as * const _
                as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_snd_cwnd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_advmss as * const _
                as usize } , 84usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_advmss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_reordering as * const
                _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_reordering ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_rcv_rtt as * const _
                as usize } , 92usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_rcv_rtt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_rcv_space as * const
                _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_rcv_space ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_info ) ) . tcpi_total_retrans as *
                const _ as usize } , 100usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_info ) , "::" ,
                stringify ! ( tcpi_total_retrans ) ));
}
impl Clone for tcp_info {
    fn clone(&self) -> Self { *self }
}
impl tcp_info {
    #[inline]
    pub fn tcpi_snd_wscale(&self) -> u_int8_t {
        let mask = 15usize as u8;
        let unit_field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u8) }
    }
    #[inline]
    pub fn set_tcpi_snd_wscale(&mut self, val: u_int8_t) {
        let mask = 15usize as u8;
        let val = val as u8 as u8;
        let mut unit_field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn tcpi_rcv_wscale(&self) -> u_int8_t {
        let mask = 240usize as u8;
        let unit_field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 4usize;
        unsafe { ::std::mem::transmute(val as u8) }
    }
    #[inline]
    pub fn set_tcpi_rcv_wscale(&mut self, val: u_int8_t) {
        let mask = 240usize as u8;
        let val = val as u8 as u8;
        let mut unit_field_val: u8 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 4usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn new_bitfield_1(tcpi_snd_wscale: u_int8_t,
                          tcpi_rcv_wscale: u_int8_t) -> u8 {
        ({
             ({ 0 } |
                  ((tcpi_snd_wscale as u8 as u8) << 0usize) & (15usize as u8))
         } | ((tcpi_rcv_wscale as u8 as u8) << 4usize) & (240usize as u8))
    }
}
#[repr(C)]
pub struct tcp_md5sig {
    pub tcpm_addr: sockaddr_storage,
    pub __tcpm_pad1: u_int16_t,
    pub tcpm_keylen: u_int16_t,
    pub __tcpm_pad2: u_int32_t,
    pub tcpm_key: [u_int8_t; 80usize],
}
#[test]
fn bindgen_test_layout_tcp_md5sig() {
    assert_eq!(::std::mem::size_of::<tcp_md5sig>() , 216usize , concat ! (
               "Size of: " , stringify ! ( tcp_md5sig ) ));
    assert_eq! (::std::mem::align_of::<tcp_md5sig>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( tcp_md5sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_md5sig ) ) . tcpm_addr as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_md5sig ) , "::" ,
                stringify ! ( tcpm_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_md5sig ) ) . __tcpm_pad1 as * const _
                as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_md5sig ) , "::" ,
                stringify ! ( __tcpm_pad1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_md5sig ) ) . tcpm_keylen as * const _
                as usize } , 130usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_md5sig ) , "::" ,
                stringify ! ( tcpm_keylen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_md5sig ) ) . __tcpm_pad2 as * const _
                as usize } , 132usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_md5sig ) , "::" ,
                stringify ! ( __tcpm_pad2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_md5sig ) ) . tcpm_key as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_md5sig ) , "::" ,
                stringify ! ( tcpm_key ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tcp_repair_opt {
    pub opt_code: u_int32_t,
    pub opt_val: u_int32_t,
}
#[test]
fn bindgen_test_layout_tcp_repair_opt() {
    assert_eq!(::std::mem::size_of::<tcp_repair_opt>() , 8usize , concat ! (
               "Size of: " , stringify ! ( tcp_repair_opt ) ));
    assert_eq! (::std::mem::align_of::<tcp_repair_opt>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( tcp_repair_opt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_repair_opt ) ) . opt_code as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_repair_opt ) , "::"
                , stringify ! ( opt_code ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_repair_opt ) ) . opt_val as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_repair_opt ) , "::"
                , stringify ! ( opt_val ) ));
}
impl Clone for tcp_repair_opt {
    fn clone(&self) -> Self { *self }
}
pub const TCP_NO_QUEUE: _bindgen_ty_33 = _bindgen_ty_33::TCP_NO_QUEUE;
pub const TCP_RECV_QUEUE: _bindgen_ty_33 = _bindgen_ty_33::TCP_RECV_QUEUE;
pub const TCP_SEND_QUEUE: _bindgen_ty_33 = _bindgen_ty_33::TCP_SEND_QUEUE;
pub const TCP_QUEUES_NR: _bindgen_ty_33 = _bindgen_ty_33::TCP_QUEUES_NR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_33 {
    TCP_NO_QUEUE = 0,
    TCP_RECV_QUEUE = 1,
    TCP_SEND_QUEUE = 2,
    TCP_QUEUES_NR = 3,
}
#[repr(C)]
pub struct tcp_cookie_transactions {
    pub tcpct_flags: u_int16_t,
    pub __tcpct_pad1: u_int8_t,
    pub tcpct_cookie_desired: u_int8_t,
    pub tcpct_s_data_desired: u_int16_t,
    pub tcpct_used: u_int16_t,
    pub tcpct_value: [u_int8_t; 536usize],
}
#[test]
fn bindgen_test_layout_tcp_cookie_transactions() {
    assert_eq!(::std::mem::size_of::<tcp_cookie_transactions>() , 544usize ,
               concat ! (
               "Size of: " , stringify ! ( tcp_cookie_transactions ) ));
    assert_eq! (::std::mem::align_of::<tcp_cookie_transactions>() , 2usize ,
                concat ! (
                "Alignment of " , stringify ! ( tcp_cookie_transactions ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_cookie_transactions ) ) . tcpct_flags
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_cookie_transactions
                ) , "::" , stringify ! ( tcpct_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_cookie_transactions ) ) .
                __tcpct_pad1 as * const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_cookie_transactions
                ) , "::" , stringify ! ( __tcpct_pad1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_cookie_transactions ) ) .
                tcpct_cookie_desired as * const _ as usize } , 3usize , concat
                ! (
                "Alignment of field: " , stringify ! ( tcp_cookie_transactions
                ) , "::" , stringify ! ( tcpct_cookie_desired ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_cookie_transactions ) ) .
                tcpct_s_data_desired as * const _ as usize } , 4usize , concat
                ! (
                "Alignment of field: " , stringify ! ( tcp_cookie_transactions
                ) , "::" , stringify ! ( tcpct_s_data_desired ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_cookie_transactions ) ) . tcpct_used
                as * const _ as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_cookie_transactions
                ) , "::" , stringify ! ( tcpct_used ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tcp_cookie_transactions ) ) . tcpct_value
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( tcp_cookie_transactions
                ) , "::" , stringify ! ( tcpct_value ) ));
}
pub type byte = ::std::os::raw::c_uchar;
pub type dbyte = ::std::os::raw::c_ushort;
pub type qbyte = ::std::os::raw::c_uint;
pub type inaddr_t = sockaddr_in;
pub type in6addr_t = sockaddr_in6;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct inaddr_storage_t {
    pub __inaddr_u: inaddr_storage_t__bindgen_ty_1,
    pub inaddrlen: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct inaddr_storage_t__bindgen_ty_1 {
    pub __addr: __BindgenUnionField<inaddr_t>,
    pub __addr6: __BindgenUnionField<in6addr_t>,
    pub bindgen_union_field: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_inaddr_storage_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<inaddr_storage_t__bindgen_ty_1>() ,
               28usize , concat ! (
               "Size of: " , stringify ! ( inaddr_storage_t__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<inaddr_storage_t__bindgen_ty_1>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( inaddr_storage_t__bindgen_ty_1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const inaddr_storage_t__bindgen_ty_1 ) ) .
                __addr as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                inaddr_storage_t__bindgen_ty_1 ) , "::" , stringify ! ( __addr
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const inaddr_storage_t__bindgen_ty_1 ) ) .
                __addr6 as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                inaddr_storage_t__bindgen_ty_1 ) , "::" , stringify ! (
                __addr6 ) ));
}
impl Clone for inaddr_storage_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_inaddr_storage_t() {
    assert_eq!(::std::mem::size_of::<inaddr_storage_t>() , 32usize , concat !
               ( "Size of: " , stringify ! ( inaddr_storage_t ) ));
    assert_eq! (::std::mem::align_of::<inaddr_storage_t>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( inaddr_storage_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const inaddr_storage_t ) ) . __inaddr_u as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( inaddr_storage_t ) ,
                "::" , stringify ! ( __inaddr_u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const inaddr_storage_t ) ) . inaddrlen as *
                const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( inaddr_storage_t ) ,
                "::" , stringify ! ( inaddrlen ) ));
}
impl Clone for inaddr_storage_t {
    fn clone(&self) -> Self { *self }
}
pub type SOCKET = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zactor_t {
    _unused: [u8; 0],
}
pub type zactor_t = _zactor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zarmour_t {
    _unused: [u8; 0],
}
pub type zarmour_t = _zarmour_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zcert_t {
    _unused: [u8; 0],
}
pub type zcert_t = _zcert_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zcertstore_t {
    _unused: [u8; 0],
}
pub type zcertstore_t = _zcertstore_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zchunk_t {
    _unused: [u8; 0],
}
pub type zchunk_t = _zchunk_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zclock_t {
    _unused: [u8; 0],
}
pub type zclock_t = _zclock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zconfig_t {
    _unused: [u8; 0],
}
pub type zconfig_t = _zconfig_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zdigest_t {
    _unused: [u8; 0],
}
pub type zdigest_t = _zdigest_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zdir_t {
    _unused: [u8; 0],
}
pub type zdir_t = _zdir_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zdir_patch_t {
    _unused: [u8; 0],
}
pub type zdir_patch_t = _zdir_patch_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zfile_t {
    _unused: [u8; 0],
}
pub type zfile_t = _zfile_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zframe_t {
    _unused: [u8; 0],
}
pub type zframe_t = _zframe_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zhash_t {
    _unused: [u8; 0],
}
pub type zhash_t = _zhash_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zhashx_t {
    _unused: [u8; 0],
}
pub type zhashx_t = _zhashx_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ziflist_t {
    _unused: [u8; 0],
}
pub type ziflist_t = _ziflist_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zlist_t {
    _unused: [u8; 0],
}
pub type zlist_t = _zlist_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zlistx_t {
    _unused: [u8; 0],
}
pub type zlistx_t = _zlistx_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zloop_t {
    _unused: [u8; 0],
}
pub type zloop_t = _zloop_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zmsg_t {
    _unused: [u8; 0],
}
pub type zmsg_t = _zmsg_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zpoller_t {
    _unused: [u8; 0],
}
pub type zpoller_t = _zpoller_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zsock_t {
    _unused: [u8; 0],
}
pub type zsock_t = _zsock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zstr_t {
    _unused: [u8; 0],
}
pub type zstr_t = _zstr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zuuid_t {
    _unused: [u8; 0],
}
pub type zuuid_t = _zuuid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zauth_t {
    _unused: [u8; 0],
}
pub type zauth_t = _zauth_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zbeacon_t {
    _unused: [u8; 0],
}
pub type zbeacon_t = _zbeacon_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zgossip_t {
    _unused: [u8; 0],
}
pub type zgossip_t = _zgossip_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zmonitor_t {
    _unused: [u8; 0],
}
pub type zmonitor_t = _zmonitor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zproxy_t {
    _unused: [u8; 0],
}
pub type zproxy_t = _zproxy_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zrex_t {
    _unused: [u8; 0],
}
pub type zrex_t = _zrex_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zsys_t {
    _unused: [u8; 0],
}
pub type zsys_t = _zsys_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zproc_t {
    _unused: [u8; 0],
}
pub type zproc_t = _zproc_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ztimerset_t {
    _unused: [u8; 0],
}
pub type ztimerset_t = _ztimerset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ztrie_t {
    _unused: [u8; 0],
}
pub type ztrie_t = _ztrie_t;
pub type zactor_fn =
    ::std::option::Option<unsafe extern "C" fn(pipe: *mut zsock_t,
                                               args:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn zactor_new(task: zactor_fn, args: *mut ::std::os::raw::c_void)
     -> *mut zactor_t;
}
extern "C" {
    pub fn zactor_destroy(self_p: *mut *mut zactor_t);
}
extern "C" {
    pub fn zactor_send(self_: *mut zactor_t, msg_p: *mut *mut zmsg_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zactor_recv(self_: *mut zactor_t) -> *mut zmsg_t;
}
extern "C" {
    pub fn zactor_is(self_: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn zactor_resolve(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zactor_sock(self_: *mut zactor_t) -> *mut zsock_t;
}
extern "C" {
    pub fn zactor_test(verbose: bool);
}
extern "C" {
    pub fn zarmour_new() -> *mut zarmour_t;
}
extern "C" {
    pub fn zarmour_destroy(self_p: *mut *mut zarmour_t);
}
extern "C" {
    pub fn zarmour_encode(self_: *mut zarmour_t, data: *const byte,
                          size: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zarmour_decode(self_: *mut zarmour_t,
                          data: *const ::std::os::raw::c_char)
     -> *mut zchunk_t;
}
extern "C" {
    pub fn zarmour_mode(self_: *mut zarmour_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zarmour_mode_str(self_: *mut zarmour_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zarmour_set_mode(self_: *mut zarmour_t,
                            mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zarmour_pad(self_: *mut zarmour_t) -> bool;
}
extern "C" {
    pub fn zarmour_set_pad(self_: *mut zarmour_t, pad: bool);
}
extern "C" {
    pub fn zarmour_pad_char(self_: *mut zarmour_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn zarmour_set_pad_char(self_: *mut zarmour_t,
                                pad_char: ::std::os::raw::c_char);
}
extern "C" {
    pub fn zarmour_line_breaks(self_: *mut zarmour_t) -> bool;
}
extern "C" {
    pub fn zarmour_set_line_breaks(self_: *mut zarmour_t, line_breaks: bool);
}
extern "C" {
    pub fn zarmour_line_length(self_: *mut zarmour_t) -> usize;
}
extern "C" {
    pub fn zarmour_set_line_length(self_: *mut zarmour_t, line_length: usize);
}
extern "C" {
    pub fn zarmour_print(self_: *mut zarmour_t);
}
extern "C" {
    pub fn zarmour_test(verbose: bool);
}
extern "C" {
    pub fn zcert_new() -> *mut zcert_t;
}
extern "C" {
    pub fn zcert_new_from(public_key: *const byte, secret_key: *const byte)
     -> *mut zcert_t;
}
extern "C" {
    pub fn zcert_load(filename: *const ::std::os::raw::c_char)
     -> *mut zcert_t;
}
extern "C" {
    pub fn zcert_destroy(self_p: *mut *mut zcert_t);
}
extern "C" {
    pub fn zcert_public_key(self_: *mut zcert_t) -> *const byte;
}
extern "C" {
    pub fn zcert_secret_key(self_: *mut zcert_t) -> *const byte;
}
extern "C" {
    pub fn zcert_public_txt(self_: *mut zcert_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zcert_secret_txt(self_: *mut zcert_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zcert_set_meta(self_: *mut zcert_t,
                          name: *const ::std::os::raw::c_char,
                          format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zcert_meta(self_: *mut zcert_t,
                      name: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zcert_meta_keys(self_: *mut zcert_t) -> *mut zlist_t;
}
extern "C" {
    pub fn zcert_save(self_: *mut zcert_t,
                      filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcert_save_public(self_: *mut zcert_t,
                             filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcert_save_secret(self_: *mut zcert_t,
                             filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcert_apply(self_: *mut zcert_t,
                       socket: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zcert_dup(self_: *mut zcert_t) -> *mut zcert_t;
}
extern "C" {
    pub fn zcert_eq(self_: *mut zcert_t, compare: *mut zcert_t) -> bool;
}
extern "C" {
    pub fn zcert_print(self_: *mut zcert_t);
}
extern "C" {
    pub fn zcert_test(verbose: bool);
}
extern "C" {
    pub fn zcert_unset_meta(self_: *mut zcert_t,
                            name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zcertstore_new(location: *const ::std::os::raw::c_char)
     -> *mut zcertstore_t;
}
extern "C" {
    pub fn zcertstore_destroy(self_p: *mut *mut zcertstore_t);
}
extern "C" {
    pub fn zcertstore_lookup(self_: *mut zcertstore_t,
                             public_key: *const ::std::os::raw::c_char)
     -> *mut zcert_t;
}
extern "C" {
    pub fn zcertstore_insert(self_: *mut zcertstore_t,
                             cert_p: *mut *mut zcert_t);
}
extern "C" {
    pub fn zcertstore_print(self_: *mut zcertstore_t);
}
extern "C" {
    pub fn zcertstore_test(verbose: bool);
}
pub type zcertstore_loader =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut zcertstore_t)>;
pub type zcertstore_destructor =
    ::std::option::Option<unsafe extern "C" fn(self_p:
                                                   *mut *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn zcertstore_set_loader(self_: *mut zcertstore_t,
                                 loader: zcertstore_loader,
                                 destructor: zcertstore_destructor,
                                 state: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zcertstore_empty(self_: *mut zcertstore_t);
}
extern "C" {
    pub fn zchunk_new(data: *const ::std::os::raw::c_void, size: usize)
     -> *mut zchunk_t;
}
extern "C" {
    pub fn zchunk_destroy(self_p: *mut *mut zchunk_t);
}
extern "C" {
    pub fn zchunk_resize(self_: *mut zchunk_t, size: usize);
}
extern "C" {
    pub fn zchunk_size(self_: *mut zchunk_t) -> usize;
}
extern "C" {
    pub fn zchunk_max_size(self_: *mut zchunk_t) -> usize;
}
extern "C" {
    pub fn zchunk_data(self_: *mut zchunk_t) -> *mut byte;
}
extern "C" {
    pub fn zchunk_set(self_: *mut zchunk_t,
                      data: *const ::std::os::raw::c_void, size: usize)
     -> usize;
}
extern "C" {
    pub fn zchunk_fill(self_: *mut zchunk_t, filler: byte, size: usize)
     -> usize;
}
extern "C" {
    pub fn zchunk_append(self_: *mut zchunk_t,
                         data: *const ::std::os::raw::c_void, size: usize)
     -> usize;
}
extern "C" {
    pub fn zchunk_extend(self_: *mut zchunk_t,
                         data: *const ::std::os::raw::c_void, size: usize)
     -> usize;
}
extern "C" {
    pub fn zchunk_consume(self_: *mut zchunk_t, source: *mut zchunk_t)
     -> usize;
}
extern "C" {
    pub fn zchunk_exhausted(self_: *mut zchunk_t) -> bool;
}
extern "C" {
    pub fn zchunk_read(handle: *mut FILE, bytes: usize) -> *mut zchunk_t;
}
extern "C" {
    pub fn zchunk_write(self_: *mut zchunk_t, handle: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zchunk_slurp(filename: *const ::std::os::raw::c_char,
                        maxsize: usize) -> *mut zchunk_t;
}
extern "C" {
    pub fn zchunk_dup(self_: *mut zchunk_t) -> *mut zchunk_t;
}
extern "C" {
    pub fn zchunk_strhex(self_: *mut zchunk_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zchunk_strdup(self_: *mut zchunk_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zchunk_streq(self_: *mut zchunk_t,
                        string: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn zchunk_pack(self_: *mut zchunk_t) -> *mut zframe_t;
}
extern "C" {
    pub fn zchunk_unpack(frame: *mut zframe_t) -> *mut zchunk_t;
}
extern "C" {
    pub fn zchunk_digest(self_: *mut zchunk_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zchunk_fprint(self_: *mut zchunk_t, file: *mut FILE);
}
extern "C" {
    pub fn zchunk_print(self_: *mut zchunk_t);
}
extern "C" {
    pub fn zchunk_is(self_: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn zchunk_test(verbose: bool);
}
extern "C" {
    pub fn zclock_sleep(msecs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zclock_time() -> i64;
}
extern "C" {
    pub fn zclock_mono() -> i64;
}
extern "C" {
    pub fn zclock_usecs() -> i64;
}
extern "C" {
    pub fn zclock_timestr() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zclock_test(verbose: bool);
}
extern "C" {
    pub fn zclock_log(format: *const ::std::os::raw::c_char, ...);
}
pub type zconfig_fct =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut zconfig_t,
                                               arg:
                                                   *mut ::std::os::raw::c_void,
                                               level: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn zconfig_new(name: *const ::std::os::raw::c_char,
                       parent: *mut zconfig_t) -> *mut zconfig_t;
}
extern "C" {
    pub fn zconfig_load(filename: *const ::std::os::raw::c_char)
     -> *mut zconfig_t;
}
extern "C" {
    pub fn zconfig_loadf(format: *const ::std::os::raw::c_char, ...)
     -> *mut zconfig_t;
}
extern "C" {
    pub fn zconfig_destroy(self_p: *mut *mut zconfig_t);
}
extern "C" {
    pub fn zconfig_name(self_: *mut zconfig_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zconfig_value(self_: *mut zconfig_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zconfig_put(self_: *mut zconfig_t,
                       path: *const ::std::os::raw::c_char,
                       value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zconfig_putf(self_: *mut zconfig_t,
                        path: *const ::std::os::raw::c_char,
                        format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zconfig_get(self_: *mut zconfig_t,
                       path: *const ::std::os::raw::c_char,
                       default_value: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zconfig_set_name(self_: *mut zconfig_t,
                            name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zconfig_set_value(self_: *mut zconfig_t,
                             format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zconfig_child(self_: *mut zconfig_t) -> *mut zconfig_t;
}
extern "C" {
    pub fn zconfig_next(self_: *mut zconfig_t) -> *mut zconfig_t;
}
extern "C" {
    pub fn zconfig_locate(self_: *mut zconfig_t,
                          path: *const ::std::os::raw::c_char)
     -> *mut zconfig_t;
}
extern "C" {
    pub fn zconfig_at_depth(self_: *mut zconfig_t,
                            level: ::std::os::raw::c_int) -> *mut zconfig_t;
}
extern "C" {
    pub fn zconfig_execute(self_: *mut zconfig_t, handler: zconfig_fct,
                           arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zconfig_set_comment(self_: *mut zconfig_t,
                               format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zconfig_comments(self_: *mut zconfig_t) -> *mut zlist_t;
}
extern "C" {
    pub fn zconfig_save(self_: *mut zconfig_t,
                        filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zconfig_savef(self_: *mut zconfig_t,
                         format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zconfig_filename(self_: *mut zconfig_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zconfig_reload(self_p: *mut *mut zconfig_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zconfig_chunk_load(chunk: *mut zchunk_t) -> *mut zconfig_t;
}
extern "C" {
    pub fn zconfig_chunk_save(self_: *mut zconfig_t) -> *mut zchunk_t;
}
extern "C" {
    pub fn zconfig_str_load(string: *const ::std::os::raw::c_char)
     -> *mut zconfig_t;
}
extern "C" {
    pub fn zconfig_str_save(self_: *mut zconfig_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zconfig_has_changed(self_: *mut zconfig_t) -> bool;
}
extern "C" {
    pub fn zconfig_fprint(self_: *mut zconfig_t, file: *mut FILE);
}
extern "C" {
    pub fn zconfig_print(self_: *mut zconfig_t);
}
extern "C" {
    pub fn zconfig_test(verbose: bool);
}
extern "C" {
    pub fn zdigest_new() -> *mut zdigest_t;
}
extern "C" {
    pub fn zdigest_destroy(self_p: *mut *mut zdigest_t);
}
extern "C" {
    pub fn zdigest_update(self_: *mut zdigest_t, buffer: *const byte,
                          length: usize);
}
extern "C" {
    pub fn zdigest_data(self_: *mut zdigest_t) -> *const byte;
}
extern "C" {
    pub fn zdigest_size(self_: *mut zdigest_t) -> usize;
}
extern "C" {
    pub fn zdigest_string(self_: *mut zdigest_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zdigest_test(verbose: bool);
}
extern "C" {
    pub fn zdir_new(path: *const ::std::os::raw::c_char,
                    parent: *const ::std::os::raw::c_char) -> *mut zdir_t;
}
extern "C" {
    pub fn zdir_destroy(self_p: *mut *mut zdir_t);
}
extern "C" {
    pub fn zdir_path(self_: *mut zdir_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zdir_modified(self_: *mut zdir_t) -> time_t;
}
extern "C" {
    pub fn zdir_cursize(self_: *mut zdir_t) -> off_t;
}
extern "C" {
    pub fn zdir_count(self_: *mut zdir_t) -> usize;
}
extern "C" {
    pub fn zdir_list(self_: *mut zdir_t) -> *mut zlist_t;
}
extern "C" {
    pub fn zdir_remove(self_: *mut zdir_t, force: bool);
}
extern "C" {
    pub fn zdir_diff(older: *mut zdir_t, newer: *mut zdir_t,
                     alias: *const ::std::os::raw::c_char) -> *mut zlist_t;
}
extern "C" {
    pub fn zdir_resync(self_: *mut zdir_t,
                       alias: *const ::std::os::raw::c_char) -> *mut zlist_t;
}
extern "C" {
    pub fn zdir_cache(self_: *mut zdir_t) -> *mut zhash_t;
}
extern "C" {
    pub fn zdir_fprint(self_: *mut zdir_t, file: *mut FILE,
                       indent: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zdir_print(self_: *mut zdir_t, indent: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zdir_watch(pipe: *mut zsock_t,
                      unused: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zdir_test(verbose: bool);
}
extern "C" {
    pub fn zdir_flatten(self_: *mut zdir_t) -> *mut *mut zfile_t;
}
extern "C" {
    pub fn zdir_flatten_free(files_p: *mut *mut *mut zfile_t);
}
extern "C" {
    pub fn zdir_patch_new(path: *const ::std::os::raw::c_char,
                          file: *mut zfile_t, op: ::std::os::raw::c_int,
                          alias: *const ::std::os::raw::c_char)
     -> *mut zdir_patch_t;
}
extern "C" {
    pub fn zdir_patch_destroy(self_p: *mut *mut zdir_patch_t);
}
extern "C" {
    pub fn zdir_patch_dup(self_: *mut zdir_patch_t) -> *mut zdir_patch_t;
}
extern "C" {
    pub fn zdir_patch_path(self_: *mut zdir_patch_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zdir_patch_file(self_: *mut zdir_patch_t) -> *mut zfile_t;
}
extern "C" {
    pub fn zdir_patch_op(self_: *mut zdir_patch_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zdir_patch_vpath(self_: *mut zdir_patch_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zdir_patch_digest_set(self_: *mut zdir_patch_t);
}
extern "C" {
    pub fn zdir_patch_digest(self_: *mut zdir_patch_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zdir_patch_test(verbose: bool);
}
extern "C" {
    pub fn zfile_new(path: *const ::std::os::raw::c_char,
                     name: *const ::std::os::raw::c_char) -> *mut zfile_t;
}
extern "C" {
    pub fn zfile_destroy(self_p: *mut *mut zfile_t);
}
extern "C" {
    pub fn zfile_dup(self_: *mut zfile_t) -> *mut zfile_t;
}
extern "C" {
    pub fn zfile_filename(self_: *mut zfile_t,
                          path: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zfile_restat(self_: *mut zfile_t);
}
extern "C" {
    pub fn zfile_modified(self_: *mut zfile_t) -> time_t;
}
extern "C" {
    pub fn zfile_cursize(self_: *mut zfile_t) -> off_t;
}
extern "C" {
    pub fn zfile_is_directory(self_: *mut zfile_t) -> bool;
}
extern "C" {
    pub fn zfile_is_regular(self_: *mut zfile_t) -> bool;
}
extern "C" {
    pub fn zfile_is_readable(self_: *mut zfile_t) -> bool;
}
extern "C" {
    pub fn zfile_is_writeable(self_: *mut zfile_t) -> bool;
}
extern "C" {
    pub fn zfile_is_stable(self_: *mut zfile_t) -> bool;
}
extern "C" {
    pub fn zfile_has_changed(self_: *mut zfile_t) -> bool;
}
extern "C" {
    pub fn zfile_remove(self_: *mut zfile_t);
}
extern "C" {
    pub fn zfile_input(self_: *mut zfile_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zfile_output(self_: *mut zfile_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zfile_read(self_: *mut zfile_t, bytes: usize, offset: off_t)
     -> *mut zchunk_t;
}
extern "C" {
    pub fn zfile_eof(self_: *mut zfile_t) -> bool;
}
extern "C" {
    pub fn zfile_write(self_: *mut zfile_t, chunk: *mut zchunk_t,
                       offset: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zfile_readln(self_: *mut zfile_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zfile_close(self_: *mut zfile_t);
}
extern "C" {
    pub fn zfile_handle(self_: *mut zfile_t) -> *mut FILE;
}
extern "C" {
    pub fn zfile_digest(self_: *mut zfile_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zfile_test(verbose: bool);
}
extern "C" {
    pub fn zfile_exists(filename: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn zfile_size(filename: *const ::std::os::raw::c_char) -> isize;
}
extern "C" {
    pub fn zfile_mode(filename: *const ::std::os::raw::c_char) -> mode_t;
}
extern "C" {
    pub fn zfile_delete(filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zfile_stable(filename: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn zfile_mkdir(pathname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zfile_rmdir(pathname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zfile_mode_private();
}
extern "C" {
    pub fn zfile_mode_default();
}
extern "C" {
    pub fn zframe_new(data: *const ::std::os::raw::c_void, size: usize)
     -> *mut zframe_t;
}
extern "C" {
    pub fn zframe_new_empty() -> *mut zframe_t;
}
extern "C" {
    pub fn zframe_from(string: *const ::std::os::raw::c_char)
     -> *mut zframe_t;
}
extern "C" {
    pub fn zframe_recv(source: *mut ::std::os::raw::c_void) -> *mut zframe_t;
}
extern "C" {
    pub fn zframe_destroy(self_p: *mut *mut zframe_t);
}
extern "C" {
    pub fn zframe_send(self_p: *mut *mut zframe_t,
                       dest: *mut ::std::os::raw::c_void,
                       flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zframe_size(self_: *mut zframe_t) -> usize;
}
extern "C" {
    pub fn zframe_data(self_: *mut zframe_t) -> *mut byte;
}
extern "C" {
    pub fn zframe_meta(self_: *mut zframe_t,
                       property: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zframe_dup(self_: *mut zframe_t) -> *mut zframe_t;
}
extern "C" {
    pub fn zframe_strhex(self_: *mut zframe_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zframe_strdup(self_: *mut zframe_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zframe_streq(self_: *mut zframe_t,
                        string: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn zframe_more(self_: *mut zframe_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zframe_set_more(self_: *mut zframe_t, more: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zframe_eq(self_: *mut zframe_t, other: *mut zframe_t) -> bool;
}
extern "C" {
    pub fn zframe_reset(self_: *mut zframe_t,
                        data: *const ::std::os::raw::c_void, size: usize);
}
extern "C" {
    pub fn zframe_print(self_: *mut zframe_t,
                        prefix: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zframe_is(self_: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn zframe_test(verbose: bool);
}
extern "C" {
    pub fn zframe_routing_id(self_: *mut zframe_t) -> u32;
}
extern "C" {
    pub fn zframe_set_routing_id(self_: *mut zframe_t, routing_id: u32);
}
extern "C" {
    pub fn zframe_group(self_: *mut zframe_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zframe_set_group(self_: *mut zframe_t,
                            group: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zframe_recv_nowait(source: *mut ::std::os::raw::c_void)
     -> *mut zframe_t;
}
extern "C" {
    pub fn zframe_fprint(self_: *mut zframe_t,
                         prefix: *const ::std::os::raw::c_char,
                         file: *mut FILE);
}
pub type zhash_free_fn =
    ::std::option::Option<unsafe extern "C" fn(data:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn zhash_new() -> *mut zhash_t;
}
extern "C" {
    pub fn zhash_unpack(frame: *mut zframe_t) -> *mut zhash_t;
}
extern "C" {
    pub fn zhash_destroy(self_p: *mut *mut zhash_t);
}
extern "C" {
    pub fn zhash_insert(self_: *mut zhash_t,
                        key: *const ::std::os::raw::c_char,
                        item: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zhash_update(self_: *mut zhash_t,
                        key: *const ::std::os::raw::c_char,
                        item: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zhash_delete(self_: *mut zhash_t,
                        key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zhash_lookup(self_: *mut zhash_t,
                        key: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zhash_rename(self_: *mut zhash_t,
                        old_key: *const ::std::os::raw::c_char,
                        new_key: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zhash_freefn(self_: *mut zhash_t,
                        key: *const ::std::os::raw::c_char,
                        free_fn: zhash_free_fn)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zhash_size(self_: *mut zhash_t) -> usize;
}
extern "C" {
    pub fn zhash_dup(self_: *mut zhash_t) -> *mut zhash_t;
}
extern "C" {
    pub fn zhash_keys(self_: *mut zhash_t) -> *mut zlist_t;
}
extern "C" {
    pub fn zhash_first(self_: *mut zhash_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zhash_next(self_: *mut zhash_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zhash_cursor(self_: *mut zhash_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zhash_comment(self_: *mut zhash_t,
                         format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zhash_pack(self_: *mut zhash_t) -> *mut zframe_t;
}
extern "C" {
    pub fn zhash_save(self_: *mut zhash_t,
                      filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zhash_load(self_: *mut zhash_t,
                      filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zhash_refresh(self_: *mut zhash_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zhash_autofree(self_: *mut zhash_t);
}
extern "C" {
    pub fn zhash_test(verbose: bool);
}
pub type zhashx_destructor_fn =
    ::std::option::Option<unsafe extern "C" fn(item:
                                                   *mut *mut ::std::os::raw::c_void)>;
pub type zhashx_duplicator_fn =
    ::std::option::Option<unsafe extern "C" fn(item:
                                                   *const ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
pub type zhashx_comparator_fn =
    ::std::option::Option<unsafe extern "C" fn(item1:
                                                   *const ::std::os::raw::c_void,
                                               item2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type zhashx_free_fn =
    ::std::option::Option<unsafe extern "C" fn(data:
                                                   *mut ::std::os::raw::c_void)>;
pub type zhashx_hash_fn =
    ::std::option::Option<unsafe extern "C" fn(key:
                                                   *const ::std::os::raw::c_void)
                              -> usize>;
pub type zhashx_serializer_fn =
    ::std::option::Option<unsafe extern "C" fn(item:
                                                   *const ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_char>;
pub type zhashx_deserializer_fn =
    ::std::option::Option<unsafe extern "C" fn(item_str:
                                                   *const ::std::os::raw::c_char)
                              -> *mut ::std::os::raw::c_void>;
extern "C" {
    pub fn zhashx_new() -> *mut zhashx_t;
}
extern "C" {
    pub fn zhashx_unpack(frame: *mut zframe_t) -> *mut zhashx_t;
}
extern "C" {
    pub fn zhashx_destroy(self_p: *mut *mut zhashx_t);
}
extern "C" {
    pub fn zhashx_insert(self_: *mut zhashx_t,
                         key: *const ::std::os::raw::c_void,
                         item: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zhashx_update(self_: *mut zhashx_t,
                         key: *const ::std::os::raw::c_void,
                         item: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zhashx_delete(self_: *mut zhashx_t,
                         key: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn zhashx_purge(self_: *mut zhashx_t);
}
extern "C" {
    pub fn zhashx_lookup(self_: *mut zhashx_t,
                         key: *const ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zhashx_rename(self_: *mut zhashx_t,
                         old_key: *const ::std::os::raw::c_void,
                         new_key: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zhashx_freefn(self_: *mut zhashx_t,
                         key: *const ::std::os::raw::c_void,
                         free_fn: zhashx_free_fn)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zhashx_size(self_: *mut zhashx_t) -> usize;
}
extern "C" {
    pub fn zhashx_keys(self_: *mut zhashx_t) -> *mut zlistx_t;
}
extern "C" {
    pub fn zhashx_values(self_: *mut zhashx_t) -> *mut zlistx_t;
}
extern "C" {
    pub fn zhashx_first(self_: *mut zhashx_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zhashx_next(self_: *mut zhashx_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zhashx_cursor(self_: *mut zhashx_t)
     -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn zhashx_comment(self_: *mut zhashx_t,
                          format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zhashx_save(self_: *mut zhashx_t,
                       filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zhashx_load(self_: *mut zhashx_t,
                       filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zhashx_refresh(self_: *mut zhashx_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zhashx_pack(self_: *mut zhashx_t) -> *mut zframe_t;
}
extern "C" {
    pub fn zhashx_dup(self_: *mut zhashx_t) -> *mut zhashx_t;
}
extern "C" {
    pub fn zhashx_set_destructor(self_: *mut zhashx_t,
                                 destructor: zhashx_destructor_fn);
}
extern "C" {
    pub fn zhashx_set_duplicator(self_: *mut zhashx_t,
                                 duplicator: zhashx_duplicator_fn);
}
extern "C" {
    pub fn zhashx_set_key_destructor(self_: *mut zhashx_t,
                                     destructor: zhashx_destructor_fn);
}
extern "C" {
    pub fn zhashx_set_key_duplicator(self_: *mut zhashx_t,
                                     duplicator: zhashx_duplicator_fn);
}
extern "C" {
    pub fn zhashx_set_key_comparator(self_: *mut zhashx_t,
                                     comparator: zhashx_comparator_fn);
}
extern "C" {
    pub fn zhashx_set_key_hasher(self_: *mut zhashx_t,
                                 hasher: zhashx_hash_fn);
}
extern "C" {
    pub fn zhashx_dup_v2(self_: *mut zhashx_t) -> *mut zhashx_t;
}
extern "C" {
    pub fn zhashx_test(verbose: bool);
}
extern "C" {
    pub fn zhashx_unpack_own(frame: *mut zframe_t,
                             deserializer: zhashx_deserializer_fn)
     -> *mut zhashx_t;
}
extern "C" {
    pub fn zhashx_pack_own(self_: *mut zhashx_t,
                           serializer: zhashx_serializer_fn) -> *mut zframe_t;
}
extern "C" {
    pub fn ziflist_new() -> *mut ziflist_t;
}
extern "C" {
    pub fn ziflist_destroy(self_p: *mut *mut ziflist_t);
}
extern "C" {
    pub fn ziflist_reload(self_: *mut ziflist_t);
}
extern "C" {
    pub fn ziflist_size(self_: *mut ziflist_t) -> usize;
}
extern "C" {
    pub fn ziflist_first(self_: *mut ziflist_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ziflist_next(self_: *mut ziflist_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ziflist_address(self_: *mut ziflist_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ziflist_broadcast(self_: *mut ziflist_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ziflist_netmask(self_: *mut ziflist_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ziflist_print(self_: *mut ziflist_t);
}
extern "C" {
    pub fn ziflist_test(verbose: bool);
}
pub type zlist_compare_fn =
    ::std::option::Option<unsafe extern "C" fn(item1:
                                                   *mut ::std::os::raw::c_void,
                                               item2:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type zlist_free_fn =
    ::std::option::Option<unsafe extern "C" fn(data:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn zlist_new() -> *mut zlist_t;
}
extern "C" {
    pub fn zlist_destroy(self_p: *mut *mut zlist_t);
}
extern "C" {
    pub fn zlist_first(self_: *mut zlist_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlist_next(self_: *mut zlist_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlist_last(self_: *mut zlist_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlist_head(self_: *mut zlist_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlist_tail(self_: *mut zlist_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlist_item(self_: *mut zlist_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlist_append(self_: *mut zlist_t,
                        item: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zlist_push(self_: *mut zlist_t, item: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zlist_pop(self_: *mut zlist_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlist_exists(self_: *mut zlist_t,
                        item: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn zlist_remove(self_: *mut zlist_t,
                        item: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zlist_dup(self_: *mut zlist_t) -> *mut zlist_t;
}
extern "C" {
    pub fn zlist_purge(self_: *mut zlist_t);
}
extern "C" {
    pub fn zlist_size(self_: *mut zlist_t) -> usize;
}
extern "C" {
    pub fn zlist_sort(self_: *mut zlist_t, compare: zlist_compare_fn);
}
extern "C" {
    pub fn zlist_autofree(self_: *mut zlist_t);
}
extern "C" {
    pub fn zlist_comparefn(self_: *mut zlist_t, fn_: zlist_compare_fn);
}
extern "C" {
    pub fn zlist_freefn(self_: *mut zlist_t,
                        item: *mut ::std::os::raw::c_void, fn_: zlist_free_fn,
                        at_tail: bool) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlist_test(verbose: bool);
}
pub type zlistx_destructor_fn =
    ::std::option::Option<unsafe extern "C" fn(item:
                                                   *mut *mut ::std::os::raw::c_void)>;
pub type zlistx_duplicator_fn =
    ::std::option::Option<unsafe extern "C" fn(item:
                                                   *const ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
pub type zlistx_comparator_fn =
    ::std::option::Option<unsafe extern "C" fn(item1:
                                                   *const ::std::os::raw::c_void,
                                               item2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn zlistx_new() -> *mut zlistx_t;
}
extern "C" {
    pub fn zlistx_destroy(self_p: *mut *mut zlistx_t);
}
extern "C" {
    pub fn zlistx_add_start(self_: *mut zlistx_t,
                            item: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_add_end(self_: *mut zlistx_t,
                          item: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_size(self_: *mut zlistx_t) -> usize;
}
extern "C" {
    pub fn zlistx_head(self_: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_tail(self_: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_first(self_: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_next(self_: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_prev(self_: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_last(self_: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_item(self_: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_cursor(self_: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_handle_item(handle: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_find(self_: *mut zlistx_t,
                       item: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_detach(self_: *mut zlistx_t,
                         handle: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_detach_cur(self_: *mut zlistx_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_delete(self_: *mut zlistx_t,
                         handle: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zlistx_move_start(self_: *mut zlistx_t,
                             handle: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zlistx_move_end(self_: *mut zlistx_t,
                           handle: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zlistx_purge(self_: *mut zlistx_t);
}
extern "C" {
    pub fn zlistx_sort(self_: *mut zlistx_t);
}
extern "C" {
    pub fn zlistx_insert(self_: *mut zlistx_t,
                         item: *mut ::std::os::raw::c_void, low_value: bool)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zlistx_reorder(self_: *mut zlistx_t,
                          handle: *mut ::std::os::raw::c_void,
                          low_value: bool);
}
extern "C" {
    pub fn zlistx_dup(self_: *mut zlistx_t) -> *mut zlistx_t;
}
extern "C" {
    pub fn zlistx_set_destructor(self_: *mut zlistx_t,
                                 destructor: zlistx_destructor_fn);
}
extern "C" {
    pub fn zlistx_set_duplicator(self_: *mut zlistx_t,
                                 duplicator: zlistx_duplicator_fn);
}
extern "C" {
    pub fn zlistx_set_comparator(self_: *mut zlistx_t,
                                 comparator: zlistx_comparator_fn);
}
extern "C" {
    pub fn zlistx_test(verbose: bool);
}
pub type zloop_reader_fn =
    ::std::option::Option<unsafe extern "C" fn(loop_: *mut zloop_t,
                                               reader: *mut zsock_t,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type zloop_fn =
    ::std::option::Option<unsafe extern "C" fn(loop_: *mut zloop_t,
                                               item: *mut zmq_pollitem_t,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type zloop_timer_fn =
    ::std::option::Option<unsafe extern "C" fn(loop_: *mut zloop_t,
                                               timer_id:
                                                   ::std::os::raw::c_int,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn zloop_new() -> *mut zloop_t;
}
extern "C" {
    pub fn zloop_destroy(self_p: *mut *mut zloop_t);
}
extern "C" {
    pub fn zloop_reader(self_: *mut zloop_t, sock: *mut zsock_t,
                        handler: zloop_reader_fn,
                        arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zloop_reader_end(self_: *mut zloop_t, sock: *mut zsock_t);
}
extern "C" {
    pub fn zloop_reader_set_tolerant(self_: *mut zloop_t, sock: *mut zsock_t);
}
extern "C" {
    pub fn zloop_poller(self_: *mut zloop_t, item: *mut zmq_pollitem_t,
                        handler: zloop_fn, arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zloop_poller_end(self_: *mut zloop_t, item: *mut zmq_pollitem_t);
}
extern "C" {
    pub fn zloop_poller_set_tolerant(self_: *mut zloop_t,
                                     item: *mut zmq_pollitem_t);
}
extern "C" {
    pub fn zloop_timer(self_: *mut zloop_t, delay: usize, times: usize,
                       handler: zloop_timer_fn,
                       arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zloop_timer_end(self_: *mut zloop_t,
                           timer_id: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zloop_ticket(self_: *mut zloop_t, handler: zloop_timer_fn,
                        arg: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zloop_ticket_reset(self_: *mut zloop_t,
                              handle: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zloop_ticket_delete(self_: *mut zloop_t,
                               handle: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zloop_set_ticket_delay(self_: *mut zloop_t, ticket_delay: usize);
}
extern "C" {
    pub fn zloop_set_max_timers(self_: *mut zloop_t, max_timers: usize);
}
extern "C" {
    pub fn zloop_set_verbose(self_: *mut zloop_t, verbose: bool);
}
extern "C" {
    pub fn zloop_set_nonstop(self_: *mut zloop_t, nonstop: bool);
}
extern "C" {
    pub fn zloop_start(self_: *mut zloop_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zloop_test(verbose: bool);
}
extern "C" {
    pub fn zmsg_new() -> *mut zmsg_t;
}
extern "C" {
    pub fn zmsg_recv(source: *mut ::std::os::raw::c_void) -> *mut zmsg_t;
}
extern "C" {
    pub fn zmsg_load(file: *mut FILE) -> *mut zmsg_t;
}
extern "C" {
    pub fn zmsg_decode(frame: *mut zframe_t) -> *mut zmsg_t;
}
extern "C" {
    pub fn zmsg_new_signal(status: byte) -> *mut zmsg_t;
}
extern "C" {
    pub fn zmsg_destroy(self_p: *mut *mut zmsg_t);
}
extern "C" {
    pub fn zmsg_send(self_p: *mut *mut zmsg_t,
                     dest: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_sendm(self_p: *mut *mut zmsg_t,
                      dest: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_size(self_: *mut zmsg_t) -> usize;
}
extern "C" {
    pub fn zmsg_content_size(self_: *mut zmsg_t) -> usize;
}
extern "C" {
    pub fn zmsg_prepend(self_: *mut zmsg_t, frame_p: *mut *mut zframe_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_append(self_: *mut zmsg_t, frame_p: *mut *mut zframe_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_pop(self_: *mut zmsg_t) -> *mut zframe_t;
}
extern "C" {
    pub fn zmsg_pushmem(self_: *mut zmsg_t,
                        data: *const ::std::os::raw::c_void, size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_addmem(self_: *mut zmsg_t,
                       data: *const ::std::os::raw::c_void, size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_pushstr(self_: *mut zmsg_t,
                        string: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_addstr(self_: *mut zmsg_t,
                       string: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_pushstrf(self_: *mut zmsg_t,
                         format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_addstrf(self_: *mut zmsg_t,
                        format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_popstr(self_: *mut zmsg_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zmsg_addmsg(self_: *mut zmsg_t, msg_p: *mut *mut zmsg_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_popmsg(self_: *mut zmsg_t) -> *mut zmsg_t;
}
extern "C" {
    pub fn zmsg_remove(self_: *mut zmsg_t, frame: *mut zframe_t);
}
extern "C" {
    pub fn zmsg_first(self_: *mut zmsg_t) -> *mut zframe_t;
}
extern "C" {
    pub fn zmsg_next(self_: *mut zmsg_t) -> *mut zframe_t;
}
extern "C" {
    pub fn zmsg_last(self_: *mut zmsg_t) -> *mut zframe_t;
}
extern "C" {
    pub fn zmsg_save(self_: *mut zmsg_t, file: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_encode(self_: *mut zmsg_t) -> *mut zframe_t;
}
extern "C" {
    pub fn zmsg_dup(self_: *mut zmsg_t) -> *mut zmsg_t;
}
extern "C" {
    pub fn zmsg_print(self_: *mut zmsg_t);
}
extern "C" {
    pub fn zmsg_eq(self_: *mut zmsg_t, other: *mut zmsg_t) -> bool;
}
extern "C" {
    pub fn zmsg_signal(self_: *mut zmsg_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_is(self_: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn zmsg_test(verbose: bool);
}
extern "C" {
    pub fn zmsg_routing_id(self_: *mut zmsg_t) -> u32;
}
extern "C" {
    pub fn zmsg_set_routing_id(self_: *mut zmsg_t, routing_id: u32);
}
extern "C" {
    pub fn zmsg_unwrap(self_: *mut zmsg_t) -> *mut zframe_t;
}
extern "C" {
    pub fn zmsg_recv_nowait(source: *mut ::std::os::raw::c_void)
     -> *mut zmsg_t;
}
extern "C" {
    pub fn zmsg_wrap(self_: *mut zmsg_t, frame: *mut zframe_t);
}
extern "C" {
    pub fn zmsg_push(self_: *mut zmsg_t, frame: *mut zframe_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_add(self_: *mut zmsg_t, frame: *mut zframe_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zmsg_fprint(self_: *mut zmsg_t, file: *mut FILE);
}
extern "C" {
    pub fn zpoller_new(reader: *mut ::std::os::raw::c_void, ...)
     -> *mut zpoller_t;
}
extern "C" {
    pub fn zpoller_destroy(self_p: *mut *mut zpoller_t);
}
extern "C" {
    pub fn zpoller_add(self_: *mut zpoller_t,
                       reader: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zpoller_remove(self_: *mut zpoller_t,
                          reader: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zpoller_set_nonstop(self_: *mut zpoller_t, nonstop: bool);
}
extern "C" {
    pub fn zpoller_wait(self_: *mut zpoller_t, timeout: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zpoller_expired(self_: *mut zpoller_t) -> bool;
}
extern "C" {
    pub fn zpoller_terminated(self_: *mut zpoller_t) -> bool;
}
extern "C" {
    pub fn zpoller_test(verbose: bool);
}
extern "C" {
    pub fn zsock_new(type_: ::std::os::raw::c_int) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_pub(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_sub(endpoint: *const ::std::os::raw::c_char,
                         subscribe: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_req(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_rep(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_dealer(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_router(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_push(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_pull(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_xpub(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_xsub(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_pair(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_stream(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_destroy(self_p: *mut *mut zsock_t);
}
extern "C" {
    pub fn zsock_bind(self_: *mut zsock_t,
                      format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_endpoint(self_: *mut zsock_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_unbind(self_: *mut zsock_t,
                        format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_connect(self_: *mut zsock_t,
                         format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_disconnect(self_: *mut zsock_t,
                            format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_attach(self_: *mut zsock_t,
                        endpoints: *const ::std::os::raw::c_char,
                        serverish: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_type_str(self_: *mut zsock_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_send(self_: *mut ::std::os::raw::c_void,
                      picture: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_vsend(self_: *mut ::std::os::raw::c_void,
                       picture: *const ::std::os::raw::c_char,
                       argptr: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_recv(self_: *mut ::std::os::raw::c_void,
                      picture: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_vrecv(self_: *mut ::std::os::raw::c_void,
                       picture: *const ::std::os::raw::c_char,
                       argptr: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_bsend(self_: *mut ::std::os::raw::c_void,
                       picture: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_brecv(self_: *mut ::std::os::raw::c_void,
                       picture: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_unbounded(self_: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zsock_signal(self_: *mut ::std::os::raw::c_void, status: byte)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_wait(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_flush(self_: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zsock_is(self_: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn zsock_resolve(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zsock_heartbeat_ivl(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_heartbeat_ivl(self_: *mut ::std::os::raw::c_void,
                                   heartbeat_ivl: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_heartbeat_ttl(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_heartbeat_ttl(self_: *mut ::std::os::raw::c_void,
                                   heartbeat_ttl: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_heartbeat_timeout(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_heartbeat_timeout(self_: *mut ::std::os::raw::c_void,
                                       heartbeat_timeout:
                                           ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_use_fd(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_use_fd(self_: *mut ::std::os::raw::c_void,
                            use_fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_xpub_manual(self_: *mut ::std::os::raw::c_void,
                                 xpub_manual: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_xpub_welcome_msg(self_: *mut ::std::os::raw::c_void,
                                      xpub_welcome_msg:
                                          *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_set_stream_notify(self_: *mut ::std::os::raw::c_void,
                                   stream_notify: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_invert_matching(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_invert_matching(self_: *mut ::std::os::raw::c_void,
                                     invert_matching: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_xpub_verboser(self_: *mut ::std::os::raw::c_void,
                                   xpub_verboser: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_connect_timeout(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_connect_timeout(self_: *mut ::std::os::raw::c_void,
                                     connect_timeout: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_tcp_maxrt(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_tcp_maxrt(self_: *mut ::std::os::raw::c_void,
                               tcp_maxrt: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_thread_safe(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_multicast_maxtpdu(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_multicast_maxtpdu(self_: *mut ::std::os::raw::c_void,
                                       multicast_maxtpdu:
                                           ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_vmci_buffer_size(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_vmci_buffer_size(self_: *mut ::std::os::raw::c_void,
                                      vmci_buffer_size:
                                          ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_vmci_buffer_min_size(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_vmci_buffer_min_size(self_: *mut ::std::os::raw::c_void,
                                          vmci_buffer_min_size:
                                              ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_vmci_buffer_max_size(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_vmci_buffer_max_size(self_: *mut ::std::os::raw::c_void,
                                          vmci_buffer_max_size:
                                              ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_vmci_connect_timeout(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_vmci_connect_timeout(self_: *mut ::std::os::raw::c_void,
                                          vmci_connect_timeout:
                                              ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_tos(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_tos(self_: *mut ::std::os::raw::c_void,
                         tos: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_router_handover(self_: *mut ::std::os::raw::c_void,
                                     router_handover: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_connect_rid(self_: *mut ::std::os::raw::c_void,
                                 connect_rid: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_set_connect_rid_bin(self_: *mut ::std::os::raw::c_void,
                                     connect_rid: *const byte);
}
extern "C" {
    pub fn zsock_handshake_ivl(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_handshake_ivl(self_: *mut ::std::os::raw::c_void,
                                   handshake_ivl: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_socks_proxy(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_socks_proxy(self_: *mut ::std::os::raw::c_void,
                                 socks_proxy: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_set_xpub_nodrop(self_: *mut ::std::os::raw::c_void,
                                 xpub_nodrop: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_router_mandatory(self_: *mut ::std::os::raw::c_void,
                                      router_mandatory:
                                          ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_probe_router(self_: *mut ::std::os::raw::c_void,
                                  probe_router: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_req_relaxed(self_: *mut ::std::os::raw::c_void,
                                 req_relaxed: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_req_correlate(self_: *mut ::std::os::raw::c_void,
                                   req_correlate: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_conflate(self_: *mut ::std::os::raw::c_void,
                              conflate: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_zap_domain(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_zap_domain(self_: *mut ::std::os::raw::c_void,
                                zap_domain: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_mechanism(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_plain_server(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_plain_server(self_: *mut ::std::os::raw::c_void,
                                  plain_server: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_plain_username(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_plain_username(self_: *mut ::std::os::raw::c_void,
                                    plain_username:
                                        *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_plain_password(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_plain_password(self_: *mut ::std::os::raw::c_void,
                                    plain_password:
                                        *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_curve_server(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_curve_server(self_: *mut ::std::os::raw::c_void,
                                  curve_server: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_curve_publickey(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_curve_publickey(self_: *mut ::std::os::raw::c_void,
                                     curve_publickey:
                                         *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_set_curve_publickey_bin(self_: *mut ::std::os::raw::c_void,
                                         curve_publickey: *const byte);
}
extern "C" {
    pub fn zsock_curve_secretkey(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_curve_secretkey(self_: *mut ::std::os::raw::c_void,
                                     curve_secretkey:
                                         *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_set_curve_secretkey_bin(self_: *mut ::std::os::raw::c_void,
                                         curve_secretkey: *const byte);
}
extern "C" {
    pub fn zsock_curve_serverkey(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_curve_serverkey(self_: *mut ::std::os::raw::c_void,
                                     curve_serverkey:
                                         *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_set_curve_serverkey_bin(self_: *mut ::std::os::raw::c_void,
                                         curve_serverkey: *const byte);
}
extern "C" {
    pub fn zsock_gssapi_server(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_gssapi_server(self_: *mut ::std::os::raw::c_void,
                                   gssapi_server: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_gssapi_plaintext(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_gssapi_plaintext(self_: *mut ::std::os::raw::c_void,
                                      gssapi_plaintext:
                                          ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_gssapi_principal(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_gssapi_principal(self_: *mut ::std::os::raw::c_void,
                                      gssapi_principal:
                                          *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_gssapi_service_principal(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_gssapi_service_principal(self_:
                                                  *mut ::std::os::raw::c_void,
                                              gssapi_service_principal:
                                                  *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_ipv6(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_ipv6(self_: *mut ::std::os::raw::c_void,
                          ipv6: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_immediate(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_immediate(self_: *mut ::std::os::raw::c_void,
                               immediate: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_type(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_sndhwm(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_sndhwm(self_: *mut ::std::os::raw::c_void,
                            sndhwm: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_rcvhwm(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_rcvhwm(self_: *mut ::std::os::raw::c_void,
                            rcvhwm: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_affinity(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_affinity(self_: *mut ::std::os::raw::c_void,
                              affinity: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_subscribe(self_: *mut ::std::os::raw::c_void,
                               subscribe: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_set_unsubscribe(self_: *mut ::std::os::raw::c_void,
                                 unsubscribe: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_identity(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_identity(self_: *mut ::std::os::raw::c_void,
                              identity: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_rate(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_rate(self_: *mut ::std::os::raw::c_void,
                          rate: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_recovery_ivl(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_recovery_ivl(self_: *mut ::std::os::raw::c_void,
                                  recovery_ivl: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_sndbuf(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_sndbuf(self_: *mut ::std::os::raw::c_void,
                            sndbuf: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_rcvbuf(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_rcvbuf(self_: *mut ::std::os::raw::c_void,
                            rcvbuf: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_linger(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_linger(self_: *mut ::std::os::raw::c_void,
                            linger: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_reconnect_ivl(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_reconnect_ivl(self_: *mut ::std::os::raw::c_void,
                                   reconnect_ivl: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_reconnect_ivl_max(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_reconnect_ivl_max(self_: *mut ::std::os::raw::c_void,
                                       reconnect_ivl_max:
                                           ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_backlog(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_backlog(self_: *mut ::std::os::raw::c_void,
                             backlog: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_maxmsgsize(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_maxmsgsize(self_: *mut ::std::os::raw::c_void,
                                maxmsgsize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_multicast_hops(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_multicast_hops(self_: *mut ::std::os::raw::c_void,
                                    multicast_hops: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_rcvtimeo(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_rcvtimeo(self_: *mut ::std::os::raw::c_void,
                              rcvtimeo: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_sndtimeo(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_sndtimeo(self_: *mut ::std::os::raw::c_void,
                              sndtimeo: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_xpub_verbose(self_: *mut ::std::os::raw::c_void,
                                  xpub_verbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_tcp_keepalive(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_tcp_keepalive(self_: *mut ::std::os::raw::c_void,
                                   tcp_keepalive: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_tcp_keepalive_idle(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_tcp_keepalive_idle(self_: *mut ::std::os::raw::c_void,
                                        tcp_keepalive_idle:
                                            ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_tcp_keepalive_cnt(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_tcp_keepalive_cnt(self_: *mut ::std::os::raw::c_void,
                                       tcp_keepalive_cnt:
                                           ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_tcp_keepalive_intvl(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_tcp_keepalive_intvl(self_: *mut ::std::os::raw::c_void,
                                         tcp_keepalive_intvl:
                                             ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_tcp_accept_filter(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_tcp_accept_filter(self_: *mut ::std::os::raw::c_void,
                                       tcp_accept_filter:
                                           *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsock_rcvmore(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_fd(self_: *mut ::std::os::raw::c_void) -> SOCKET;
}
extern "C" {
    pub fn zsock_events(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_last_endpoint(self_: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsock_set_router_raw(self_: *mut ::std::os::raw::c_void,
                                router_raw: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_ipv4only(self_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_set_ipv4only(self_: *mut ::std::os::raw::c_void,
                              ipv4only: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_set_delay_attach_on_connect(self_:
                                                 *mut ::std::os::raw::c_void,
                                             delay_attach_on_connect:
                                                 ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsock_test(verbose: bool);
}
extern "C" {
    pub fn zsock_new_server(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_client(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_radio(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_dish(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_gather(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_scatter(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_routing_id(self_: *mut zsock_t) -> u32;
}
extern "C" {
    pub fn zsock_set_routing_id(self_: *mut zsock_t, routing_id: u32);
}
extern "C" {
    pub fn zsock_join(self_: *mut ::std::os::raw::c_void,
                      group: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_leave(self_: *mut ::std::os::raw::c_void,
                       group: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsock_new_checked(type_: ::std::os::raw::c_int,
                             filename: *const ::std::os::raw::c_char,
                             line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_destroy_checked(self_p: *mut *mut zsock_t,
                                 filename: *const ::std::os::raw::c_char,
                                 line_nbr: usize);
}
extern "C" {
    pub fn zsock_new_pub_checked(endpoint: *const ::std::os::raw::c_char,
                                 filename: *const ::std::os::raw::c_char,
                                 line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_sub_checked(endpoint: *const ::std::os::raw::c_char,
                                 subscribe: *const ::std::os::raw::c_char,
                                 filename: *const ::std::os::raw::c_char,
                                 line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_req_checked(endpoint: *const ::std::os::raw::c_char,
                                 filename: *const ::std::os::raw::c_char,
                                 line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_rep_checked(endpoint: *const ::std::os::raw::c_char,
                                 filename: *const ::std::os::raw::c_char,
                                 line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_dealer_checked(endpoint: *const ::std::os::raw::c_char,
                                    filename: *const ::std::os::raw::c_char,
                                    line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_router_checked(endpoint: *const ::std::os::raw::c_char,
                                    filename: *const ::std::os::raw::c_char,
                                    line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_push_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_pull_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_xpub_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_xsub_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_pair_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_stream_checked(endpoint: *const ::std::os::raw::c_char,
                                    filename: *const ::std::os::raw::c_char,
                                    line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_server_checked(endpoint: *const ::std::os::raw::c_char,
                                    filename: *const ::std::os::raw::c_char,
                                    line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_client_checked(endpoint: *const ::std::os::raw::c_char,
                                    filename: *const ::std::os::raw::c_char,
                                    line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_radio_checked(endpoint: *const ::std::os::raw::c_char,
                                   filename: *const ::std::os::raw::c_char,
                                   line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_dish_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_gather_checked(endpoint: *const ::std::os::raw::c_char,
                                    filename: *const ::std::os::raw::c_char,
                                    line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zsock_new_scatter_checked(endpoint: *const ::std::os::raw::c_char,
                                     filename: *const ::std::os::raw::c_char,
                                     line_nbr: usize) -> *mut zsock_t;
}
extern "C" {
    pub fn zstr_recv(source: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zstr_recvx(source: *mut ::std::os::raw::c_void,
                      string_p: *mut *mut ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zstr_send(dest: *mut ::std::os::raw::c_void,
                     string: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zstr_sendm(dest: *mut ::std::os::raw::c_void,
                      string: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zstr_sendf(dest: *mut ::std::os::raw::c_void,
                      format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zstr_sendfm(dest: *mut ::std::os::raw::c_void,
                       format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zstr_sendx(dest: *mut ::std::os::raw::c_void,
                      string: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zstr_free(string_p: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn zstr_test(verbose: bool);
}
extern "C" {
    pub fn zstr_str(source: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zstr_recv_nowait(source: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zuuid_new() -> *mut zuuid_t;
}
extern "C" {
    pub fn zuuid_new_from(source: *const byte) -> *mut zuuid_t;
}
extern "C" {
    pub fn zuuid_destroy(self_p: *mut *mut zuuid_t);
}
extern "C" {
    pub fn zuuid_set(self_: *mut zuuid_t, source: *const byte);
}
extern "C" {
    pub fn zuuid_set_str(self_: *mut zuuid_t,
                         source: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zuuid_data(self_: *mut zuuid_t) -> *const byte;
}
extern "C" {
    pub fn zuuid_size(self_: *mut zuuid_t) -> usize;
}
extern "C" {
    pub fn zuuid_str(self_: *mut zuuid_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zuuid_str_canonical(self_: *mut zuuid_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zuuid_export(self_: *mut zuuid_t, target: *mut byte);
}
extern "C" {
    pub fn zuuid_eq(self_: *mut zuuid_t, compare: *const byte) -> bool;
}
extern "C" {
    pub fn zuuid_neq(self_: *mut zuuid_t, compare: *const byte) -> bool;
}
extern "C" {
    pub fn zuuid_dup(self_: *mut zuuid_t) -> *mut zuuid_t;
}
extern "C" {
    pub fn zuuid_test(verbose: bool);
}
extern "C" {
    pub fn zauth(pipe: *mut zsock_t, certstore: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zauth_test(verbose: bool);
}
extern "C" {
    pub fn zbeacon(pipe: *mut zsock_t, unused: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zbeacon_test(verbose: bool);
}
extern "C" {
    pub fn zgossip(pipe: *mut zsock_t, args: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zgossip_test(verbose: bool);
}
extern "C" {
    pub fn zmonitor(pipe: *mut zsock_t, sock: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zmonitor_test(verbose: bool);
}
extern "C" {
    pub fn zproxy(pipe: *mut zsock_t, unused: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zproxy_test(verbose: bool);
}
extern "C" {
    pub fn zrex_new(expression: *const ::std::os::raw::c_char) -> *mut zrex_t;
}
extern "C" {
    pub fn zrex_destroy(self_p: *mut *mut zrex_t);
}
extern "C" {
    pub fn zrex_valid(self_: *mut zrex_t) -> bool;
}
extern "C" {
    pub fn zrex_strerror(self_: *mut zrex_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zrex_matches(self_: *mut zrex_t,
                        text: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn zrex_eq(self_: *mut zrex_t, text: *const ::std::os::raw::c_char,
                   expression: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn zrex_hits(self_: *mut zrex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zrex_hit(self_: *mut zrex_t, index: uint)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zrex_fetch(self_: *mut zrex_t,
                      string_p: *mut *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zrex_test(verbose: bool);
}
pub type zsys_handler_fn =
    ::std::option::Option<unsafe extern "C" fn(signal_value:
                                                   ::std::os::raw::c_int)>;
extern "C" {
    pub fn zsys_init() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zsys_shutdown();
}
extern "C" {
    pub fn zsys_socket(type_: ::std::os::raw::c_int,
                       filename: *const ::std::os::raw::c_char,
                       line_nbr: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zsys_close(handle: *mut ::std::os::raw::c_void,
                      filename: *const ::std::os::raw::c_char,
                      line_nbr: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_sockname(socktype: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsys_create_pipe(backend_p: *mut *mut zsock_t) -> *mut zsock_t;
}
extern "C" {
    pub fn zsys_handler_set(handler_fn: zsys_handler_fn);
}
extern "C" {
    pub fn zsys_handler_reset();
}
extern "C" {
    pub fn zsys_catch_interrupts();
}
extern "C" {
    pub fn zsys_file_exists(filename: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn zsys_file_size(filename: *const ::std::os::raw::c_char) -> isize;
}
extern "C" {
    pub fn zsys_file_modified(filename: *const ::std::os::raw::c_char)
     -> time_t;
}
extern "C" {
    pub fn zsys_file_mode(filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_file_delete(filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_file_stable(filename: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn zsys_dir_create(pathname: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_dir_delete(pathname: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_dir_change(pathname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_file_mode_private();
}
extern "C" {
    pub fn zsys_file_mode_default();
}
extern "C" {
    pub fn zsys_version(major: *mut ::std::os::raw::c_int,
                        minor: *mut ::std::os::raw::c_int,
                        patch: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsys_sprintf(format: *const ::std::os::raw::c_char, ...)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsys_vprintf(format: *const ::std::os::raw::c_char,
                        argptr: *mut __va_list_tag)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsys_udp_new(routable: bool) -> SOCKET;
}
extern "C" {
    pub fn zsys_udp_close(handle: SOCKET) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_udp_send(udpsock: SOCKET, frame: *mut zframe_t,
                         address: *mut inaddr_t,
                         addrlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_udp_recv(udpsock: SOCKET,
                         peername: *mut ::std::os::raw::c_char,
                         peerlen: ::std::os::raw::c_int) -> *mut zframe_t;
}
extern "C" {
    pub fn zsys_socket_error(reason: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsys_hostname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsys_daemonize(workdir: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_run_as(lockfile: *const ::std::os::raw::c_char,
                       group: *const ::std::os::raw::c_char,
                       user: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_has_curve() -> bool;
}
extern "C" {
    pub fn zsys_set_io_threads(io_threads: usize);
}
extern "C" {
    pub fn zsys_set_max_sockets(max_sockets: usize);
}
extern "C" {
    pub fn zsys_socket_limit() -> usize;
}
extern "C" {
    pub fn zsys_set_max_msgsz(max_msgsz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsys_max_msgsz() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_set_linger(linger: usize);
}
extern "C" {
    pub fn zsys_set_sndhwm(sndhwm: usize);
}
extern "C" {
    pub fn zsys_set_rcvhwm(rcvhwm: usize);
}
extern "C" {
    pub fn zsys_set_pipehwm(pipehwm: usize);
}
extern "C" {
    pub fn zsys_pipehwm() -> usize;
}
extern "C" {
    pub fn zsys_set_ipv6(ipv6: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsys_ipv6() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_set_interface(value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsys_interface() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsys_set_ipv6_address(value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsys_ipv6_address() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsys_set_ipv6_mcast_address(value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsys_ipv6_mcast_address() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zsys_set_auto_use_fd(auto_use_fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsys_auto_use_fd() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsys_set_logident(value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsys_set_logstream(stream: *mut FILE);
}
extern "C" {
    pub fn zsys_set_logsender(endpoint: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zsys_set_logsystem(logsystem: bool);
}
extern "C" {
    pub fn zsys_error(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zsys_warning(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zsys_notice(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zsys_info(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zsys_debug(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zsys_test(verbose: bool);
}
extern "C" {
    #[link_name = "zsys_interrupted"]
    pub static mut zsys_interrupted: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "zctx_interrupted"]
    pub static mut zctx_interrupted: ::std::os::raw::c_int;
}
extern "C" {
    pub fn zproc_czmq_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zproc_interrupted() -> bool;
}
extern "C" {
    pub fn zproc_has_curve() -> bool;
}
extern "C" {
    pub fn zproc_hostname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zproc_daemonize(workdir: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zproc_run_as(lockfile: *const ::std::os::raw::c_char,
                        group: *const ::std::os::raw::c_char,
                        user: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zproc_set_io_threads(io_threads: usize);
}
extern "C" {
    pub fn zproc_set_max_sockets(max_sockets: usize);
}
extern "C" {
    pub fn zproc_set_biface(value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zproc_biface() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zproc_set_log_ident(value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zproc_set_log_sender(endpoint: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zproc_set_log_system(logsystem: bool);
}
extern "C" {
    pub fn zproc_log_error(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zproc_log_warning(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zproc_log_notice(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zproc_log_info(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zproc_log_debug(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zproc_test(verbose: bool);
}
pub type ztimerset_fn =
    ::std::option::Option<unsafe extern "C" fn(timer_id:
                                                   ::std::os::raw::c_int,
                                               arg:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn ztimerset_new() -> *mut ztimerset_t;
}
extern "C" {
    pub fn ztimerset_destroy(self_p: *mut *mut ztimerset_t);
}
extern "C" {
    pub fn ztimerset_add(self_: *mut ztimerset_t, interval: usize,
                         handler: ztimerset_fn,
                         arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztimerset_cancel(self_: *mut ztimerset_t,
                            timer_id: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztimerset_set_interval(self_: *mut ztimerset_t,
                                  timer_id: ::std::os::raw::c_int,
                                  interval: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztimerset_reset(self_: *mut ztimerset_t,
                           timer_id: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztimerset_timeout(self_: *mut ztimerset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztimerset_execute(self_: *mut ztimerset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztimerset_test(verbose: bool);
}
pub type ztrie_destroy_data_fn =
    ::std::option::Option<unsafe extern "C" fn(data:
                                                   *mut *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn ztrie_new(delimiter: ::std::os::raw::c_char) -> *mut ztrie_t;
}
extern "C" {
    pub fn ztrie_destroy(self_p: *mut *mut ztrie_t);
}
extern "C" {
    pub fn ztrie_insert_route(self_: *mut ztrie_t,
                              path: *const ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_void,
                              destroy_data_fn: ztrie_destroy_data_fn)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztrie_remove_route(self_: *mut ztrie_t,
                              path: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztrie_matches(self_: *mut ztrie_t,
                         path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ztrie_hit_data(self_: *mut ztrie_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ztrie_hit_parameter_count(self_: *mut ztrie_t) -> usize;
}
extern "C" {
    pub fn ztrie_hit_parameters(self_: *mut ztrie_t) -> *mut zhashx_t;
}
extern "C" {
    pub fn ztrie_hit_asterisk_match(self_: *mut ztrie_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ztrie_print(self_: *mut ztrie_t);
}
extern "C" {
    pub fn ztrie_test(verbose: bool);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_data {
    pub _address: u8,
}
impl Clone for __locale_data {
    fn clone(&self) -> Self { *self }
}
